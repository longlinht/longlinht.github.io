<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>与机器，人，神共舞</title>
    <description>编程，读书，思考，旅行，与机器对话，与人交谈，对神发问，探索，体验人生美丽的风景</description>
    <link>https://longlinht.github.io/</link>
    <atom:link href="https://longlinht.github.io//feed.xml" rel="self" type="application/rss+xml" />
    
      <item>
        <title>A practical way to make sure the correctness of your algorithm</title>
        <description>&lt;p&gt;As programmers, it really frustrates us when we cannot 100 percent make sure the functions or algorithms we have written can produce the results we expected. Although we have passed many test cases, we are still not confident enough to say these functions can work and output correct values in all cases. It is impossible for us to have a test case system like Leecode wherever and whenever. It is not realistic. So we need to figure out a way to test our algorithm ourselves. Fortunately, there is indeed one.&lt;/p&gt;

&lt;p&gt;As a fact, this method is based on comparing an existing solution to verify a new one. It sounds simple, right? What are we waiting for? Let us implement it step by step.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Identify a function or algorithm you would like to test. For this example, it is a selection sort function we wrote.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public static void selectionSort(int[] arr) {
		if (arr == null || arr.length &amp;lt; 2) {
			return;
		}
		for (int i = 0; i &amp;lt; arr.length - 1; i++) {
			int minIndex = i;
			for (int j = i + 1; j &amp;lt; arr.length; j++) { 
				minIndex = arr[j] &amp;lt; arr[minIndex] ? j : minIndex;
			}
			swap(arr, i, minIndex);
		}
	}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;In order to compare, we need to implement a simple function, which also can sort the array using an existed and verified solutiion. In this case we using a Java API.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public static void comparator(int[] arr) {
    Arrays.sort(arr);
}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Implement a random sample generator.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public static int[] generateRandomArray(int maxSize, int maxValue) {
    int[] arr = new int[(int) (Math.random() * maxSize) + 1];
    arr[0] = (int) (Math.random() * maxValue) - (int) (Math.random() * maxValue);
    for (int i = 1; i &amp;lt; arr.length; i++) {
        do {
            arr[i] = (int) (Math.random() * maxValue) - (int) (Math.random() * maxValue);
        } while (arr[i] == arr[i - 1]);
    }
    return arr;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Write a function to compare output.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public static boolean isEqual(int[] arr1, int[] arr2) {
    if ((arr1 == null &amp;amp;&amp;amp; arr2 != null) || (arr1 != null &amp;amp;&amp;amp; arr2 == null)) {
        return false;
    }
    if (arr1 == null &amp;amp;&amp;amp; arr2 == null) {
        return true;
    }
    if (arr1.length != arr2.length) {
        return false;
    }
    for (int i = 0; i &amp;lt; arr1.length; i++) {
        if (arr1[i] != arr2[i]) {
            return false;
        }
    }
    return true;
}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Using various size of sample to test the function we wrote and compare to the existed solution.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public static void main(String[] args) {
    int testTime = 500000;
    int maxSize = 100;
    int maxValue = 100;
    boolean succeed = true;
    for (int i = 0; i &amp;lt; testTime; i++) {
        int[] arr1 = generateRandomArray(maxSize, maxValue);
        int[] arr2 = copyArray(arr1);
        selectionSort(arr1);
        comparator(arr2);
        if (!isEqual(arr1, arr2)) {
            succeed = false;
            printArray(arr1);
            printArray(arr2);
            break;
        }
    }
    System.out.println(succeed ? &quot;Nice!&quot; : &quot;Fucking fucked!&quot;);

    int[] arr = generateRandomArray(maxSize, maxValue);
    printArray(arr);
    selectionSort(arr);
    printArray(arr);
}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We can randomly set the test time and sample size to do loads of tests to make sure the function works and outputs correctly. If it can produce expected results after millions of tests. We can be sure of the correctness of this function. But if there is one time they are not equal, in other words, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;selectionSort&lt;/code&gt; produces outputs that are not equal, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;comparator&lt;/code&gt;. We have to say the new solution cannot be accepted; we should debug and test more to find the problem. As long as we use this sharp comparator more and more, we will have more confidence to write down more reliable algorithms.&lt;/p&gt;
</description>
        <pubDate>Thu, 20 Jul 2023 22:20:12 +0400</pubDate>
        <link>https://longlinht.github.io//a-practical-way-for-algorithm-correctness</link>
        <guid isPermaLink="true">https://longlinht.github.io//a-practical-way-for-algorithm-correctness</guid>
      </item>
    
      <item>
        <title>A quick tour of Spring Boot</title>
        <description>&lt;p&gt;As an Android developer currently, I have always dreamed of becoming a full-stack developer, so I started to learn Java backend programming. During the past two weeks, I have read one book and watched a series of tutorial videos on Spring Boot. So I am going to summarize what I have learned and write down my thoughts.&lt;/p&gt;

&lt;p&gt;I have to admit that I had never heard of Spring Boot before I started learning it. After I effortlessly started up a simple project and ran it successfully following the steps the book describes, I have to say it is pretty easy to create and run an application. It just takes one or two minutes to start a runnable program without any extra effort. It just works.&lt;/p&gt;

&lt;p&gt;So the first question is what such a powerful Spring Boot is. Actually, it is not a mysterious thing. You can treat it as an enhanced Spring, which simplifies the complicated configurations and makes dependency management unprecedentedly easy. Let us compare the differences between Spring and Spring Boot in configurations to experience the attractions of Spring Boot for developers.&lt;/p&gt;

&lt;p&gt;for Spring applications:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;We have to manually add dependency in pom.xml&lt;/li&gt;
  &lt;li&gt;We have to manually program the Web3.0 configuration class.&lt;/li&gt;
  &lt;li&gt;We have to manually write the Spring/Spring MVC configuration class.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;while for Spring Boot applications:&lt;/p&gt;

&lt;p&gt;We only need to check a dependency to add it or manually add it, not manually write a configuration class anymore. Writing business controllers and designing data models become the only things we need to do. It significantly speeds up the process of development. No configurations, no worry about dependencies, especially dependency versions—it sounds amazing. We cannot stop asking, How did Spring Boot make it? The answer is that these configurations and dependencies are embedded into Spring Boot. The starter is the key point. Spring Boot has embedded most dependencies we need and organized every dependency with the most matched versions. For example, if we need Spring Web, we just add lines like below:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&amp;lt;dependencies&amp;gt;

...

        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;spring-boot-starter-web&amp;lt;/artifactId&amp;gt;
        &amp;lt;/dependency&amp;gt;
...

&amp;lt;dependencies&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You may have noticed that the dependency didn’t specify the version and that the name of artifactId contains &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;starter&lt;/code&gt;. The version is not necessary any more; Spring Boot helps us figure out all embedded dependencies with the proper version based on the Spring Boot version. This saves us much time and effort in finding the matched versions of dependencies. As an Android developer, I have to say that Android developers also need a framework like this, which can do the most dirty work for us.&lt;/p&gt;

&lt;p&gt;Spring Boot also helps us avoid writing boilerplate code like the Spring MVC configuration class. I think it makes the most use of the annotation and the reflection of Java to implement. It is not uncommon to find that almost all production-grade frameworks written in Java use these Java features to fulfill complicated tasks.&lt;/p&gt;

&lt;p&gt;Another obvious difference between Spring and Spring Boot in the work flow is that Spring Boot has embedded a Tomcat, so I do not need to configure one manually any more. When you are in the process of development, you even forget its existence. You just run and wait for the result.&lt;/p&gt;

&lt;p&gt;Although Spring Boot has helped us get rid of annoying XML configurations, it still has configurations. Several styles of configuration files are supported. But the style of yaml is preferred.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;spring:
  thymeleaf:
    cache: false
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Yaml differs from traditional property files, which consist of key=value lines. The reason for choosing yaml instead of property files is that property files cannot represent structured configuration well.&lt;/p&gt;

&lt;p&gt;Before going to the most exciting part of Spring Boot, let us go on a whirlwind REST tour.
If we would like to locate a resource through a URI (path) and do different operations on it, we usually define different paths to complete different tasks.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;http://localhost/user/saveUser
http://localhost/user/delete?id=1
http://localhost/user/updateUser
http://localhost/user/getById?id=1
http://localhost/user/getAll

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;While adopting REST style, we can do this more elegantly:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;http://localhost/user/users
http://localhost/user/users/1
http://localhost/user/users
http://localhost/user/users/1
http://localhost/user/users

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;On first sight, it is hard to tell the difference among these paths. In fact, Spring Boot has provided us with several annotations to specify every action each path stands for. The first path with the GET action will make a request for all users, while the third path with the POST action will save a user. Concise and elegant, right? Next, we will step into the key part of Spring Boot that can show its power.&lt;/p&gt;

&lt;p&gt;Spring Boot has been evolving quickly since it appeared. Until now, it has been seamlessly integrated with most mainstream third-party technologies like JUnit(for testing), MyBatis(for persistence), Druid(for data source), Simple(for cache). Actually, it supports most of them directly. Introducing them to your project becomes quick and effortless. I have tried to integrate several of them into my trivial project and found a general routine to complete the integration task. When you want to introduce a technology (library) for a specific purpose to your project, generally speaking, you should do these three steps:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Import the starter of this library.&lt;/li&gt;
  &lt;li&gt;Turn on this library, which means letting Spring Boot know you want to use this library or technology.&lt;/li&gt;
  &lt;li&gt;Using it in your business code.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;For example, if we want to introduce Simple for cache, we will follow these 3 steps:&lt;/p&gt;

&lt;p&gt;1.Import&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;spring-boot-starter-cache&amp;lt;/artifactId&amp;gt;
&amp;lt;/dependency&amp;gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;2.Turn on&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
@SpringBootApplication
@EnableCaching
public class TacoCloudApplication implements WebMvcConfigurer {
    public static void main(String[] args) {
        SpringApplication.run(TacoCloudApplication.class, args);
    }
}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;3.Using&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;@Cachable(value=&quot;cacheSpace&quot;,key=&quot;#id&quot;)
public User getById(Integer id) {
  return userDao.selectById(id);
}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;After these 3 steps, we can already use all the cache capabilities that Simple has provided for us. Other 3rd-party libraries are directly supported by Spring Boot nearly all can be introduced like above. The quick tour of Spring Boot has to end now. This article is just a summary and whirlwind tour; next I will dive deep into a specific technology often used in Spring Boot.&lt;/p&gt;

</description>
        <pubDate>Wed, 12 Jul 2023 22:20:12 +0400</pubDate>
        <link>https://longlinht.github.io//a-quick-tour-of-spring-boot</link>
        <guid isPermaLink="true">https://longlinht.github.io//a-quick-tour-of-spring-boot</guid>
      </item>
    
      <item>
        <title>生活在Vim中</title>
        <description>&lt;p&gt;从第一天接触Vim编辑器到现在已经过去10年了，从最开始的不知所措到现在的运用自如，Vim已经融入到了我工作生活的很多场景, 它对于我已经不仅仅是一个高效强大的编辑器，更是变成了一种做事的方式和编辑，操作的哲学。关于这种哲学我最喜欢一个类比: 使用Vim的过程就像是一个画家画画的过程，当一个画家需要挥毫泼墨时，他就进入了insert模式，可以对画布进行任意的修改，当一个画家需要思考和审视时，他需要防止笔误和操作失当，这个时候他就需要进入normal模式，这个时候不能修改画布，只能在画布上移动，无论是移动你的手指和思绪，这个时候都不能对画布进行修改。这种特有的多模式也许是Vim和Emacs与其他大部分编辑器最显著的不同。&lt;/p&gt;

&lt;p&gt;当你初窥Vim的与众不同后，如果你还不熟悉它的使用，你可能会不知所措，甚至无法编辑，无法退出，你和它会僵死在那里。你遇到的这种困境也正是Vim特有的操作方式引起的。这篇文章不打算如流水账般罗列Vim的诸多命令，我只挑选几种在日常代码编辑中最常用的命令来呈现Vim的神奇与强大。Vim之强大主要体现在无论是移动查询还是修改替换都能将一个动作做到非常小的粒度和精确控制，并且可以以极少的击键次数优雅地实现你精细的操作。我来举一个最常见的例子:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;int i = 3 * (4 + 2);

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;如上，假如我们想将括号中的内容改掉，一般的编辑器的做法都是移动到数字4，然后完全选中括号中的内容后修改。但是如果使用Vim，动作将会非常简单和快捷，只需移动到左括号后键入&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ci(&lt;/code&gt;即可，然后就可以直接进入insert模式修改了。敏感的读者可能已经感知到Vim的这条命令其实就是change in ()，有非常强的自然语言命令的感觉。&lt;/p&gt;

&lt;p&gt;因为vim的使用其实可以写成一本书，网络上的教程更是数不胜数，这篇文章也不打算写成一篇使用教程。vim本身的使用需要长期的实践，而vim的使用场景的扩展可能就需要不断的探索和尝试了。我因为长期使用vim，对其浸润很深，所以发现了不少vim的其他使用方式和场景。第一个场景就是vim的命令和操作方式以插件的形式存在于其他的编辑器，IDE和软件应用中。 以下是三个典型的插件：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;VsVim(这个是大名鼎鼎的Visual Studio的一款Vim插件)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;VSCodeVim(for Visual Studio Code)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;IdeaVim(for Android Studio)&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;这三个插件都是应用于IDE或编辑器, 下面的这个插件甚至应用于Google浏览器:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Vimium&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;其实按照这个思路，凡是有编辑需求的应用都可以嵌入Vim插件，这样的话即使某一天Vim这个编辑器不存在了, Vim的这种思想却可以一直存在下去，这也许就是Vim的魅力吧! 至此，谈到Vim的永生，就不得不谈一个我最近几年一直在用的Emacs变体–Spacemacs。Spacemacs本质上还是Emacs，一个厉害的程序员通过配置文件将其扩展成了一个可以同时支持Vim和Emacs操作的巨无霸，足见Emacs的强大的可扩展性。当你第一次使用Spacemacs时会让你选择Vim世界还是Emacs世界,两大上古神奇竟以此种方式存在了下来…&lt;/p&gt;

&lt;p&gt;使用Vim的历程，从排斥到爱不释手到离不开，Vim已成为工作生活的一部分，可谓一日Vim，终生Vim.&lt;/p&gt;

</description>
        <pubDate>Fri, 10 Dec 2021 22:30:12 +0400</pubDate>
        <link>https://longlinht.github.io//live-in-the-vim</link>
        <guid isPermaLink="true">https://longlinht.github.io//live-in-the-vim</guid>
      </item>
    
      <item>
        <title>BaseQuickAdapter使用tips</title>
        <description>&lt;p&gt;此文记录在实际工作中使用BaseQuickAdapter的一些经验和心得，以期新同学在第一次使用时免去踩坑的风险。&lt;/p&gt;

&lt;p&gt;Tips:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;如果adapter只有一种类型的item，则直接继承自BaseQuickAdapter，提供布局文件即可，例如:&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
class SelectedContactAdapter : BaseQuickAdapter&amp;lt;ContactUIItemData, BaseViewHolder&amp;gt;(layoutResId = R.layout.s_item_select_user_normal){
    override fun convert(holder: BaseViewHolder, item: ContactUIItemData) {
        holder.getView&amp;lt;UserFaceView&amp;gt;(R.id.ufv_avatar).bindUid(item.bean.account)
        addChildClickViewIds(R.id.ll_item)
    }
}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;如果adapter需要多种类型的item，则需要继承自BaseMultiItemQuickAdapter，例如:&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
class ContactAdapter : BaseMultiItemQuickAdapter&amp;lt;ContactUIItemData, BaseViewHolder&amp;gt;() {

    var actionType = AppConstants.User.TYPE_CONTACT_NEW_MESSAGE

    init {
        addItemType(ITEM_TYPE_HEAD, R.layout.s_item_contact_head)
        addItemType(ITEM_TYPE_TITLE, R.layout.s_item_contact_title)
        addItemType(ITEM_TYPE_CONTACT, R.layout.s_item_single_contact)

        setDiffCallback(object : DiffUtil.ItemCallback&amp;lt;ContactUIItemData&amp;gt;() {
            override fun areItemsTheSame(
                oldItem: ContactUIItemData,
                newItem: ContactUIItemData
            ): Boolean {
                return oldItem.viewType == newItem.viewType
            }

            override fun areContentsTheSame(
                oldItem: ContactUIItemData,
                newItem: ContactUIItemData
            ): Boolean {
                if (newItem.viewType == ITEM_TYPE_CONTACT) {
                    return TextUtils.equals(newItem.bean.account, oldItem.bean.account) &amp;amp;&amp;amp; TextUtils.equals(newItem.bean.name, oldItem.bean.name)
                    &amp;amp;&amp;amp; TextUtils.equals(newItem.searchText, oldItem.searchText)
                }
                return true;
            }
        })
    }
    
    ....
}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这里需要注意的是数据item必须实现MultiItemEntity接口:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
public class ContactUIItemData implements MultiItemEntity {

    ...

    @Override
    public int getItemType() {
        return viewType;
    }
}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;并且需要实现DiffCallback，DiffCallback有两个方法需要实现，第一个用来判断两个item是否同一类型，如果判断是，则调用第二个方法判断两个item内容是否相等，这两个方法需要根据实际业务场景谨慎实现。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;刷新数据统一调用setDiffNewData，无论是第一次加载数据还是后续数据变更刷新，这里要注意的是，刷新时调用setDiffNewData需要传入新的数据列表才能实现刷新。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;如只需刷新某个item，则可以通过notifyItemChanged来实现，当然添加和删除数据都有对应的方法，但是添加和删除还是统一走setDiffNewData比较好。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;如只需刷新某个item中的某个元素，而不是刷新整个item，则可以通过payload的方式来实现局部刷新，例如:&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
override fun convert(holder: BaseViewHolder, item: GroupUIItemData, payloads: List&amp;lt;Any&amp;gt;) {
    super.convert(holder, item, payloads)
    when(holder.itemViewType) {
        GroupContactItemConstants.ITEM_TYPE_CONTACT -&amp;gt; {
            if (payloads.isEmpty()) {
                return
            }

            val payload = payloads[0];
            if (payload == EDIT_MODE_PAYLOAD) {

                val cbSelect = holder.getView&amp;lt;CheckBox&amp;gt;(R.id.cb_select)
                cbSelect.isChecked = item.checked
                cbSelect.isEnabled = item.enabled

                if (item.canSelect) {
                    cbSelect.visibility = View.VISIBLE
                } else {
                    cbSelect.visibility = View.GONE
                }
            }
        }
    }
}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;对需要局部刷新的item调用contactsAdapter.notifyItemChanged(position, GroupContactAdapter.EDIT_MODE_PAYLOAD).&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;如遇到列表不刷新的问题，则需要检查调用setDiffNewData时传入的是否时新的列表，数据源对象是不是新对象，从多个方面来排查，理论上更新列表就统一使用这个方法，避免调用notifyDataSetChanged.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;要注意DiffCallback的实现，如果遇到问题，可调试此接口两个方法实现的返回值。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Item的点击事件响应都是通过setOnItemClickListener和setOnItemChildClickListener分别实现，前者是注册整个item，后者是注册item上的子view，子view的响应需要调用addChildClickViewIds来分别注册。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Item的长按与点击相同，分别对应setOnItemLongClickListener和setOnItemChildLongClickListener两个方法。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Wed, 10 Nov 2021 18:00:00 +0400</pubDate>
        <link>https://longlinht.github.io//base-quick-adapter-tips</link>
        <guid isPermaLink="true">https://longlinht.github.io//base-quick-adapter-tips</guid>
      </item>
    
      <item>
        <title>Kotlin使用小计</title>
        <description>&lt;p&gt;此文记录一次对Kotlin的技术分享，显然无法对Kotlin的方方面面都涉及到，只将一些在实际工作中频繁涉及到的要点做一个梳理，以期对Kotlin这们JVM语言有一个整体的认识。&lt;/p&gt;

&lt;h4 id=&quot;为什么使用kotlin&quot;&gt;为什么使用Kotlin&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;静态类型语言&lt;/li&gt;
  &lt;li&gt;同时支持面向对象和函数式编程范式&lt;/li&gt;
  &lt;li&gt;更强大语言表达能力&lt;/li&gt;
  &lt;li&gt;解决Java NPE问题，更安全&lt;/li&gt;
  &lt;li&gt;支持扩展函数&lt;/li&gt;
  &lt;li&gt;与Java的高互操作性&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;类和函数&quot;&gt;类和函数&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;我们只能继承声明为open 或 obstract的类&lt;/li&gt;
  &lt;li&gt;Unit 类似Java中的void&lt;/li&gt;
  &lt;li&gt;每一个函数都返回一个值&lt;/li&gt;
  &lt;li&gt;函数参数支持默认值，类似C++&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;变量和属性&quot;&gt;变量和属性&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;一切都是对象，包括基础类型，比Java更加彻底&lt;/li&gt;
  &lt;li&gt;对于var和val的使用，最佳实践是: 尽可能多的使用val&lt;/li&gt;
  &lt;li&gt;Property类似java中的field，但更强大:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In Java:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public class Person {
   private String name;

   public String getName() {
     return name;
   }

  public void setName(String name) {
     this.name = name;
   }

}

Person person = new Person();
person.setName(&quot;name&quot;);
String name = person.getName();

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In Kotlin:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;class Person {
  var name: String = &quot;&quot;
}

val person = Person()
person.name = &quot;name&quot;
val name = person.name

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;定制getter，setter行为:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;class Person {
  var name: String = &quot;&quot;
     get() = field.toUpperCase()
     set(value) {
       field = &quot;Name: $value&quot;
     }
}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;data-classes&quot;&gt;Data Classes&lt;/h4&gt;

&lt;p&gt;强大的一种类，可以帮助我们避免一些模板代码和避免出错&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;data class Movie(var name: String, var studio: String, var rating: Float)

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;等价于Java Pojo:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
public class Movie {

    private String name;
    private String studio;
    private float rating;
    
    public Movie(String name, String studio, float rating) {
        this.name = name;
        this.studio = studio;
        this.rating = rating;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getStudio() {
        return studio;
    }

    public void setStudio(String studio) {
        this.studio = studio;
    }

    public float getRating() {
        return rating;
    }

    public void setRating(float rating) {
        this.rating = rating;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        
        result = prime * result + ((name == null) ? 0 : name.hashCode());
        result = prime * result + Float.floatToIntBits(rating);
        result = prime * result + ((studio == null) ? 0 : studio.hashCode());
        
        return result;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        
        if (obj == null)
            return false;
        
        if (getClass() != obj.getClass())
            return false;
        
        Movie other = (Movie) obj;
        
        if (name == null) {
            if (other.name != null)
                return false;
            
        } else if (!name.equals(other.name))
            return false;
        
        if (Float.floatToIntBits(rating) != Float.floatToIntBits(other.rating))
            return false;
        
        if (studio == null) {
            if (other.studio != null)
                return false;
            
        } else if (!studio.equals(other.studio))
            return false;
        
        return true;
    }

    @Override
    public String toString() {
        return &quot;Movie [name=&quot; + name + &quot;, studio=&quot; + studio + &quot;, rating=&quot; + rating + &quot;]&quot;;
    }
}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Copy数据类对象:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;val f1 = Forecast(Date(), 27.5f, &quot;Shiny day&quot;)
val f2 = f1.copy(temperature = 30f)

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;把一个对象的多个字段映射到多个变量中&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;val f1 = Forecast(Date(), 27.5f, &quot;Shiny day&quot;)
val (date, temperature, details) = f1

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;操作符重载&quot;&gt;操作符重载&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;类似C++&lt;/li&gt;
  &lt;li&gt;===和!==不能被重载&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;lambdas&quot;&gt;Lambdas&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;Java也支持，但是Kotlin中lambdas表达式可以变得非常简单，语法糖，便利的同时也要特别小心&lt;/li&gt;
  &lt;li&gt;在Kotlin中，函数可以作为一个类型&lt;/li&gt;
  &lt;li&gt;类似C++中的函数指针&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;visibility-modifiers&quot;&gt;Visibility Modifiers&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;默认的可见性是public&lt;/li&gt;
  &lt;li&gt;private, protected, internal可见官方文档定义&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;集合和函数操作&quot;&gt;集合和函数操作&lt;/h4&gt;

&lt;p&gt;大概有如下几类操作,具体见官方文档&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Aggregate operations:&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
//any
val list = listOf(1, 2, 3, 4, 5, 6)
assertTrue(list.any { it % 2 == 0 })
assertFalse(list.any { it &amp;gt; 10 })

//all
assertTrue(list.all { it &amp;lt; 10 })
assertFalse(list.all { it % 2 == 0 })

...

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Filtering operations&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Mapping operations&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Elements operations&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Generation operations&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Ordering operations&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;null-safety-in-kotlin&quot;&gt;Null safety in Kotlin&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;对臭名昭著的Java NPE有了解决方案&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;代码中如果大量充斥!!操作符将是一个很不好的信号&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;如果显示声明为非空变量后再赋值空对象，会导致运行时crash，需特别注意&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Kotlin和Java代码共存，并且互操作时要特别注意空指针问题&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Java可通过Nullable和NonNull注解来显式明晰变量的取值&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;coroutine&quot;&gt;Coroutine&lt;/h4&gt;
&lt;p&gt;可参见已有的一次技术分享: https://wiki.inn.bitcall.xyz/pages/viewpage.action?pageId=2232386&lt;/p&gt;

&lt;h4 id=&quot;anko&quot;&gt;Anko&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Github: https://github.com/Kotlin/anko&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;JetBrains开发的一个强大的类库&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;主要目的是使用代码来代替XML来生成UI布局&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;我们的项目在后期性能优化时可考虑引入使用&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;kotlin-vs-java&quot;&gt;Kotlin vs. Java&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/java-vs-kotlin.png&quot; /&gt;&lt;/p&gt;

</description>
        <pubDate>Sat, 06 Nov 2021 18:00:00 +0400</pubDate>
        <link>https://longlinht.github.io//kotlin-overview</link>
        <guid isPermaLink="true">https://longlinht.github.io//kotlin-overview</guid>
      </item>
    
      <item>
        <title>升级Kotlin版本导致的coroutine崩溃ANR小记</title>
        <description>&lt;p&gt;最近公司的项目在最新的版本中升级了kotlin版本，使用CI打包后的版本启动都或闪退，或ANR，看崩溃日志和ANR日志，矛头都指向了coroutine，并且Release版本崩溃而Debug版本没有问题，初步断定就是混淆的问题了。因此搜索相关Proguard rules，在Kotlin官方Github中找到coroutines.pro文件:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
# Allow R8 to optimize away the FastServiceLoader.
# Together with ServiceLoader optimization in R8
# this results in direct instantiation when loading Dispatchers.Main
-assumenosideeffects class kotlinx.coroutines.internal.MainDispatcherLoader {
    boolean FAST_SERVICE_LOADER_ENABLED return false;
}

-assumenosideeffects class kotlinx.coroutines.internal.FastServiceLoaderKt {
    boolean ANDROID_DETECTED return true;
}

-keep class kotlinx.coroutines.android.AndroidDispatcherFactory {*;}

# Disable support for &quot;Missing Main Dispatcher&quot;, since we always have Android main dispatcher
-assumenosideeffects class kotlinx.coroutines.internal.MainDispatchersKt {
    boolean SUPPORT_MISSING return false;
}

# Statically turn off all debugging facilities and assertions
-assumenosideeffects class kotlinx.coroutines.DebugKt {
    boolean getASSERTIONS_ENABLED() return false;
    boolean getDEBUG() return false;
    boolean getRECOVER_STACK_TRACES() return false;
}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;添加此混淆规则后重新打包，崩溃和ANR成功修复。&lt;/p&gt;

</description>
        <pubDate>Fri, 04 Jun 2021 18:00:00 +0400</pubDate>
        <link>https://longlinht.github.io//kotli-coroutine-proguard-crash</link>
        <guid isPermaLink="true">https://longlinht.github.io//kotli-coroutine-proguard-crash</guid>
      </item>
    
      <item>
        <title>xCrash运用小结</title>
        <description>&lt;p&gt;公司在做海外产品，由于免费版firebase对native崩溃的捕获上报能力有限(无堆栈，无具体上下文信息)，因此对我们定位和降低native极为不利，当native崩溃总量进入top行列的时候，就不能对其视而不见了，因此我开始调研解决方案，最后决定接入爱奇艺推出的xCrash来捕获native崩溃，当然了，xCrash本身是不具备上报功能的，它只是将崩溃信息写入tombstone文件。因此需要在其基础之上添加上报功能。&lt;/p&gt;

&lt;p&gt;要实现上报功能，就需要选择一个上报时机，在崩溃发生时或App再次启动时，我选择了在崩溃发生时即时上传tombstone文件，并与服务端约定上报协议，最终实现可在firebase后台通过设备ID来查看上传到服务器的tombstone文件。&lt;/p&gt;

&lt;p&gt;具体实现如下：&lt;/p&gt;

&lt;p&gt;在崩溃发生的回调中找到最新的tombstone文件，打包上传至服务器&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
public void init(Context context) {
    XCrash.init(context, new XCrash.InitParameters()
            .setAppVersion(BuildConfig.VERSION_NAME)
            .setLogDir(getCrashDir().getAbsolutePath())
            .setJavaRethrow(true)
            .setJavaLogCountMax(3)
            .setJavaDumpAllThreadsWhiteList(new String[]{&quot;^main$&quot;, &quot;^Binder:.*&quot;, &quot;.*Finalizer.*&quot;})
            .setJavaDumpAllThreadsCountMax(0)
            .setNativeRethrow(true)
            .setNativeLogCountMax(3)
            .setNativeDumpAllThreadsWhiteList(new String[]{&quot;^Signal Catcher$&quot;, &quot;^Jit thread pool$&quot;, &quot;.*(R|r)ender.*&quot;, &quot;.*Chrome.*&quot;})
            .setNativeDumpAllThreadsCountMax(0)
            .setAnrRethrow(true)
            .setAnrLogCountMax(3)
            .setPlaceholderCountMax(0)
            .setLogFileMaintainDelayMs(1000)
            .setLogger(mLogger)
            .setLibLoader(new ILibLoader() {
                @Override public void loadLibrary(String libName) {
                    try {
                        ReLinker.loadLibrary(context, libName);
                    } catch (Exception e) {
                        printLog(e + &quot; | &quot; + libName);
                        System.loadLibrary(libName);
                    }
                }
            }).setAnrCallback(new ICrashCallback() {
                // ANR发生时的回调
                @Override public void onCrash(String logPath, String emergency) throws Exception {
                    catchANRLogDelay();
                }
            }).setJavaCallback(new ICrashCallback() {

                // Java崩溃发生时的回调
                @Override public void onCrash(String logPath, String emergency) throws Exception {
                    catchCrashLog();
                }
            }).setNativeCallback(new ICrashCallback() {
               //Native崩溃发生时的回调
                @Override public void onCrash(String logPath, String emergency) throws Exception {
                    catchCrashLog();
                }
            })
    );
}


// 打包上传tombstone文件
private void catchCrashLog() {
    crashZipId = generateCrashId();
    final File out = new File(AppInstances.getPathManager().getTmpFilePath() + crashZipId + &quot;.gzip&quot;);

    try {
        List&amp;lt;File&amp;gt; files = Arrays.asList(getCrashDir().listFiles());
        if (ListUtils.isEmpty(files)) {
            return;
        }

        File crashFile = null;
        long lastModified = 0;
        for (File f : files) {
            if (f.lastModified() &amp;gt; lastModified) {
                lastModified = f.lastModified();
                crashFile = f;
            }
        }

        if (crashFile != null) {
            GZIPUtils.gzipFile(crashFile.getAbsolutePath(), out.getAbsolutePath());
        }

    } catch (Throwable e) {
        e.printStackTrace();
    }

    upload();
    try {
        Thread.sleep(5000);
    } catch (InterruptedException e) {
        e.printStackTrace();
    }
}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;上面的代码有一点需要注意: 为了尽可能将崩溃日志成功上传至服务器，主线程sleep五秒，对于anr的情况则是在非UI线程中上传日志。&lt;/p&gt;

&lt;p&gt;日志上传成功后，就可以在firebase的崩溃列表中查看某一个崩溃，在数据一栏找到设备ID来查询。因为我们有运营后台可以将设备ID和用户ID关联，因此就可以轻松查到每个用户的崩溃日志。&lt;/p&gt;

&lt;p&gt;此即时上报的方案上线后虽然助力定位到了一些问题，但也有如下缺陷和问题&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;引入了新的问题，如OOM，ANR等问题。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;由于上报依赖于全局的OkHttp Client，因此如果App在没有初始化OkHttp Client的情况下崩溃，则不会上报，就属漏报了。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;崩溃和anr不能即时聚合到一处供查看&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;ANR目前不能查询，但是已尝试使用firebase Event上报，但是貌似免费版无法查看Event的字段，上报的意义不大，后期考虑向服务端上报。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;问题2和3其实可以很容易改善，但是问题1还有待进一步观察，同期因为我们代码的原因引入了一个严重的OOM问题，所以不太确定是不是xCrash受到了影响和牵连。这个OOM问题修复后准备再打开xCrash进一步验证。&lt;/p&gt;

&lt;p&gt;目前观察到一个现象，Android 7以下的机器基本都没有成功上报，比较奇怪，但是本地测试Android 4的机器是可以上报的，此问题后续有待验证。&lt;/p&gt;
</description>
        <pubDate>Thu, 29 Apr 2021 18:00:00 +0400</pubDate>
        <link>https://longlinht.github.io//summary-of-using-xcrash</link>
        <guid isPermaLink="true">https://longlinht.github.io//summary-of-using-xcrash</guid>
      </item>
    
      <item>
        <title>客户端线上问题应对小记</title>
        <description>&lt;p&gt;今年三四月份我所在的App项目经历了不少我之前很少遇到的情况，回看这些无论是突发状况，还是隐匿得让人无法发觉的细节导致的问题，都非常有借鉴意义，也是很大的教训，难能可贵的经验，有必要用一小文记录下。&lt;/p&gt;

&lt;p&gt;两个月的时间，经历了一次线上crash激增，一次新发版本用户无法播放视频的集中反馈，和一次OOM和ANR持续上涨。下面分别复盘这三次惊魂时刻。&lt;/p&gt;

&lt;p&gt;先来说说线上crash突然激增，那天上午的时候突然native崩溃曲线陡升，而我们App最近的一个版本已经全量好多天了，native崩溃一直都是一个相对稳定的曲线，这使我们一头雾水，因为firebase对native崩溃的捕获很不好，更加导致我们焦急万分，我负责App的整体质量，当时更是如热锅上的蚂蚁。着急归着急，也不能乱了阵脚，先开始排除活动或广告下发的影响，于是赶紧联系了市场的同学，让他们确定最近是否有活动或广告投放，询问后发现并没有，但是得知最近的确有买量的操作，并且DAU有上涨的趋势，于是怀疑是不是因为买量导致native崩溃激增，但是后来查看firebase后台，native崩溃大多发生在低端机器上，这就说不过去了，难道买到的量都是低端机器?于是很快推翻了这个怀疑。开始分版本分析，很快发现，近几个版本的native崩溃上涨曲线基本都能吻合，说明这是一个外部环境变化导致的崩溃，而不是某一个版本引入的新崩溃，在firebase有限的native崩溃信息中，还是发现了
libmonochrome.so这个信息，当看到这个so的时候，直觉告诉我是广告导致的没跑了，但是问题来了，最近并没有增加广告的投放，广告又如何使native崩溃激增呢？直到我们搜到这条新闻:&lt;a href=&quot;https://www.cnbeta.com/articles/tech/1105323.htm&quot;&gt;谷歌正在修复Android系统WebView组件引发的应用崩溃问题&lt;/a&gt;一切才豁然开朗，是因为Google推送的webview组件更新有bug，导致了大面积的崩溃，于是我们果断的关闭了广告的投放，到晚上八点的时候，native崩溃曲线终于回归了正常。&lt;/p&gt;

&lt;p&gt;再来说说集中反馈，事情是这样的，我们新发布了一个版本，在放量不到20%时，一天内集中收到好几个用户反馈视频不能播放，从用户提供的截图可以看出视频进度条还在动，但是并未渲染出视频，这个问题与之前我们已知的黑屏问题不同，显然是一个新问题。在没有任何头绪的情况下，就只能通过对比此版本与上个版本的diff来寻找蛛丝马迹，看完所有的diff后还是很让人疑惑，因为真的没有修改任何与播放器相关的代码，就连可能影响播放器的代码也没有，那这个版本到底有什么不同呢？在第二次对比diff的时候，广告sdk的升级改动引起了我的注意，我大胆猜想，难不成是这导致的，如果非要找个嫌疑人的话，只能是它了，于是赌上客户端组的声誉，告知市场广告sdk有问题，新版本去除更新重新发版，放量后再未出现此问题反馈，也是神奇，猜测广告sdk使用了opengl，可能影响到了播放器的视频渲染。&lt;/p&gt;

&lt;p&gt;最后说下OOM和ANR持续上涨得情况，这可以说是一次线上事故，是因为使用第三方库不当和第三方工具本身的问题合力导致的，这次问题是在版本全量后几天后才逐步暴露出来的，坏就坏在这个问题是逐步积累，然后雪球越滚越大最后导致了严重的问题。因为firebase不能统计到有些OOM的崩溃，期初的几天我们还奇怪为什么在没有新增崩溃的情况下，崩溃率竟然一直在涨，于是尽快分析firebase的数据，但仍旧没有什么有用的线索，因为我们一直习惯于在firebase后台看崩溃，在Google Play Console看ANR，因此一直以来的习惯是没有人去GPC去看崩溃，直到在一次看ANR的时候不经意间看到了一个之前未发现的崩溃，显示为OOM问题，至此，问题浮出水面，是全量的这个版本在使用第三方库的时候，未注意到第三方库有一个每次操作如果是在主线程调用的话都新建线程的逻辑，导致了严重的OOM，再加上同一版本也接入了xCrash和BoostMultiDex，因此到底是谁导致了OOM和ANR，已然纠缠不清，版本已发出xCrash和BoostMultiDex已无法绕过，但是导致OOM的这个rtt上报却有开关，可以动态关闭，于是在关闭几天后，崩溃率逐步恢复正常，ANR也恢复正常，因此可以断定rtt上报应该是罪魁祸首。这是一个失误导致的大问题，教训深刻，既暴露了我们工程对线程的管理不善，也暴露出firebase可能漏报了很多我们不知道的OOM崩溃，也就说实际的OOM可能比我们现在看到的还要严重。&lt;/p&gt;

&lt;p&gt;这三次线上问题，都已经过去了，App的崩溃率和ANR也恢复正常，但是教训却很深刻，经过几天的认真复盘和思考，总结出如下经验和教训:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;一个问题激增时不一定是App本身的代码导致的，但也需要及时诊断和定位，不能倾向于从用户设备和DAU变化找问题&lt;/li&gt;
  &lt;li&gt;诊断问题要聚焦，不要受一些外部因素干扰&lt;/li&gt;
  &lt;li&gt;当问题发生时，倾向于App本身有问题，而不是找外部原因，不要被误导诊断方向&lt;/li&gt;
  &lt;li&gt;当反馈集中发生时，肯定是有问题，而不用怀疑是反馈变集中了，事出反常必有妖&lt;/li&gt;
  &lt;li&gt;接入第三方库和工具时要慎之又慎，多测试，多验证，多怀疑，做好兜底，做好出了问题的应对之策&lt;/li&gt;
  &lt;li&gt;影响较大的功能和模块不宜同时出现在一个版本里，出现问题后纠缠不清，无法定位&lt;/li&gt;
  &lt;li&gt;一个问题持续出现后，必须引起重视，在上报数据不完整，无上下文的情况下也要通过其他途径去诊断和定位，切不可倾向于没有问题。&lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Mon, 26 Apr 2021 18:00:00 +0400</pubDate>
        <link>https://longlinht.github.io//resolve-online-problem</link>
        <guid isPermaLink="true">https://longlinht.github.io//resolve-online-problem</guid>
      </item>
    
      <item>
        <title>13个问题测试你对这个世界的无知有多严重</title>
        <description>&lt;p&gt;在Factfulness这本书中作者一开头就抛出13个对事实认知的问题，以此测试读者对这个世界的认知，因为我已经读完了这本书，我觉得这些问题值得将其单列出来，有兴趣的可以做做这些测试题，文末附有答案，相信我你的成绩不一定好过大猩猩，问题列表如下:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
1. In all low-income countries across the world today, how many girls finish primary school? 
   A: 20 percent    B: 40 percent    C: 60 percent 

2. Where does the majority of the world population live? 
   A: Low-income countries    B: Middle-income countries    C: High-income countries 

3. In the last 20 years, the proportion of the world population living in extreme poverty has … 
   A: almost doubled    B: remained more or less the same    C: almost halved 

4. What is the life expectancy of the world today?
    A: 50 years    B: 60 years    C: 70 years 

5. There are 2 billion children in the world today, aged 0 to 15 years old. How many children will there be in the year 2100, according to the United Nations? 
   A: 4 billion    B: 3 billion    C: 2 billion

6. The UN predicts that by 2100 the world population will have increased by another 4 billion people. What is the main reason? 
   A: There will be more children (age below 15)    B: There will be more adults (age 15 to 74)    C: There will be more very old people (age 75 and older) 

7. How did the number of deaths per year from natural disasters change over the last hundred years? 
   A: More than doubled    B: Remained about the same    C: Decreased to less than half 

8. There are roughly 7 billion people in the world today. Which map shows best where they live? (Each figure represents 1 billion people.) 

9. How many of the world’s 1-year-old children today have been vaccinated against some disease?
   A: 20 percent    B: 50 percent    C: 80 percent 

10. Worldwide, 30-year-old men have spent 10 years in school, on average. How many years have women of the same age spent in school? 
   A: 9 years    B: 6 years    C: 3 years 

11. In 1996, tigers, giant pandas, and black rhinos were all listed as endangered. How many of these three species are more critically endangered today? 
   A: Two of them    B: One of them    C: None of them 

12. How many people in the world have some access to electricity? 
   A: 20 percent    B: 50 percent    C: 80 percent 

13. Global climate experts believe that, over the next 100 years, the average temperature will … 
   A: get warmer    B: remain the same    C: get colder

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Here are the correct answers:&lt;/p&gt;

&lt;p&gt;1: C, 2: B, 3: C, 4: C, 5: C, 6: B, 7: C, 8: A, 9: C, 10: A, 11: C, 12: C, 13: A&lt;/p&gt;

</description>
        <pubDate>Thu, 22 Apr 2021 00:54:12 +0400</pubDate>
        <link>https://longlinht.github.io//13-questions-test-your-ignorance</link>
        <guid isPermaLink="true">https://longlinht.github.io//13-questions-test-your-ignorance</guid>
      </item>
    
      <item>
        <title>重读Sapiens</title>
        <description>&lt;p&gt;两年前读过《人类简史》的中译本，去年年终和今年年初一口气读完了《未来简史》和《今日简史》的英文版，就一直惦记着干脆把《人类简史》的英文版再读一遍，今年过年时本来想一鼓作气读完，但是中间又读了《The Black Swan》，就一直没顾上，最近坐地铁通勤，断断续续终于又读了一遍，不得不说，再读英文版，依旧有新的收获。不管从写史的风格，思路，框架，格局，还是文笔，都是一等一的杰作。&lt;/p&gt;

&lt;p&gt;且看开篇这个段落：&lt;/p&gt;

&lt;p&gt;Years Before the Present&lt;/p&gt;

&lt;p&gt;13.5 billion Matter and energy appear. Beginning of physics. Atoms and molecules appear. Beginning of chemistry.&lt;/p&gt;

&lt;p&gt;4.5 billion Formation of planet Earth.&lt;/p&gt;

&lt;p&gt;3.8 billion Emergence of organisms. Beginning of biology.&lt;/p&gt;

&lt;p&gt;6 million Last common grandmother of humans and chimpanzees.&lt;/p&gt;

&lt;p&gt;2.5 million Evolution of the genus Homo in Africa. First stone tools.&lt;/p&gt;

&lt;p&gt;2 million Humans spread from Africa to Eurasia. Evolution of different human species.&lt;/p&gt;

&lt;p&gt;500,000 Neanderthals evolve in Europe and the Middle East.&lt;/p&gt;

&lt;p&gt;300,000 Daily usage of fire.&lt;/p&gt;

&lt;p&gt;200,000 Homo sapiens evolves in East Africa.&lt;/p&gt;

&lt;p&gt;70,000 The Cognitive Revolution. Emergence of fictive language. Beginning of history. Sapiens spread out of Africa.&lt;/p&gt;

&lt;p&gt;45,000 Sapiens settle Australia. Extinction of Australian megafauna.&lt;/p&gt;

&lt;p&gt;30,000 Extinction of Neanderthals.&lt;/p&gt;

&lt;p&gt;16,000 Sapiens settle America. Extinction of American megafauna.&lt;/p&gt;

&lt;p&gt;13,000 Extinction of Homo floresiensis. Homo sapiens the only surviving human species.&lt;/p&gt;

&lt;p&gt;12,000 The Agricultural Revolution. Domestication of plants and animals. Permanent settlements.&lt;/p&gt;

&lt;p&gt;5,000 First kingdoms, script and money. Polytheistic religions.&lt;/p&gt;

&lt;p&gt;4,250 First empire– the Akkadian Empire of Sargon.&lt;/p&gt;

&lt;p&gt;2,500 Invention of coinage– a universal money. The Persian Empire– a universal political order ‘for the benefit of all humans’. Buddhism in India– a universal truth ‘to liberate all beings from suffering’.&lt;/p&gt;

&lt;p&gt;2,000 Han Empire in China. Roman Empire in the Mediterranean. Christianity.&lt;/p&gt;

&lt;p&gt;1,400 Islam.&lt;/p&gt;

&lt;p&gt;500 The Scientific Revolution. Humankind admits its ignorance and begins to acquire unprecedented power. Europeans begin to conquer America and the oceans. The entire planet becomes a single historical arena. The rise of capitalism.&lt;/p&gt;

&lt;p&gt;200 The Industrial Revolution. Family and community are replaced by state and market. Massive extinction of plants and animals. The Present Humans transcend the boundaries of planet Earth. Nuclear weapons threaten the survival of humankind. Organisms are increasingly shaped by intelligent design rather than natural selection. The Future Intelligent design becomes the basic principle of life? Homo sapiens is replaced by superhumans?&lt;/p&gt;

&lt;p&gt;我也看过不少历史类的书籍，没有一个作者像赫拉利这样，寥寥数言，已经清晰的勾勒出人类历史的基本脉络，并且文字有趣，简洁。坦白讲，自柏杨先生《中国人史纲》的开篇后，好多年没再看到这么好的历史类段落了。&lt;/p&gt;

&lt;p&gt;书中所论述的一些观点之新颖，视角之新奇，思想之深刻，足可让赫拉利本人创立一个学派，而这些观点和视角完全值得细数一番：&lt;/p&gt;

&lt;p&gt;人类相较于其他哺乳动物都是早产儿。&lt;/p&gt;

&lt;p&gt;在地球上曾经存在过很多个人种，现在只剩下智人一支，而其他人种的消亡智人有脱不了的干系，就如一些巨形陆生动物的消亡也与智人的出现脱不了干系一样。&lt;/p&gt;

&lt;p&gt;使用火，吃上熟食，依旧是人类节省消化能量，促进大脑进化的关键。&lt;/p&gt;

&lt;p&gt;人类的崛起，或者说是成为这个世界的主宰的关键，不是会使用工具，而是智人虚构出了一些不存在的东西，如神鬼，宗教，国家，法律，公司等，这是消亡的其他人种和其它动物所没有的。&lt;/p&gt;

&lt;p&gt;人类在农业革命之前可能活的是最轻松和健康的，从那之后人类就进入了无尽的辛劳和焦虑，直到今日这种状况也并没有改善，只是换了一种表现形式。&lt;/p&gt;

&lt;p&gt;人类的秩序是想象出来的，包括钱，因为人相信这些是真实存在的。&lt;/p&gt;

&lt;p&gt;汉谟拉比法典和人权宣言都不能细细推敲，如严格说来都是胡说八道。&lt;/p&gt;

&lt;p&gt;书中如上述的一些观点和论述都有更多的细节，可参阅原文，几乎每一条都新是新思路，新视角，使人总有拍案叫绝的冲动。文字也是好文字，使我一个可通读英文书籍没几年的人也感觉没有刻板，不觉晦涩。&lt;/p&gt;

&lt;p&gt;好书就该为其写一篇读后感，虽是最俗套的做法，但还是写下了自己的一些感受和领悟。今后回看也好有个参照。&lt;/p&gt;
</description>
        <pubDate>Sun, 18 Apr 2021 00:54:12 +0400</pubDate>
        <link>https://longlinht.github.io//read-sapiens</link>
        <guid isPermaLink="true">https://longlinht.github.io//read-sapiens</guid>
      </item>
    
  </channel>
</rss>