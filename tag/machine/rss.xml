<?xml version="1.0" encoding="UTF-8" ?>

<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
   
      <title>longlinht.github.io/</title>
   
   <link>http://longlinht.github.io/</link>
   <description>编程，读书，思考，旅行，与机器对话，与人交谈，对神发问，探索，体验人生美丽的风景</description>
   <language>en-uk</language>
   <managingEditor> Tao He</managingEditor>
   <atom:link href="rss" rel="self" type="application/rss+xml" />
   
	<item>
	  <title>解决闹人的can not found symbol BR问题</title>
	  <link>//br-not-found</link>
	  <author>Tao He</author>
	  <pubDate>2018-12-03T04:20:12+08:00</pubDate>
	  <guid>//br-not-found</guid>
	  <description><![CDATA[
	     <p>最近公司研发的这个App是我从零到一搭建的，在框架搭建时分别使用了Databinding和Room，今天在做新需求时需要向Room中的实体类新添加一个字段，在写完了所有相关的逻辑后，build工程，所有自动生成的Databinding类都报错，build log中并没有指向任何具体报错的Databinding类，这就令人很困惑，因为这个需求的添加并没有改动任何Databinding的类，在不知所以的情况下，那就尝试其他方法解决，之前我在一个技术博客上看到过一个Databinding类的Troubleshooting: </p>

<p><strong>Troubleshooting the Issues with Binding Class</strong></p>

<ul>
<li><p>Make sure you have the proper dataBinding.enabled = true in gradle and trigger &quot;Sync with Gradle&quot;</p></li>
<li><p>Open the layout file and ensure that the XML file is valid and is wrapped in a <layout> tag.</p></li>
<li><p>Check the layout file for the correct name i.e activity_main.xml maps to ActivityMainBinding.java.</p></li>
<li><p>Run File =&gt; Invalidate Caches  Restart to clear the caches.</p></li>
<li><p>Run Project =&gt; Clean and Project =&gt; Re-Build to regenerate the class file.</p></li>
<li><p>Restart Android Studio again and then try the above steps again.</p></li>
</ul>

<p>对这几条Troubleshooting依次尝试后，报错依旧，这就非常恼人，然后我又怀疑是不是build log打印的信息不全，导致跑偏了定位问题的方向，因此在project Gradle中更改了错误信息的条数:</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">allprojects {
    gradle.projectsEvaluated {
        tasks.withType(JavaCompile) {
            options.compilerArgs &lt;&lt; &quot;-Xmaxerrs&quot; &lt;&lt; &quot;4000&quot;
            options.compilerArgs &lt;&lt; &quot;-Xmaxwarns&quot; &lt;&lt; &quot;4000&quot;
        }
    }
}
</code></pre></div>
<p>在打印更多错误信息以后，仍旧看不出错误的源头在哪里。排查到这一步，可能就需要最笨的办法了，倒推法，在依次回退了可能导致这个错误的代码后，算是定位到了出错的修改， 就是Room的实体类添加了一个新的字段导致的，这就很奇怪，添加一个字段不是非常正常的操作吗？就算添加的字段不符合规范，那也应该是Room报错，关Databinding什么事，一开始真是一头雾水，但是我猜想可能是Room和Databinding这两类组件都自动生成了很多代码，在生成Room代码的时候的出错导致Databinding类生成失败，所以编译时表现为Databinding类找不到，这下问题变得清晰起来，问题的源头应该还是Room导致的，最后发现其实就是一个小的细节导致的，在给Room实体类添加字段的时候是private的，但是并没有提供getter和setter方法，因此导致编译失败，只是错误的表现误导了我的思路。白白浪费了几个小时排查这种因为违反了组件使用规范的问题，以后必须引以为戒，再次重申这个恼人的细节:</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">@Entity(tableName = &quot;messages&quot;)
public class ChatMessageEntity {

    @NonNull
    @PrimaryKey(autoGenerate = true)
    //common field
    private int id;

    @SerializedName(&quot;title&quot;)
    private String title;

    @NonNull
    public int getId() {
        return id;
    }

    public void setId(@NonNull int id) {
        this.id = id;
    }

    public String getTitle() {
        return title;
    }

    public void setTitle(String title) {
        this.title = title;
    }

    public String getText() {
        return text;
    }

    public void setText(String text) {
        this.text = text;
    }
}
</code></pre></div>
<ul>
<li><p>被注解为Entity的实体类添加字段，如果是private的必须提供getter和setter方法，或者修饰为public的</p></li>
<li><p>如果违反了这个规则，变异错误信息不一定会指向这个错误</p></li>
</ul>

	  ]]></description>
	</item>

	<item>
	  <title>记一次看似困难的Debug</title>
	  <link>//record-a-debug-process</link>
	  <author>Tao He</author>
	  <pubDate>2018-11-30T04:20:12+08:00</pubDate>
	  <guid>//record-a-debug-process</guid>
	  <description><![CDATA[
	     <p>今年把自己的手机换成了Android，拿到新机后就想找到一款手写笔记的App，因为在iOS用过一款体验很好，还用那个写了一篇游记，在试用了十几款此类的Andorid App后最终找到了一款名为INKredible的手写笔记App，刚开始用的时候很不顺手，都想卸载了，但是经过一番摸索后找到了技巧，再去试用后有一种惊艳的感觉，今天在地铁通勤的时候竟然用它谢了一篇技术博文，并已图片的形式到了出来，全文如下:(字迹潦草，读者莫怪，其实如果以正楷的形式书写, 效率较差，体验会大打折扣).</p>

<p><img src="https://www.jianguoyun.com/c/tblv2/CKKXGhIgKfHfSQRMQtKR-E0f0_ggyWsz8qZQVKSYyXPTmWZdmkQ/Bt2RU8j9dfI/l" alt=""></p>

	  ]]></description>
	</item>

	<item>
	  <title>使用VideoView实现视频开屏页</title>
	  <link>//play-video-in-raw-folder</link>
	  <author>Tao He</author>
	  <pubDate>2018-11-28T01:20:12+08:00</pubDate>
	  <guid>//play-video-in-raw-folder</guid>
	  <description><![CDATA[
	     <p>今天PM提了一个视频开屏页的需求，需要在用户第一次使用时播放一个开屏视频，乍一看，挺简单一需求，但是也或多或少碰到了一些坑，也发现了Android资源编译的一个问题，本着研发之事无小事的原则，还是要记录下踩坑经验和发现的问题。整个实现过程一共两三个小时，逐步解决了以下问题:</p>

<h4>视频全屏</h4>

<p>看到这个问题的第一反应就是把<code>VideoView</code> 的宽高设置为<code>match_parent</code>, 并且保证父容器也是<code>match_parent</code> 根布局, 但是事实没那么简单，视频播放后并没有完全全屏，在我的开发机上视频底部有一条细细的白边，很明显视频没有完全全屏。后来又想到设置<code>MediaPlayer</code>的视频缩放模式:</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">mPlayer.setVideoScalingMode(MediaPlayer.VIDEO_SCALING_MODE_SCALE_TO_FIT_WITH_CROPPING);
</code></pre></div>
<p>设置了两种模式以后都没有效果，这说明<code>VideoView</code>本身没有全屏，没有铺满整个屏幕，所以需要根据屏幕大小动态设置<code>VideoView</code>的尺寸，所以用自定义View实现。
自定义一个继承自<code>VideoView</code>的类来满足要求，具体实现如下:</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">public class FullScreenVideoView extends VideoView {
    public FullScreenVideoView(Context context) {
        super(context);
    }

    public FullScreenVideoView(Context context, AttributeSet attrs) {
        super(context, attrs);
    }

    public FullScreenVideoView(Context context, AttributeSet attrs, int defStyleAttr) {
        super(context, attrs, defStyleAttr);
    }

    @Override
    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
        int width = getDefaultSize(0, widthMeasureSpec);
        int height = getDefaultSize(0, heightMeasureSpec);
        setMeasuredDimension(width, height);
    }
}
</code></pre></div>
<p>这样比较顺利的实现了全屏，接下来需要解决第二个问题:</p>

<h4>循环播放</h4>

<p>这个比较容易，几乎就是一行代码，是对播放器的设置:</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">mBinding.vvSplash.setOnPreparedListener(new MediaPlayer.OnPreparedListener() {
    @Override
    public void onPrepared(MediaPlayer mp) {
        mPlayer = mp;
        mPlayer.setLooping(true);
        mPlayer.setVideoScalingMode(MediaPlayer.VIDEO_SCALING_MODE_SCALE_TO_FIT_WITH_CROPPING);
        mPlayer.start();

        mPlayer.setVideoScalingMode();
    }
});
</code></pre></div>
<p>第三个问题:</p>

<h4>音量切换</h4>

<p>这个问题也比较简单，主要是对播放器的操作，虽然简单但是需要注意以下几个问题:</p>

<ul>
<li>要保证操作的播放器一直是同一个</li>
<li>调用setVolume以后不需要再调用start</li>
<li>恢复音量时最好的方式是通过系统服务(AudioManager)去获取当前音量，但是这个需求只要设置为1就可以了</li>
</ul>

<p>到此，问题都逐一解决了，最后需要记录下一个Android资源编译的问题，问题如下:</p>

<blockquote>
<p>我的工程目录res/drawable下有一个图片文件名为splash.png，开屏视频的MP4文件在res/raw下，名为splash.mp4，编译工程运行后一直报错：
<code>无法播放此视频</code></p>
</blockquote>

<p>当时还以为我代码哪里写错了，检查发现没有错误，后来怀疑路径是不是错了，但断点调试也没问题，就很纳闷，后来拷贝了其它视频播放，发现是正常的，我才想到可能是资源文件名字冲突了，我给开屏视频文件重命名以后一切OK了，冲突在编译期间竟然没有报错，感觉有点坑，这样看来Android在编译资源时并没有区分res/drawable目录和res/raw目录，这个问题需要重视起来，不然会比较恼人。</p>

	  ]]></description>
	</item>

	<item>
	  <title>MultidexApplication相关的一个crash</title>
	  <link>//multidex-application-crash</link>
	  <author>Tao He</author>
	  <pubDate>2018-11-26T04:20:12+08:00</pubDate>
	  <guid>//multidex-application-crash</guid>
	  <description><![CDATA[
	     <p>最近在内测的一个App在内测开始后有用户反馈启动就crash的问题，后来拿到用户的信息后发现几个crash的机器都是4.4的机器，因为现在真实用户使用4.4系统的用户真的是不多了，就没怎么在意，但是在阿里云移动测试平台进行兼容性测试的时候，这个问题必现，并且都出现在4.4的机器上，查看兼容性测试报告，都是同一个crash，崩溃的堆栈记录了下来:</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">FATAL EXCEPTION: main Process: com.ross.android, PID: 9282 java.lang.RuntimeException: Unable to get provider com.readystatesoftware.chuck.internal.data.ChuckContentProvider: 
java.lang.ClassNotFoundException: Didn&#39;t find class &quot;com.readystatesoftware.chuck.internal.data.ChuckContentProvider&quot; on path: DexPathList[[zip file &quot;/data/app/com.ross.android-1.apk&quot;],nativeLibraryDirectories=[/data/app-lib/com.ross.android-1, /vendor/lib, /system/lib]] 
at android.app.ActivityThread.installProvider(ActivityThread.java:5060) 
at android.app.ActivityThread.installContentProviders(ActivityThread.java:4631) 
at android.app.ActivityThread.handleBindApplication(ActivityThread.java:4571) 
at android.app.ActivityThread.access$1500(ActivityThread.java:155) 
at android.app.ActivityThread$H.handleMessage(ActivityThread.java:1406) 
at android.os.Handler.dispatchMessage(Handler.java:110) 
at android.os.Looper.loop(Looper.java:193)
at android.app.ActivityThread.main(ActivityThread.java:5341) 
at java.lang.reflect.Method.invokeNative(Native Method) 
at java.lang.reflect.Method.invoke(Method.java:515) 
at com.android.internal.os.ZygoteInit$MethodAndArgsCaller.run(ZygoteInit.java:830) 
at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:646) 
at dalvik.system.NativeStart.main(Native Method) Caused by: java.lang.ClassNotFoundException: Didn&#39;t find class &quot;com.readystatesoftware.chuck.internal.data.ChuckContentProvider&quot; on path: DexPathList[[zip file &quot;/data/app/com.ross.android-1.apk&quot;],nativeLibraryDirectories=[/data/app-lib/com.ross.android-1, /vendor/lib, /system/lib]] at dalvik.system.BaseDexClassLoader.findClass(BaseDexClassLoader.java:56) 
at java.lang.ClassLoader.loadClass(ClassLoader.java:497) 
at java.lang.ClassLoader.loadClass(ClassLoader.java:457)
at android.app.ActivityThread.installProvider(ActivityThread.java:5045) 
at android.app.ActivityThread.installContentProviders(ActivityThread.java:4631)
at android.app.ActivityThread.handleBindApplication(ActivityThread.java:4571) 
at android.app.ActivityThread.access$1500(ActivityThread.java:155) 
at android.app.ActivityThread$H.handleMessage(ActivityThread.java:1406) 
at android.os.Handler.dispatchMessage(Handler.java:110) 
at android.os.Looper.loop(Looper.java:193) 
at android.app.ActivityThread.main(ActivityThread.java:5341) 
at java.lang.reflect.Method.invokeNative(Native Method) at java.lang.reflect.Method.invoke(Method.java:515)
at com.android.internal.os.ZygoteInit$MethodAndArgsCaller.run(ZygoteInit.java:830) 
at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:646) 
at dalvik.system.NativeStart.main(Native Method)
</code></pre></div>
<p>看到这个崩溃的记录后，赶紧去查看到了build.gradle中multiDexEnabled选项，果然是true，处于打开状态，然后看了本App的Application竟然并没有继承自<code>MultiDexApplication</code>，在<code>Application</code>的onCreate的方法中也没有调用<code>MultiDex.install(this)</code>, 这也就难怪在4.4中出现这个崩溃了，因为貌似这个崩溃只出现在 api&lt;21 的情况下, 因为我平时的开发机都是8.0的系统，所以这个问题一直没有暴露出来, 直到将这个App安装在用户的机器上，崩溃出现了，这个问题解决起来其实很简单，要么将本App的Application继承自<code>MultiDexApplication</code>, 要么在Application中的onCreate中调用<code>MultiDex.install(this)</code>。就是这么简单,那这么简单的一个问题为什么要专写一篇来记录呢？其实也是因为这次这个内测阶段的crash的问题很典型，它就是在开发工程中被忽略，或者现有环境没有覆盖到，导致崩溃出现在了用户的机器上，其实这类问题是可以在发布版本前就能避免的，算是一次很好的教训。 解决方案再明确下:</p>

<ul>
<li>方法一 </li>
</ul>
<div class="highlight"><pre><code class="language-text" data-lang="text">TestApplcation extends MultiDexApplication {


}
</code></pre></div>
<ul>
<li>方法二</li>
</ul>
<div class="highlight"><pre><code class="language-text" data-lang="text">TestApplcation extends Application {

    @Override
    public void onCreate() {
        super.onCreate();

        MultiDex.install(this);
    }

}
</code></pre></div>
	  ]]></description>
	</item>

	<item>
	  <title>读《1984》</title>
	  <link>//reading-1984</link>
	  <author>Tao He</author>
	  <pubDate>2018-07-16T02:20:12+08:00</pubDate>
	  <guid>//reading-1984</guid>
	  <description><![CDATA[
	     <p>1984应该是我读的第一本英文原版小说，我其实不太喜欢看小说，汉语的我也很少看，但竟然每天在地铁上看，一个月下来竟然看完了，期间总会遇到生词，看不懂的长句，但竟然读出了惊叹，大有拍案叫绝的冲动，感受得到人物的绝望，恐惧，第一次，读着非母语写成的文字，生出了喟叹，感动。这些英文单词变得不那么疏离，它所描绘的情景人物变得栩栩如生，人物的落寞与心死都可透出纸面，感染到我。也许好的文字无论用什么语言表达都能直直抵人心吧！</p>

<p>有一些段落我在读的过程中记录了下来，现摘录如下：</p>

<p>BIG BROTHER IS WATCHING YOU</p>

<p>The telescreen received and transmitted simultaneously. Any sound that Winston made, above the level of a very low whisper, would be picked up by it, moreover, so long as he remained within the field of vision which the metal plaque commanded, he could be seen as well as heard. There was of course no way of knowing whether you were being watched at any given moment. How often, or on what system, the Thought Police plugged in on any individual wire was guesswork. It was even conceivable that they watched everybody all the time. But at any rate they could plug in your wire whenever they wanted to. You had to live—did live, from habit that became instinct—in the assumption that every sound you made was overheard, and, except in darkness, every movement scrutinized.</p>

<p>WAR IS PEACE
FREEDOM IS SLAVERY 
IGNORANCE IS STRENGTH</p>

<p>This was not illegal ( nothing was illegal, since there were no longer any laws), but if detected it was reasonably certain that it would be punished by death, or at least by twenty-five years in a forced-labor camp.</p>

<p>The horrible thing about the Two Minutes Hate was not that one was obliged to act a part, but, on the contrary,that it was impossible to avoid joining in. Within thirty seconds any pretence was always unnecessary. A hideous ecstasy of fear and vindictiveness, a desire to kill, to torture, to smash faces in with a sledge-hammer, seemed to flow through the whole group of people like an electric current, turning one even against one&#39;s will into a grimacing, screaming lunatic. And yet the rage that one felt was an abstract, undirected emotion which could be switched from one object to another like the flame of a blow lamp. </p>

<p>Nearly all children nowadays were horrible.What was worst of all was that by means of such organizations as the Spies they were systematically turned into ungovernable little savages, and yet this produced in them no tendency whatever to rebel against the discipline of the Party. On the contrary, they adored the Party and everything connected with it. The songs, the processions, the banners, the hiking, the drilling with dummy rifles, the yelling of slogans, the worship of Big Brother--it was all a sort of glorious game to them. All their ferocity was turned outwards, against the enemies of the State, against foreigners, traitors, saboteurs, thought-criminals. It was almost normal for people over thirty to be frightened of their own children. And with good reason, for hardly a week passed in which The Times did not carry a paragraph describing how some eavesdropping little sneak -- &quot;child hero&quot; was the phrase generally used — had overheardsome compromising remark and denounced its parents to the Thought Police.</p>

<p>Years ago — how long was it? Seven years it must be — he had dreamed that he was walking through a pitch-dark room. And someone sitting to one side of him had said as he passed: &quot;We shall meet in the place where there is no darkness.&quot; It was said very quietly, almost casually — a statement, not a command. He had walked on without pausing. What was curious was that at the time, in the dream, the words had not made much impression on him. It was only later and by degrees that they had seemed to take on significance. He could not now remember whether it was before or after having the dream that he had seen O&#39;Brien for the first time, nor could he remember when he had first identified the voice as O&#39;Brien&#39;s. But at any rate the identification existed. It was O&#39;Brien who had spoken to him out of the dark.
Winston had never been able to feel sure — even after this morning&#39;s flash of the eyes it was still impossible to be sure whether O&#39;Brien was a friend or an enemy. Nor did it even seem to matter greatly. There was a link of understanding between them, more important than affection or partisanship.&quot;We shall meet in the place where there is no darkness,&quot; he had said. Winston did not know what it meant, only that in some way or another it would come true.</p>

<p>It was always at night. The arrests invariably happened at night. The sudden jerk out of sleep, the rough hand shaking your shoulder, the lights glaring in your eyes, the ring of hard faces round the bed. In the vast majority of cases there was no trial, no report of the arrest. People simply disappeared, always during the night. Your name was removed from the registers, every record of everything you had ever done was wiped out, your one-time existence was denied and then forgotten. You were abolished, annihilated: vaporized was the usual word. </p>

<p>Thoughtcrime does not entail death: thoughtcrime IS death. </p>

<p>Tragedy,he perceived,belonged to the ancient time,to a time when there were still privacy,love and friendship,and when the members of a family stood by one another without needing to know the reason.</p>

<p>Who controls the past controls the future, who controls the present controls the past.</p>

<p>“Don&#39;t you see that the whole aim of Newspeak is to narrow the range of thought?In the end we shall make thought-crime literally impossible, beacuse there will be no words in which to express it. Every concept that can ever be needed will be expressed by exactly one word, with its meaning rigidly defined and all its subsidiary meanings rubbed out and forgotten. Already,in the Eleventh Edition, we&#39;re not far from that point. But the process will still be continuing long after you and I are dead. Every year fewer and fewer words,and the range of consciousness always alittle smaller. Even now, of course there&#39;s no reason or excuse for committing thought-crime. It&#39;s merely a question of self-discipline, reality-control. But in the end there won&#39;t be any need even for that. The Revolution will be complete when the language is perfect. Nespeak is Ingsoc and Ingsoc is Newspeak,” he added with a sort of mystical satisfaction. &quot;Has it ever occurred to you, Winston, that by the year2050, at the very latest, not a single human being will be alive who could understant such a conversation as we are having now?&quot;</p>

<p>In some ways she was far more acute than Winston, and far less susceptible to Party propaganda. Once when he happened in some connexion to mention the war against Eurasia, she startled him by saying casually that in her opinion the war was not happening. The rocket bombs which fell daily on London were probably fired by the Government of Oceania itself, “just to keep people frightened”. </p>

<p>&#39;You&#39;re only a rebel from the waist downwards,&#39; he told her.</p>

<p>Throughout recorded time, and probably since the end of the Neolithic Age, there have been three kinds of people in the world, the High, the Middle, and the Low. They have been subdivided in many ways, they have borne countless different names, and their relative numbers, as well as their attitude towards one another, have varied from age to age: but the essential structure of society has never altered. Even after enormous upheavals and seemingly irrevocable changes, the same pattern has always reasserted itself, just as a gyroscope will always return to equilibrium, however far it is pushed one way or the other.</p>

<p>In one combination or another, these three super-states are permanently at war, and have been so for the past twenty-five years. War, however, is no longer the desperate, annihilating struggle that it was in the early decades of the twentieth century. It is a warfare of limited aims between combatants who are unable to destroy one another, have no material cause for fighting and are not divided by any genuine ideological difference This is not to say that either the conduct of war, or the prevailing attitude towards it, has become less bloodthirsty or more chivalrous. On the contrary, war hysteria is continuous and universal in all countries, and such acts as raping, looting, the slaughter of children, the reduction of whole populations to slavery, and reprisals against prisoners which extend even to boiling and burying alive, are looked upon as normal, and, when they are committed by one&#39;s own side and not by the enemy, meritorious. But in a physical sense war involves very small numbers of people, mostly highly-trained specialists, and causes comparatively few casualties. The fighting, when there is any, takes place on the vague frontiers whose whereabouts the average man can only guess at, or round the Floating Fortresses which guard strategic spots on the sea lanes. In the centres of civilization war means no more than a continuous shortage of consumption goods, and the occasional crash of a rocket bomb which may cause a few scores of deaths. War has in fact changed its character. </p>

<p>The war, therefore, if we judge it by the standards of previous wars, is merely an imposture. It is like the battles between certain ruminant animals whose horns are set at such an angle that they are incapable of hurting one another. But though it is unreal it is not meaningless. It eats up the surplus of consumable goods, and it helps to preserve the special mental atmosphere that a hierarchical society needs. War, it will be seen, is now a purely internal affair. In the past, the ruling groups of all countries, although they might recognize their common interest and therefore limit the destructiveness of war, did fight against one another, and the victor always plundered the vanquished. In our own day they are not fighting against one another at all. The war is waged by each ruling group against its own subjects, and the object of the war is not to make or prevent conquests of territory, but to keep the structure of society intact. The very word &#39;war&#39;, therefore, has become misleading. It would probably be accurate to say that by becoming continuous war has ceased to exist. The peculiar pressure that it exerted on human beings between the Neolithic Age and the early twentieth century has disappeared and been replaced by something quite different. The effect would be much the same if the three super-states, instead of fighting one another, should agree to live in perpetual peace, each inviolate within its own boundaries. For in that case each would still be a self-contained universe, freed for ever from the sobering influence of external danger. A peace that was truly permanent would be the same as a permanent war. This -- although the vast majority of Party members understand it only in a shallower sense -- is the inner meaning of the Party slogan: War is Peace</p>

<p>Between life and death, and between physical pleasure and physical pain, there is still a distinction, but that is all. Cut off from contact with the outer world, and with the past, the citizen of Oceania is like a man in interstellar space, who has no way of knowing which direction is up and which is down. The rulers of such a state are absolute, as the Pharaohs or the Caesars could not be. They are obliged to prevent their followers from starving to death in numbers large enough to be inconvenient, and they are obliged to remain at the same low level of military technique as their rivals; but once that minimum is achieved, they can twist reality into whatever shape they choose.</p>

<p>War, it will be seen, is now a purely internal affair. In the past, the ruling groups of all countries, although they might recognize their common interest and therefore limit the destructiveness of war, did fight against one another, and the victor always plundered the vanquished. In our own day they are not fighting against one another at all. The war is waged by each ruling group against its own subjects, and the object of the war is not to make</p>

<p>The aims of these three groups are entirely irreconcilable. The aim of the High is to remain where they are. The aim of the Middle is to change places with the High. The aim of the Low, when they have an aim — for it is an abiding characteristic of the Low that they are too much crushed by drudgery to be more than intermittently conscious of anything outside their daily lives —is to abolish all distinctions and create a society in which all men shall be equal. Thus throughout history a struggle which is the same in its main outlines recurs over and over again. For long periods the High seem to be securely in power, but sooner or later there always comes a moment when they lose either their belief in themselves or their capacity to govern efficiently, or both. They are then overthrown by the Middle, who enlist the Low on their side by pretending to them that they are fighting for liberty and justice. As soon as they have reached their objective, the Middle thrust the Low back into their old position of servitude, and themselves become the High. Presently a new Middle group splits off from one of the other groups, or from both of them, and the struggle begins over again. Of the three groups, only the Low are never even temporarily successful in achieving their aims. It would be an exaggeration to say that throughout history there has been no progress of a material kind. Even today, in a period of decline, the average human being is physically better off than he was a few centuries ago. But no advance in wealth, no softening of manners,no reform or revolution has ever brought human equality a millimetre nearer. From the point of view of the Low, no historic change has ever meant much more than a change in the name of their masters.</p>

<p>Part of the reason for this was that in the past no government had the power to keep its citizens under constant surveillance. The invention of print, however, made it easier to manipulate public opinion, and the film and the radio carried the process further. With the development of television, and the technical advance which made it possible to receive and transmit simultaneously on the same instrument, private life came to an end. Every citizen, or at least every citizen important enough to be worth watching, could be kept for twentyfour hours a day under the eyes of the police and in the sound of official propaganda, with all other channels of communication closed. The possibility of enforcing not only complete obedience to the will of the State, but complete uniformity of opinion on all subjects, now existed for the first time.</p>

<p>It had long been realized that the only secure basis for oligarchy is collectivism. Wealth and privilege are most easily defended when they are possessed jointly. The so-called &quot;abolition of private property&quot; which took place in the middle years of the century meant, in effect, the concentration of property in far fewer hands than before: but with this difference, that the new owners were a group instead of a mass of individuals. Individually, no member of the Party owns anything, except petty personal belongings. Collectively, the Partyowns everything in Oceania, because it controls everything, and disposes of the products as it thinks fit.</p>

<p>&quot; When you make love you&#39;re using up energy; and afterwards you feel happy and don&#39;t give a damn for anything. They can&#39;t bear you to feel like that. They want you to be bursting with energy all the time. All this marching up and down and cheering and waving flags is simply sex gone sour.&quot; ... There was a direct, intimate connection between chastity and political orthodoxy. 
...The family could not actually be abolished, and, indeed, people were encouraged to be fond of their children in an almost the old-fashioned way. The children, on the other hand, were systematically turned against their parents and taught to spy on them and report their deviations...It was a device by means of which everyone could be surrounded night and day by informers who knew him intimately.</p>

<p>He had won the victory over himself. He loved Big Brother.</p>

	  ]]></description>
	</item>

	<item>
	  <title>Activity vs FragmentActivity vs AppCompatActivity</title>
	  <link>//different-activity-in-android</link>
	  <author>Tao He</author>
	  <pubDate>2018-02-19T02:20:12+08:00</pubDate>
	  <guid>//different-activity-in-android</guid>
	  <description><![CDATA[
	     <p>Activity应该是每一个Android开发者第一个遇到的类吧，后来又看到了FragmentActivity，再后来又碰到了AppCompatActivity和ActionBarActivity，也许我们在开发者中会在不同的场景中使用以上不同的Activity类，但是要让我们清楚的说出它们的联系和区别，可能都会被这个问题懵一下，现在我们就来把他们的关系理清楚.</p>

<p>这几个类有一个基本的继承关系</p>
<div class="highlight"><pre><code class="language-java" data-lang="java"><span class="n">Activity</span> <span class="o">&lt;-</span> <span class="n">FragmentActivity</span> <span class="o">&lt;-</span> <span class="n">AppCompatActivity</span> <span class="o">&lt;-</span> <span class="n">ActionBarActivity</span>
</code></pre></div>
<p>需要注意的是<code>ActionBarActivity</code>已经废弃了. 从上面的这个继承关系也大概可以了解这几个类的基本关系，<code>Activity</code> 是以上这各类的基类，所有的<code>Activity</code>子类都直接或间接的继承自<code>Activity</code>类.</p>

<p><code>FragmentActivity</code> 是在support-v4和support-v13库中用来向后兼容<code>Fragment</code>的.<code>AppCompatActivity</code> 是在appcompat-v7库, 原则上它提供了对action bar的向后兼容. 在考虑什么场景具体使用哪个类时可以参考一下三个原则:</p>

<ul>
<li><p>如果你想向后兼容Material Design的外观，继承<code>AppCompatActivity</code>.</p></li>
<li><p>如果不考虑Material Design，但是你想使用嵌套的<code>Fragment</code>, 继承<code>FragmentActivity</code>.</p></li>
<li><p>如果没有以上需求，则继承<code>Activity</code>.</p></li>
</ul>

<p>因为<code>AppCompatActivity</code> 继承自<code>FragmentActivity</code> ,如果你需要<code>FragmentActivity</code>的特性，原则上都可以使用<code>AppCompatActivity</code>.</p>

	  ]]></description>
	</item>

	<item>
	  <title>处理Gradle plugin版本问题小记</title>
	  <link>//do-with-gradle-error</link>
	  <author>Tao He</author>
	  <pubDate>2018-02-15T02:20:12+08:00</pubDate>
	  <guid>//do-with-gradle-error</guid>
	  <description><![CDATA[
	     <p>在编译Github上一些Android项目的时候, Gradle sync 总会抛出这样的一个提示:</p>

<blockquote>
<p>Configuration on demand is not supported by the current version of the Android Gradle plugin since you are using Gradle version 4.6 or above. Suggestion: disable configuration on demand by setting org.gradle.configureondemand=false in your gradle.properties file or use a Gradle version less than 4.6.</p>
</blockquote>

<p>导致编译不能进行下去, 即使你将<code>org.gradle.configureondemand=false</code>设置了,  或者使用低版本的Gradle, 这个问题依旧存在.确实很恼人.但是问题终究要解决, 最后在网上找到了解决办法: <strong>并不需要降级Gradle</strong>, 两步解决:</p>

<ol>
<li><p>从gradle.properties 删除 org.gradle.configureondemand.</p></li>
<li><p>在 Android Studio中,
如果是 Mac, <code>Preferences &gt; Build, Execution, Deployment &gt; Compiler</code> 去掉 the configure on demand 选中.
如果是 Linux/Windows  <code>File &gt; Settings &gt; Build, Execution, Deployment &gt; Compiler</code> and uncheck the configure on demand.</p></li>
</ol>

	  ]]></description>
	</item>

	<item>
	  <title>Android开发中标签指示器的选用</title>
	  <link>//pager-tab-selection</link>
	  <author>Tao He</author>
	  <pubDate>2018-02-13T02:20:12+08:00</pubDate>
	  <guid>//pager-tab-selection</guid>
	  <description><![CDATA[
	     <p>在Android实际的开发过程中,几乎都会用到标签指示器和ViewPager的联动使用,ViewPager,毫无疑问就直接选用系统提供的, 但是和它联动的标签指示器就有非常多的选择, 我在开发的过程中使用了两个比较常见的实现,也是Github上star较多的两个项目.</p>

<h3>PagerSlidingTabTrip</h3>

<p>基本使用:</p>

<ul>
<li>添加依赖</li>
</ul>
<div class="highlight"><pre><code class="language-text" data-lang="text">implementation &#39;com.astuetz:pagerslidingtabstrip:1.0.1&#39;
</code></pre></div>
<ul>
<li>在布局文件中添加<code>PagerSlidingTabTrip</code></li>
</ul>
<div class="highlight"><pre><code class="language-xml" data-lang="xml"><span class="nt">&lt;com.astuetz.PagerSlidingTabStrip</span>
        <span class="na">android:id=</span><span class="s">&quot;@+id/tabs&quot;</span>
        <span class="na">android:layout_width=</span><span class="s">&quot;match_parent&quot;</span>
        <span class="na">android:layout_height=</span><span class="s">&quot;48dip&quot;</span>
        <span class="na">android:layout_gravity=</span><span class="s">&quot;center_horizontal&quot;</span>
        <span class="na">android:background=</span><span class="s">&quot;@color/tabsBackgroundColor&quot;</span>
        <span class="na">android:textColor=</span><span class="s">&quot;@color/tabsTextColor&quot;</span>
        <span class="na">app:pstsIndicatorColor=</span><span class="s">&quot;@color/tabsIndicatorColor&quot;</span><span class="nt">/&gt;</span>
</code></pre></div>
<p>在布局文件中设置<code>app:pstsShouldExpand=&quot;true&quot;</code>会导致崩溃,原因是无法inflate,这个问题没有细究</p>

<ul>
<li>初始化设置</li>
</ul>
<div class="highlight"><pre><code class="language-text" data-lang="text">tabs = contentView.findViewById(R.id.tabs);
tabs.setShouldExpand(true);  //在这里设置就没有问题
tabs.setIndicatorColorResource(R.color.fp_room_music_tab_indicator);
tabs.setIndicatorHeight((int)resources.getDimension(R.dimen.room_music_tab_indicator_height));
tabs.setAllCaps(false);
tabs.setTextSize((int)resources.getDimension(R.dimen.room_music_tab_text));
</code></pre></div>
<p>这个使用起来非常方便,但是有一两个问题:</p>

<ul>
<li><p>指示器未选中项和选中项文字的颜色不能设置,这个不符合项目的要求</p></li>
<li><p>在布局文件中设置有些属性的时候不生效, 设置有些属性会导致崩溃(崩溃原因不确定)</p></li>
</ul>

<p>因为上面的两个问题, 我最后在项目中选用了MagicIndicator</p>

<h3>MagicIndicator</h3>

<p>MagicIndicator可以设置选中和未选中项文字的颜色,并且有些属性的设置相对灵活</p>

<p>基本使用:</p>

<ul>
<li>添加依赖</li>
</ul>
<div class="highlight"><pre><code class="language-text" data-lang="text">implementation &#39;com.github.hackware1993:MagicIndicator:1.5.0&#39;
</code></pre></div>
<ul>
<li>在布局文件中添加</li>
</ul>
<div class="highlight"><pre><code class="language-text" data-lang="text">&lt;net.lucode.hackware.magicindicator.MagicIndicator
            android:id=&quot;@+id/magic_indicator&quot;
            android:layout_width=&quot;match_parent&quot;
            android:layout_height=&quot;40dp&quot;
            android:layout_below=&quot;@id/title&quot;
            android:layout_marginTop=&quot;14dp&quot;
            /&gt;
</code></pre></div>
<ul>
<li>初始化</li>
</ul>
<div class="highlight"><pre><code class="language-text" data-lang="text">magicIndicator = contentView.findViewById(R.id.magic_indicator);
commonNavigator = new CommonNavigator(context);
</code></pre></div>
<ul>
<li>数据绑定和属性动态设置</li>
</ul>
<div class="highlight"><pre><code class="language-text" data-lang="text">commonNavigator.setAdapter(new CommonNavigatorAdapter() {

          @Override
          public int getCount() {
              return mc == null ? 0 : mc.size();
          }

          @Override
          public IPagerTitleView getTitleView(Context context, final int index) {

              ColorTransitionPagerTitleView colorTransitionPagerTitleView = new ColorTransitionPagerTitleView(context);
              colorTransitionPagerTitleView.setNormalColor(resources.getColor(R.color.fp_room_music_tab_text));
              colorTransitionPagerTitleView.setSelectedColor(resources.getColor(R.color.fp_purple_1st));
              colorTransitionPagerTitleView.setText(mc.get(index).categoryName);
              colorTransitionPagerTitleView.setOnClickListener(new View.OnClickListener() {
                  @Override
                  public void onClick(View view) {
                      pager.setCurrentItem(index);
                  }
              });
              return colorTransitionPagerTitleView;
          }

          @Override
          public IPagerIndicator getIndicator(Context context) {
              LinePagerIndicator indicator = new LinePagerIndicator(context);
              indicator.setMode(LinePagerIndicator.MODE_MATCH_EDGE);
              indicator.setColors(resources.getColor(R.color.fp_purple_1st));
              return indicator;
          }
      });
      commonNavigator.setAdjustMode(true);
      magicIndicator.setNavigator(commonNavigator);

      // pager is a ViewPager
      ViewPagerHelper.bind(magicIndicator, pager);
</code></pre></div>
<p>其中的pager变量是一个ViewPager</p>

<p>MagicIndicator基本满足项目的全部要求,使用的过程中也没有发现什么问题.除了这两个,其他第三方的实现也非常多, 系统提供的TabLayout也同样能实现类似的功能,这里就不一一列举了.</p>

	  ]]></description>
	</item>

	<item>
	  <title>为什么要避免使用Fragment的默认构造函数</title>
	  <link>//avoid-default-constructor-in-fragment</link>
	  <author>Tao He</author>
	  <pubDate>2018-02-07T03:25:12+08:00</pubDate>
	  <guid>//avoid-default-constructor-in-fragment</guid>
	  <description><![CDATA[
	     <p>今天在项目中需要用到Fragment, 但是在代码写完后碰到了这样一个警告:</p>

<blockquote>
<p>Avoid non-default constructors in fragments: use a default constructor plus Fragment#setArguments(Bundle) instead</p>
</blockquote>

<p>后来发现是因为自己使用了Fragment的非默认构造函数, 在构造函数里传递了参数, Fragment之前也用了很多次, 可能都忽略了这个警告, 因此并没有发现这个问题, 这次既然遇到了就想一探究竟, 看看到底是为什么. 查看了网上可找到的相关的信息后, 终于明白其中原由, 避免使用默认构造函数的原因如下:</p>

<ul>
<li><p>系统在重新创建Fragment的时候调用的是默认构造函数.</p></li>
<li><p>系统在恢复Fragment的时候会自动恢复你通过<code>setArguments(Bundle bundle)</code> 传递的<code>bundle</code>, 你可以在<code>onCreate</code>, <code>onCreateView</code>中读取恢复的<code>bundle</code>中的值,这种方式可以保证正确的恢复你最开始传递的bundle. </p></li>
</ul>

<p>因为这是一个警告, 不是错误，所以你也可以使用非默认构造函数，但是你得确保在非默认构造函数中初始化<code>bundle</code>中的参数,并在<code>onCreate</code>, <code>onCreateView</code>读取.</p>

<p>当然了，创建一个Fragment,并且传递参数的推荐方式是这样的:</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">public static MyFragment newInstance(int someInt) {
    MyFragment myFragment = new MyFragment();

    Bundle args = new Bundle();
    args.putInt(&quot;someInt&quot;, someInt);
    myFragment.setArguments(args);

    return myFragment;
}
</code></pre></div>
	  ]]></description>
	</item>

	<item>
	  <title>多样式 TextView 小记</title>
	  <link>//different-portion-different-appearance-in-same-textview</link>
	  <author>Tao He</author>
	  <pubDate>2018-02-03T03:25:12+08:00</pubDate>
	  <guid>//different-portion-different-appearance-in-same-textview</guid>
	  <description><![CDATA[
	     <p>所谓多样式 <code>TextView</code>, 就是在同一个 <code>TextView</code>中不同部分的text展示不同的颜色,字体大小,字体,字体Style,这种需求其实在很多App中都存在, 能够直接的给每一部分Text赋予不同的外观, 既可以在布局中少添加几个<code>TextView</code>, 也可以使以后需求变动后能够灵活的做出改动, 我在实际的开发中也经常碰到这种需求,很多次都是临时Google下, 实现了以后也就作罢了, 等后面又遇到的时候,貌似又记得不太清楚了, 又需要去查, 很没有效率, 所以写下这篇小记.</p>

<p>要想给TextView的不同部分设置不同的属性,通常有两种做法:</p>

<h4>使用SpannableString</h4>

<p>这种方法需要用到<code>Spannable</code>借口, 一般做法如下:</p>
<div class="highlight"><pre><code class="language-java" data-lang="java"><span class="n">String</span> <span class="n">text</span> <span class="o">=</span> <span class="s">&quot;Hello World&quot;</span><span class="o">;</span>
<span class="n">TextView</span> <span class="n">tvTitle</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">TextView</span><span class="o">(</span><span class="n">context</span><span class="o">);</span>

<span class="n">Spannable</span> <span class="n">spannable</span> <span class="o">=</span> <span class="n">SpannableString</span><span class="o">(</span><span class="n">text</span><span class="o">);</span>

<span class="c1">// set different text color</span>
<span class="n">spannable</span><span class="o">.</span><span class="na">setSpan</span><span class="o">(</span><span class="k">new</span> <span class="nf">ForegroundColorSpan</span><span class="o">(</span><span class="n">context</span><span class="o">.</span><span class="na">getResouces</span><span class="o">().</span><span class="na">getColor</span><span class="o">(</span><span class="n">android</span><span class="o">.</span><span class="na">R</span><span class="o">.</span><span class="na">color</span><span class="o">.</span><span class="na">black</span><span class="o">)),</span> <span class="mi">0</span><span class="o">,</span> <span class="mi">5</span><span class="o">,</span> <span class="n">Spannable</span><span class="o">.</span><span class="na">SPAN_EXCLUSIVE_EXCLUSIVE</span><span class="o">);</span>
<span class="n">spannable</span><span class="o">.</span><span class="na">setSpan</span><span class="o">(</span><span class="k">new</span> <span class="nf">ForegroundColorSpan</span><span class="o">(</span><span class="n">context</span><span class="o">.</span><span class="na">getResouces</span><span class="o">().</span><span class="na">getColor</span><span class="o">(</span><span class="n">android</span><span class="o">.</span><span class="na">R</span><span class="o">.</span><span class="na">color</span><span class="o">.</span><span class="na">white</span><span class="o">)),</span> <span class="mi">5</span><span class="o">,</span> <span class="n">text</span><span class="o">.</span><span class="na">length</span><span class="o">(),</span> <span class="n">Spannable</span><span class="o">.</span><span class="na">SPAN_EXCLUSIVE_EXCLUSIVE</span><span class="o">);</span>

<span class="c1">// set different background color</span>
<span class="n">spannable</span><span class="o">.</span><span class="na">setSpan</span><span class="o">(</span><span class="k">new</span> <span class="nf">BackgroundColorSpan</span><span class="o">(</span><span class="n">android</span><span class="o">.</span><span class="na">R</span><span class="o">.</span><span class="na">color</span><span class="o">.</span><span class="na">black</span><span class="o">),</span> <span class="mi">0</span><span class="o">,</span> <span class="mi">5</span><span class="o">,</span> <span class="n">Spannable</span><span class="o">.</span><span class="na">SPAN_EXCLUSIVE_EXCLUSIVE</span><span class="o">);</span>

<span class="c1">// set different text size</span>
<span class="kt">int</span> <span class="n">largeSize</span> <span class="o">=</span> <span class="n">getResources</span><span class="o">().</span><span class="na">getDimensionPixelSize</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">dimen</span><span class="o">.</span><span class="na">larage</span><span class="o">);</span>
<span class="kt">int</span> <span class="n">smallSize</span> <span class="o">=</span> <span class="n">getResources</span><span class="o">().</span><span class="na">getDimensionPixelSize</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">dimen</span><span class="o">.</span><span class="na">small</span><span class="o">);</span>
<span class="n">spannable</span><span class="o">.</span><span class="na">setSpan</span><span class="o">(</span><span class="k">new</span> <span class="nf">AbsoluteSizeSpan</span><span class="o">(</span><span class="n">largeSize</span><span class="o">),</span> <span class="mi">0</span><span class="o">,</span> <span class="mi">5</span><span class="o">,</span> <span class="n">Spannable</span><span class="o">.</span><span class="na">SPAN_EXCLUSIVE_EXCLUSIVE</span><span class="o">);</span>
<span class="n">spannable</span><span class="o">.</span><span class="na">setSpan</span><span class="o">(</span><span class="k">new</span> <span class="nf">AbsoluteSizeSpan</span><span class="o">(</span><span class="n">smallSize</span><span class="o">),</span> <span class="mi">5</span><span class="o">,</span> <span class="n">text</span><span class="o">.</span><span class="na">length</span><span class="o">(),</span> <span class="n">Spannable</span><span class="o">.</span><span class="na">SPAN_EXCLUSIVE_EXCLUSIVE</span><span class="o">);</span>

<span class="c1">// set relative size </span>
<span class="n">spannable</span><span class="o">.</span><span class="na">setSpan</span><span class="o">(</span><span class="k">new</span> <span class="nf">RelativeSizeSpan</span><span class="o">(</span><span class="mi">2</span><span class="n">f</span><span class="o">),</span> <span class="mi">0</span><span class="o">,</span> <span class="mi">5</span><span class="o">,</span> <span class="n">Spannable</span><span class="o">.</span><span class="na">SPAN_EXCLUSIVE_EXCLUSIVE</span><span class="o">);</span>

<span class="c1">// set different font style</span>
<span class="n">spannable</span><span class="o">.</span><span class="na">setSpan</span><span class="o">(</span><span class="k">new</span> <span class="nf">StyleSpan</span><span class="o">(</span><span class="n">android</span><span class="o">.</span><span class="na">graphics</span><span class="o">.</span><span class="na">Typeface</span><span class="o">.</span><span class="na">ITALIC</span><span class="o">),</span> <span class="mi">0</span><span class="o">,</span> <span class="mi">5</span><span class="o">,</span> <span class="n">Spannable</span><span class="o">.</span><span class="na">SPAN_EXCLUSIVE_EXCLUSIVE</span><span class="o">);</span>
<span class="n">spannable</span><span class="o">.</span><span class="na">setSpan</span><span class="o">(</span><span class="k">new</span> <span class="nf">StyleSpan</span><span class="o">(</span><span class="n">android</span><span class="o">.</span><span class="na">graphics</span><span class="o">.</span><span class="na">Typeface</span><span class="o">.</span><span class="na">BOLD</span><span class="o">),</span> <span class="mi">5</span><span class="o">,</span> <span class="n">text</span><span class="o">.</span><span class="na">length</span><span class="o">(),</span> <span class="n">Spannable</span><span class="o">.</span><span class="na">SPAN_EXCLUSIVE_EXCLUSIVE</span><span class="o">);</span>
<span class="n">tvTitle</span><span class="o">.</span><span class="na">setText</span><span class="o">(</span><span class="n">spannable</span><span class="o">);</span>
</code></pre></div>
<p>使用<code>Spannable</code>接口还是比较灵活和已于理解的.</p>

<h4>使用Html Tags</h4>

<p><code>TextView</code>支持常见的Html tags来标记text的外观,一般做法如下：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">TextView textview = new TextView(context);
textView.setText(Html.fromHtml(&quot;&lt;b&gt;&quot; + title + &quot;&lt;/b&gt;&quot; +  &quot;&lt;br /&gt;&quot; + 
            &quot;&lt;small&gt;&quot; + description + &quot;&lt;/small&gt;&quot; + &quot;&lt;br /&gt;&quot; + 
            &quot;&lt;small&gt;&quot; + DateAdded + &quot;&lt;/small&gt;&quot;));
</code></pre></div>
<p>例如也可以在strings.xml中这样定义:</p>
<div class="highlight"><pre><code class="language-xml" data-lang="xml"><span class="nt">&lt;string</span> <span class="na">name=</span><span class="s">&quot;my_text&quot;</span><span class="nt">&gt;</span>
  <span class="cp">&lt;![CDATA[</span>
<span class="cp">    &lt;b&gt;Autor:&lt;/b&gt; Tao&lt;br/&gt;</span>
<span class="cp">    &lt;b&gt;Contact:&lt;/b&gt; myemail@gmail.com&lt;br/&gt;</span>
<span class="cp">    &lt;i&gt;Copyright © 2011-2012 &lt;/i&gt;</span>
<span class="cp">  ]]&gt;</span>
<span class="nt">&lt;/string&gt;</span> 
</code></pre></div>
<p>这样定义就比上面那种方式更好一点,可以对string资源统一管理, 当然了Html的这种方式支持很多其他的tag, 同样可以做到Spannable接口可以做到的, 这里就不一一列举了. 不过有一点需要注意, 就是在<code>setText</code>的时候要调用<code>Html.fromHtml</code>才生效. 这个主题琐碎,但对于工程师来说什么事不琐碎呢? 注意细节, 提高效率, 每次记录下一些需要反复使用到的技术点, 也是一种修行.</p>

	  ]]></description>
	</item>


</channel>
</rss>
