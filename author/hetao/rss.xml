<?xml version="1.0" encoding="UTF-8" ?>

<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
   
      <title>longlinht.github.io/</title>
   
   <link>http://longlinht.github.io/</link>
   <description>World is complex,confusing and wonderful,I will talk about machine,human and god to known it, to reveal it.</description>
   <language>en-uk</language>
   <managingEditor> Tao He</managingEditor>
   <atom:link href="rss" rel="self" type="application/rss+xml" />
   
	<item>
	  <title>政策与民意</title>
	  <link>//policy-and-people-will</link>
	  <author>Tao He</author>
	  <pubDate>2017-11-24T02:20:12+08:00</pubDate>
	  <guid>//policy-and-people-will</guid>
	  <description><![CDATA[
	     <p>政策，这个词在我们这个国家被普遍使用，几乎人人理解其含义，就连目不识丁的老农都会说出这样的话：“中央又出新政策了”，这个词我们是如此的熟悉，以至于我们常常都不会去想政策到底是什么，它是如何制定出来的？我们普通老百姓是否影响到了政策的制定？ 也许一般的理解是老百姓哪能影响到政策的制定，照老农的说法，那是中央出的政策，和我们这些小老百姓有啥关系，这么理解也没错，毕竟在我们这个国家，显然普通民众的权利实在有限，但是此处我并不想讨论政策的制定和出台，只是想探究已出台的，与民生息息相关的这些个政策，到底有没有民意的基础，民意是否影响到了政策的制定？ 要讨论这个问题，拿北京这几年的一些政策法规的例子最好不过了。</p>

<p>先说北京房子的限购，以及相关联的所谓的抑制房价过快上涨的各种政策手段，但凡有点经济学常识的人，都知道这些政策只会让房价更高，增加更多购房成本，但是这些政策还是出来了，政府有什么考虑我们不得而知，但是呼吁出台这些政策的民意绝对是存在的，这种呼声绝对不是少数，甚至有一些经济学家也在为这种政策摇旗呐喊，就无怪乎普通民众有这种诉求了。而这种大多数的诉求就成了普遍的民意基础，使这种违背基本经济学常识的政策不再是空中楼阁。房价的这个例子也许会因房价问题本来就错综复杂而变得更加说不清道不明，那可以再看一例：网约车。</p>

<p>在网约车还没有出现之前，我们的选择只有出租车和所谓的黑车，出行体验如何，只要在烈日和寒风中打过出租车的人都应该知道那是一种什么样的服务，自从有了网约车，如滴滴打车后，我们的出行体验有了巨大的改观。那种打车难的时代一去不复返了，但是好景不长，很快政策对网约车出台了一系列不友好政策，之后的打车体验明显不如之前，这种政策也明显违背市场经济规律，但是它照样堂而皇之的出台了，你以为这是出租车利益集团的反扑，但是别忘了，这背后还有很坚实的民意基础，网约车存在的一些问题总是能让很多普通民众认为监管是必须的，政府必须介入才能让他们有安全感，但其实这些问题难道出租车就不存在吗？不希冀于市场竞争，而总幻想依赖政府强力，这种普遍的认知构成了一种可怕的，无望的民意，渗透进我们生活中的方方面面。</p>

<p>这种可怕的认知，在今年年底北京出现的两件重要的事情中更是体现的淋漓尽致，也许这些政策普通民众并不能左右，但民众的普遍认知构成了民意基础，因为在大部分人的认知中并没有达成这样的共识：有些事只能交给市场，政府干预只会扰乱市场；私有财产神圣不可侵犯；贩夫走卒，不高端的人群也有公民权；这些在文明社会都普遍达成的共识并未深入人心。这些个看似荒谬的政策既是权力意志的体现，也少不了那可怕民意的影子。</p>

	  ]]></description>
	</item>

	<item>
	  <title>记一次Android系统源代码技术分享</title>
	  <link>//lecture-on-android-system-source-code</link>
	  <author>Tao He</author>
	  <pubDate>2017-11-24T02:20:12+08:00</pubDate>
	  <guid>//lecture-on-android-system-source-code</guid>
	  <description><![CDATA[
	     <p>今年年后换了工作，决定继续做Android开发，到了公司一段时间后，受架构组同学之邀，做一次技术分享，当时感觉很头疼，因为我在Android技术组，如果分享这几年C++的技术经验，显然不合时宜，也对组里的同事没有什么帮助，如果分享Android应用的开发，貌似又在班门弄斧，自己在Android方面本来就是半路出家，实在没有什么可分享的干货，正在为难之际，突然想到在之前的公司有段时间一直在阅读Android系统源代码，一直试图能更深入的了解系统的结构和原理，因此也有了一些心得，正好可以与同事分享，也对大家的开发有所帮助，所以有了这篇小记。</p>

<p>这篇小记有点类似一个ppt，其实就是那次分享我用markdown格式写的一个ppt，是一个我要讲述的一个提纲，防止我讲跑题了。</p>

<h3>如何概览？</h3>

<ul>
<li><p>要见代码 - 要了解如何通过源代码构建Android系统, 了解Android系统的一些基础设施</p></li>
<li><p>要读代码 - 通过阅读代码，理解Android系统的基本结构和特点</p></li>
</ul>

<blockquote>
<p>Reading the fucking source code</p>
</blockquote>

<h4>下载，编译和运行Android系统源代码</h4>

<h5>工程环境</h5>

<ul>
<li><p>推荐Ubuntu系统</p></li>
<li><p>Git</p></li>
<li><p>Java SDK</p></li>
<li><p>依赖包</p></li>
</ul>
<div class="highlight"><pre><code class="language-text" data-lang="text">sudo apt-get install flex bison gperf libsdl-dev libesd0-dev libwxgtk2.6-dev build-essential zip curl
</code></pre></div>
<h5>下载Android系统源代码</h5>

<ul>
<li><p>repo工具</p></li>
<li><p>参见Google官方文档</p></li>
</ul>

<h5>编译Android系统源代码</h5>

<p><strong>make it</strong></p>

<p><strong>哪有那么顺利，如果编译错误请Google错误信息，逐个解决之</strong></p>

<p><strong>编译成功后，会在out/target/product/generic/ 目录下生成多个img文件</strong></p>

<h5>运行Android模拟器</h5>

<ul>
<li><p>镜像文件 - zImage system.img userdata.img ramdisk.img</p></li>
<li><p>设置环境变量</p></li>
<li><p>运行模拟器</p></li>
</ul>
<div class="highlight"><pre><code class="language-text" data-lang="text">emulator
</code></pre></div>
<h5>下载，编译和运行Android内核源代码</h5>

<h4>JNI</h4>

<ul>
<li><p>Java call Native</p></li>
<li><p>Native call Java</p></li>
<li><p>静态注册</p>

<ul>
<li>先编写Java代码，然后编译生成.class文件</li>
<li>javah -o output packagename.classname</li>
</ul></li>
<li><p>动态注册</p></li>
</ul>

<blockquote>
<p>MediaScanner.java</p>
</blockquote>
<div class="highlight"><pre><code class="language-text" data-lang="text">private static native final void native_init()
</code></pre></div>
<blockquote>
<p>android<em>media</em>MediaScanner.cpp</p>
</blockquote>
<div class="highlight"><pre><code class="language-text" data-lang="text">static void android_media_MediaScanner_native_init(JNIEnv *env)

static JNINativeMethod gMethods[]
</code></pre></div>
<h4>天字号进程 - init</h4>

<ul>
<li><p>Linux系统中用户空间的第一个进程</p></li>
<li><p>创建zygote</p></li>
<li><p>属性服务</p></li>
</ul>

<blockquote>
<p>init.c</p>
</blockquote>
<div class="highlight"><pre><code class="language-text" data-lang="text">int main(int argc, char **argv)

void service_start(struct service *svc, const char *dynamic_args)
</code></pre></div>
<blockquote>
<p>parser.c</p>
</blockquote>
<div class="highlight"><pre><code class="language-text" data-lang="text">int parse_config_file(const char *fn)
</code></pre></div>
<blockquote>
<p>keywords.h</p>

<p>init.rc</p>

<p>builtins.c</p>
</blockquote>
<div class="highlight"><pre><code class="language-text" data-lang="text">int do_class_start(int nargs, char **args)
</code></pre></div>
<blockquote>
<p>property_service.c</p>
</blockquote>
<div class="highlight"><pre><code class="language-text" data-lang="text">void property_init(void)
</code></pre></div>
<blockquote>
<p>libc<em>init</em>dynamic.c</p>

<p>system_properties.c</p>

<p>properties.c</p>
</blockquote>

<h4>Java世界的盘古 - Zygote</h4>

<ul>
<li><p>zygote - app_process</p></li>
<li><p>apk程序，其父都是zygote</p></li>
<li><p>startVm</p></li>
<li><p>startReg</p></li>
</ul>

<blockquote>
<p>app_main.cpp</p>
</blockquote>
<div class="highlight"><pre><code class="language-text" data-lang="text">int main(int argc, const char* const argv[])
</code></pre></div>
<blockquote>
<p>AndroidRuntime.cpp</p>
</blockquote>
<div class="highlight"><pre><code class="language-text" data-lang="text">void AndroidRuntime::start(const char* className, const bool startSystemSerever)
</code></pre></div>
<blockquote>
<p>ZygoteInit.java</p>
</blockquote>
<div class="highlight"><pre><code class="language-text" data-lang="text">public static void main(String argv[])

private static void registerZygoteSocket()

// preloaded-classes file
private static void preloadClasses()

private static void preloadResources() {
</code></pre></div>
<h4>Zygot的嫡长子 -system_server</h4>

<ul>
<li><p>Java世界半边天</p></li>
<li><p>Java世界的核心Service都在这里启动</p></li>
</ul>

<blockquote>
<p>dalvik<em>system</em>zygote.c</p>
</blockquote>
<div class="highlight"><pre><code class="language-text" data-lang="text">static void Dalvik_dalvik_system_Zygote_forkAndSpecialize(const u4* args, JValue* pResult)

static void Dalvik_dalvik_system_Zygote_forkSystemServer(const u4* args, JValue* pResult) 

static void setSignalHandler() 

static void sigchldHandler(int s)
</code></pre></div>
<blockquote>
<p>RuntimeInit.java</p>
</blockquote>
<div class="highlight"><pre><code class="language-text" data-lang="text">public static final void zygoteInit(String[] argv) throws ZygoteInit.MethodAndArgsCaller {
</code></pre></div>
<blockquote>
<p>System_Server.java</p>
</blockquote>
<div class="highlight"><pre><code class="language-text" data-lang="text">public static void main(String[] args) {

native public static void init1(String[] args);

public static final void init2() {
</code></pre></div>
<blockquote>
<p>com<em>android</em>server_SystemServer.cpp</p>
</blockquote>
<div class="highlight"><pre><code class="language-text" data-lang="text">static void android_server_SystemServer_init1(JNIEnv* env, jobject clazz)
</code></pre></div>
<blockquote>
<p>system_init.c</p>
</blockquote>
<div class="highlight"><pre><code class="language-text" data-lang="text">extern &quot;C&quot; status_t system_init()
</code></pre></div>
<blockquote>
<p>ActivityManagerService.java</p>
</blockquote>
<div class="highlight"><pre><code class="language-text" data-lang="text">private final void startProcessLocked(ProcessRecord app,
</code></pre></div>
<blockquote>
<p>Process.java</p>
</blockquote>
<div class="highlight"><pre><code class="language-text" data-lang="text">public static final int start(final String processClass,
                                  final String niceName,
                                  int uid, int gid, int[] gids,
                                  int debugFlags,
                                  String[] zygoteArgs)

private static int startViaZygote(final String processClass,
                                  final String niceName,
                                  final int uid, final int gid,
                                  final int[] gids,
                                  int debugFlags,
                                  String[] extraArgs)
                                  throws ZygoteStartFailedEx {

private static int zygoteSendArgsAndGetPid(ArrayList&lt;String&gt; args)
            throws ZygoteStartFailedEx {
</code></pre></div>
<blockquote>
<p>ZygoteConnection.java </p>
</blockquote>
<div class="highlight"><pre><code class="language-text" data-lang="text">boolean runOnce() throws ZygoteInit.MethodAndArgsCaller {
</code></pre></div>
<h4>智能指针 - RefBase sp wp</h4>

	  ]]></description>
	</item>

	<item>
	  <title>Android开发中二维码库的选用</title>
	  <link>//select-qrc-code-library-in-andord</link>
	  <author>Tao He</author>
	  <pubDate>2017-08-21T02:30:12+08:00</pubDate>
	  <guid>//select-qrc-code-library-in-andord</guid>
	  <description><![CDATA[
	     <p>在现今的移动App开发中，二维码的使用场景变得越来越普遍，最近我要开发的一个需求就必须生成二维码，自然就面临二维码库选用的问题，因为大名鼎鼎的ZXing的存在，这也本不是什么特别需要考虑的问题。但是因为ZXing的大而全，要在一款只是将二维码作为一个特定使用场景下的一个功能的App，完全引入ZXing就有点过了，所以就面临了ZXing库的裁剪问题。但是裁剪这样一个大而全的多平台支持的库也不是什么简单的事情，所以我也顺便调研了其他的二维码库作为参考:</p>

<ul>
<li><p>OnBarCode http://www.onbarcode.com/products/android_barcode/barcodes/qrcode.html#intro</p></li>
<li><p>Barcode4j http://barcode4j.sourceforge.net/</p></li>
<li><p>QRGenerator </p>

<ul>
<li>https://github.com/androidmads/QRGenerator</li>
<li>https://androidmads.blogspot.com/2016/07/qr-code-generator-library.html</li>
</ul></li>
</ul>

<p>当然了，这些库实现我的需求都是没有问题的，但是最终我还是在我的项目中选用了ZXing,一来是因为它在业界的广泛使用得到了充分的验证，二来是因为我们项目组其他的同事也会在未来的需求中使用到，所以必须选用一个长期的可靠的的解决方案。当然了，我是选用了一版裁剪后的ZXing库。至于这个库的使用其实没有什么好说的，因为使用起来非常简单，简单的几个事例就能明白如何应用。</p>

	  ]]></description>
	</item>

	<item>
	  <title>捕获Android截屏事件</title>
	  <link>//capture-screenshot-event-on-android</link>
	  <author>Tao He</author>
	  <pubDate>2017-08-03T02:30:12+08:00</pubDate>
	  <guid>//capture-screenshot-event-on-android</guid>
	  <description><![CDATA[
	     <p>在Android平台上截屏事件没有对应的一个标准的事件和通知，所以应用App无法通过标准或统一的方式去捕获这个事件来满足自己的要求。
只能通过间接的方式捕获到这个事件，我因为要做一个微信的截屏图片分享的功能，所以对Android截屏事件做了一个调研，并且在开发中 
选用了其中的一种方式。 大体上，要解决这个问题，大概有以下几种方法，每种方法的可靠性和灵活性都不同。</p>

<h4>通过按键监听捕获截屏事件</h4>

<p>这种方式最简单粗暴，但是存在两个巨大的麻烦，不易克服:</p>

<ul>
<li><p>Android机器厂商众多，ROM众多，多截屏按键的组合没有统一的标准，如果适配所有机型，几乎是无法完成的任务</p></li>
<li><p>事件准确捕获后，截屏这个动作完全结束时点需要应用自己去检查和获取</p></li>
</ul>

<p>这两件事做起来都不容易，都很容易出错，所以这种方法基本上是四种办法里最不可靠的，基本不推荐这么做。</p>

<h4>通过监听系统截屏进程的运行和退出捕获截屏事件</h4>

<p>这种方法需要有一个后台线程以一定的频率去检查系统截屏进程是否启动，运行，退出，并作出相应的逻辑，而这个频率其实很难把握，毕竟应用无法预期这个截屏动作，因此这种方法也不推荐，此种方法和上面的那种方法可能只适用于非常特定的场景。</p>

<h4>通过FileObserver间接捕获</h4>

<p>这种方法其实是比较可靠和可控的，就是有一个问题, 一个FileObserver初始化的时候就得决定observe哪个目录，所以适配不同机型的过程就变成了适配所以可能的目录，这个是非常麻烦的事情，不过FileObserver总体来看是可以解决这个问题的，唯一比较难的就是要适配所有可能的机型对应的目录。最开始做这个功能的时候我实现了一版使用FileObserver的实现:</p>
<div class="highlight"><pre><code class="language-java" data-lang="java"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ScreenshotObserver</span> <span class="kd">extends</span> <span class="n">FileObserver</span> <span class="o">{</span>

  <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">TAG</span> <span class="o">=</span> <span class="n">ScreenshotObserver</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">getSimpleName</span><span class="o">();</span>
       <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">PATH</span> <span class="o">=</span> <span class="n">Environment</span><span class="o">.</span><span class="na">getExternalStorageDirectory</span><span class="o">().</span><span class="na">toString</span><span class="o">()</span> <span class="o">+</span> <span class="s">&quot;/Pictures/Screenshots/&quot;</span><span class="o">;</span>

       <span class="kd">private</span> <span class="n">OnScreenshotTakenListener</span> <span class="n">mListener</span><span class="o">;</span>
       <span class="kd">private</span> <span class="n">String</span> <span class="n">mLastTakenPath</span><span class="o">;</span>

       <span class="kd">public</span> <span class="nf">ScreenshotObserver</span><span class="o">(</span><span class="n">OnScreenshotTakenListener</span> <span class="n">listener</span><span class="o">)</span> <span class="o">{</span>
            <span class="kd">super</span><span class="o">(</span><span class="n">PATH</span><span class="o">,</span> <span class="n">FileObserver</span><span class="o">.</span><span class="na">CLOSE_WRITE</span><span class="o">);</span>
            <span class="n">mListener</span> <span class="o">=</span> <span class="n">listener</span><span class="o">;</span>
       <span class="o">}</span>

       <span class="nd">@Override</span>
       <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onEvent</span><span class="o">(</span><span class="kt">int</span> <span class="n">event</span><span class="o">,</span> <span class="n">String</span> <span class="n">path</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">path</span><span class="o">==</span><span class="kc">null</span> <span class="o">||</span> <span class="n">event</span><span class="o">!=</span><span class="n">FileObserver</span><span class="o">.</span><span class="na">CLOSE_WRITE</span><span class="o">)</span>
                    <span class="n">Log</span><span class="o">.</span><span class="na">d</span><span class="o">(</span><span class="n">TAG</span><span class="o">,</span> <span class="s">&quot;Don&#39;t care.&quot;</span><span class="o">);</span>
            <span class="k">else</span> <span class="nf">if</span> <span class="o">(</span><span class="n">mLastTakenPath</span><span class="o">!=</span><span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="n">path</span><span class="o">.</span><span class="na">equalsIgnoreCase</span><span class="o">(</span><span class="n">mLastTakenPath</span><span class="o">))</span>
                    <span class="n">Log</span><span class="o">.</span><span class="na">d</span><span class="o">(</span><span class="n">TAG</span><span class="o">,</span> <span class="s">&quot;This event has been observed before.&quot;</span><span class="o">);</span>
            <span class="k">else</span> <span class="o">{</span>
                    <span class="n">mLastTakenPath</span> <span class="o">=</span> <span class="n">path</span><span class="o">;</span>
                    <span class="n">File</span> <span class="n">file</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">File</span><span class="o">(</span><span class="n">PATH</span><span class="o">+</span><span class="n">path</span><span class="o">);</span>
                    <span class="n">mListener</span><span class="o">.</span><span class="na">onScreenshotTaken</span><span class="o">(</span><span class="n">Uri</span><span class="o">.</span><span class="na">fromFile</span><span class="o">(</span><span class="n">file</span><span class="o">));</span>
                    <span class="n">Log</span><span class="o">.</span><span class="na">d</span><span class="o">(</span><span class="n">TAG</span><span class="o">,</span> <span class="s">&quot;Send event to listener.&quot;</span><span class="o">);</span>
            <span class="o">}</span>
       <span class="o">}</span>
  <span class="o">}</span>
</code></pre></div>
<h4>通过ContentObserver间接捕获</h4>

<p>这种方式算是目前最可靠，灵活性最好的方式了。实现起来先对其他几种方式要做的事也先对多一点，一下是我的实现，这个实现针对国内的一些手机做了适配，覆盖到了一些比较极端的情况:</p>
<div class="highlight"><pre><code class="language-java" data-lang="java"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ScreenshotManager</span> <span class="o">{</span>

    <span class="kd">private</span> <span class="n">OnScreenshotTakenListener</span> <span class="n">mListener</span><span class="o">;</span>
    <span class="kd">private</span> <span class="n">String</span> <span class="n">mLastTakenPath</span><span class="o">;</span>
    <span class="kd">private</span> <span class="n">Context</span> <span class="n">mContext</span><span class="o">;</span>
    <span class="kd">private</span> <span class="n">Timer</span> <span class="n">mCheckImageTimer</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kt">int</span> <span class="n">mCount</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>

    <span class="cm">/**</span>
<span class="cm">     * Internal storage observer</span>
<span class="cm">     */</span>
    <span class="kd">private</span> <span class="n">ScreenshotObserver</span> <span class="n">mInternalObserver</span><span class="o">;</span>

    <span class="cm">/**</span>
<span class="cm">     * External storage observer</span>
<span class="cm">     */</span>

    <span class="kd">private</span> <span class="n">ScreenshotObserver</span> <span class="n">mExternalObserver</span><span class="o">;</span>

    <span class="kd">private</span> <span class="n">HandlerThread</span> <span class="n">mHandlerThread</span><span class="o">;</span>
    <span class="kd">private</span> <span class="n">Handler</span> <span class="n">mContenHandler</span><span class="o">;</span>


    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">String</span><span class="o">[]</span> <span class="n">MEDIA_PROJECTIONS</span> <span class="o">=</span>  <span class="o">{</span>
            <span class="n">MediaStore</span><span class="o">.</span><span class="na">Images</span><span class="o">.</span><span class="na">ImageColumns</span><span class="o">.</span><span class="na">DATA</span><span class="o">,</span>
            <span class="n">MediaStore</span><span class="o">.</span><span class="na">Images</span><span class="o">.</span><span class="na">ImageColumns</span><span class="o">.</span><span class="na">DATE_TAKEN</span><span class="o">,</span>
    <span class="o">};</span>

    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">String</span><span class="o">[]</span> <span class="n">KEYWORDS</span> <span class="o">=</span> <span class="o">{</span>
            <span class="s">&quot;screenshot&quot;</span><span class="o">,</span> <span class="s">&quot;screen_shot&quot;</span><span class="o">,</span> <span class="s">&quot;screen-shot&quot;</span><span class="o">,</span> <span class="s">&quot;screen shot&quot;</span><span class="o">,</span>
            <span class="s">&quot;screencapture&quot;</span><span class="o">,</span> <span class="s">&quot;screen_capture&quot;</span><span class="o">,</span> <span class="s">&quot;screen-capture&quot;</span><span class="o">,</span> <span class="s">&quot;screen capture&quot;</span><span class="o">,</span>
            <span class="s">&quot;screencap&quot;</span><span class="o">,</span> <span class="s">&quot;screen_cap&quot;</span><span class="o">,</span> <span class="s">&quot;screen-cap&quot;</span><span class="o">,</span> <span class="s">&quot;screen cap&quot;</span><span class="o">,</span> <span class="s">&quot;截屏&quot;</span>
    <span class="o">};</span>


    <span class="kd">public</span> <span class="nf">ScreenshotManager</span><span class="o">(</span><span class="n">Context</span> <span class="n">context</span><span class="o">,</span> <span class="n">OnScreenshotTakenListener</span> <span class="n">listener</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">mContext</span> <span class="o">=</span> <span class="n">context</span><span class="o">;</span>
        <span class="n">mListener</span> <span class="o">=</span> <span class="n">listener</span><span class="o">;</span>
        <span class="n">mLastTakenPath</span> <span class="o">=</span> <span class="n">getLastTakenPath</span><span class="o">();</span>

        <span class="n">mHandlerThread</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">HandlerThread</span><span class="o">(</span><span class="s">&quot;Screenshot_Observer&quot;</span><span class="o">);</span>
        <span class="n">mHandlerThread</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>
        <span class="n">mContenHandler</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">Handler</span><span class="o">(</span><span class="n">mHandlerThread</span><span class="o">.</span><span class="na">getLooper</span><span class="o">());</span>

        <span class="n">mInternalObserver</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">ScreenshotObserver</span><span class="o">(</span><span class="n">mContenHandler</span><span class="o">,</span> <span class="n">MediaStore</span><span class="o">.</span><span class="na">Images</span><span class="o">.</span><span class="na">Media</span><span class="o">.</span><span class="na">INTERNAL_CONTENT_URI</span><span class="o">);</span>
        <span class="n">mExternalObserver</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">ScreenshotObserver</span><span class="o">(</span><span class="n">mContenHandler</span><span class="o">,</span> <span class="n">MediaStore</span><span class="o">.</span><span class="na">Images</span><span class="o">.</span><span class="na">Media</span><span class="o">.</span><span class="na">EXTERNAL_CONTENT_URI</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">startScreenshotObserver</span><span class="o">()</span> <span class="o">{</span>
        <span class="n">mContext</span><span class="o">.</span><span class="na">getContentResolver</span><span class="o">().</span><span class="na">registerContentObserver</span><span class="o">(</span>
                <span class="n">MediaStore</span><span class="o">.</span><span class="na">Images</span><span class="o">.</span><span class="na">Media</span><span class="o">.</span><span class="na">INTERNAL_CONTENT_URI</span><span class="o">,</span>
                <span class="kc">false</span><span class="o">,</span>
                <span class="n">mInternalObserver</span>
        <span class="o">);</span>
        <span class="n">mContext</span><span class="o">.</span><span class="na">getContentResolver</span><span class="o">().</span><span class="na">registerContentObserver</span><span class="o">(</span>
                <span class="n">MediaStore</span><span class="o">.</span><span class="na">Images</span><span class="o">.</span><span class="na">Media</span><span class="o">.</span><span class="na">EXTERNAL_CONTENT_URI</span><span class="o">,</span>
                <span class="kc">false</span><span class="o">,</span>
                <span class="n">mExternalObserver</span>
        <span class="o">);</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">stopScreenshotObserver</span><span class="o">()</span> <span class="o">{</span>
        <span class="n">mContext</span><span class="o">.</span><span class="na">getContentResolver</span><span class="o">().</span><span class="na">unregisterContentObserver</span><span class="o">(</span><span class="n">mInternalObserver</span><span class="o">);</span>
        <span class="n">mContext</span><span class="o">.</span><span class="na">getContentResolver</span><span class="o">().</span><span class="na">unregisterContentObserver</span><span class="o">(</span><span class="n">mExternalObserver</span><span class="o">);</span>
        <span class="n">releaseTimer</span><span class="o">();</span>
    <span class="o">}</span>

    <span class="kd">private</span> <span class="kt">void</span> <span class="nf">handleMediaContentChange</span><span class="o">(</span><span class="n">Uri</span> <span class="n">contentUri</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">Cursor</span> <span class="n">cursor</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
        <span class="k">try</span> <span class="o">{</span>
            <span class="c1">// 数据改变时查询数据库中最后加入的一条数据</span>
            <span class="n">cursor</span> <span class="o">=</span> <span class="n">mContext</span><span class="o">.</span><span class="na">getContentResolver</span><span class="o">().</span><span class="na">query</span><span class="o">(</span>
                    <span class="n">contentUri</span><span class="o">,</span>
                    <span class="n">MEDIA_PROJECTIONS</span><span class="o">,</span>
                    <span class="kc">null</span><span class="o">,</span>
                    <span class="kc">null</span><span class="o">,</span>
                    <span class="n">MediaStore</span><span class="o">.</span><span class="na">Images</span><span class="o">.</span><span class="na">ImageColumns</span><span class="o">.</span><span class="na">DATE_ADDED</span> <span class="o">+</span> <span class="s">&quot; desc limit 1&quot;</span>
            <span class="o">);</span>

            <span class="k">if</span> <span class="o">(</span><span class="n">cursor</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
                <span class="k">return</span><span class="o">;</span>
            <span class="o">}</span>
            <span class="k">if</span> <span class="o">(!</span><span class="n">cursor</span><span class="o">.</span><span class="na">moveToFirst</span><span class="o">())</span> <span class="o">{</span>
                <span class="k">return</span><span class="o">;</span>
            <span class="o">}</span>

            <span class="c1">// 获取各列的索引</span>
            <span class="kt">int</span> <span class="n">dataIndex</span> <span class="o">=</span> <span class="n">cursor</span><span class="o">.</span><span class="na">getColumnIndex</span><span class="o">(</span><span class="n">MediaStore</span><span class="o">.</span><span class="na">Images</span><span class="o">.</span><span class="na">ImageColumns</span><span class="o">.</span><span class="na">DATA</span><span class="o">);</span>
            <span class="kt">int</span> <span class="n">dateTakenIndex</span> <span class="o">=</span> <span class="n">cursor</span><span class="o">.</span><span class="na">getColumnIndex</span><span class="o">(</span><span class="n">MediaStore</span><span class="o">.</span><span class="na">Images</span><span class="o">.</span><span class="na">ImageColumns</span><span class="o">.</span><span class="na">DATE_TAKEN</span><span class="o">);</span>

            <span class="c1">// 获取行数据</span>
            <span class="n">String</span> <span class="n">data</span> <span class="o">=</span> <span class="n">cursor</span><span class="o">.</span><span class="na">getString</span><span class="o">(</span><span class="n">dataIndex</span><span class="o">);</span>
            <span class="kt">long</span> <span class="n">dateTaken</span> <span class="o">=</span> <span class="n">cursor</span><span class="o">.</span><span class="na">getLong</span><span class="o">(</span><span class="n">dateTakenIndex</span><span class="o">);</span>

            <span class="c1">// 处理获取到的第一行数据</span>
            <span class="n">handleMediaRowData</span><span class="o">(</span><span class="n">data</span><span class="o">,</span> <span class="n">dateTaken</span><span class="o">);</span>

        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>

        <span class="o">}</span> <span class="k">finally</span> <span class="o">{</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">cursor</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">cursor</span><span class="o">.</span><span class="na">isClosed</span><span class="o">())</span> <span class="o">{</span>
                <span class="n">cursor</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
            <span class="o">}</span>
        <span class="o">}</span>
    <span class="o">}</span>

    <span class="kd">private</span> <span class="kt">void</span> <span class="nf">handleMediaRowData</span><span class="o">(</span><span class="n">String</span> <span class="n">data</span><span class="o">,</span> <span class="kt">long</span> <span class="n">dateTaken</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">TextUtils</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">(</span><span class="n">data</span><span class="o">))</span>
            <span class="k">return</span><span class="o">;</span>

        <span class="k">if</span> <span class="o">(</span><span class="n">checkScreenShot</span><span class="o">(</span><span class="n">data</span><span class="o">,</span> <span class="n">dateTaken</span><span class="o">))</span> <span class="o">{</span>
            <span class="k">if</span> <span class="o">(!</span><span class="n">data</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">mLastTakenPath</span><span class="o">))</span> <span class="o">{</span>
                <span class="n">mLastTakenPath</span> <span class="o">=</span> <span class="n">data</span><span class="o">;</span>
                <span class="kd">final</span> <span class="n">File</span> <span class="n">file</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">File</span><span class="o">(</span><span class="n">data</span><span class="o">);</span>
                <span class="k">if</span><span class="o">(</span><span class="kc">null</span> <span class="o">==</span> <span class="n">BitmapFactory</span><span class="o">.</span><span class="na">decodeFile</span><span class="o">(</span><span class="n">file</span><span class="o">.</span><span class="na">getPath</span><span class="o">()))</span> <span class="o">{</span>
                    <span class="k">if</span> <span class="o">(</span><span class="n">mCheckImageTimer</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
                        <span class="n">mCheckImageTimer</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">Timer</span><span class="o">();</span>
                    <span class="o">}</span>
                    <span class="n">mCheckImageTimer</span><span class="o">.</span><span class="na">schedule</span><span class="o">(</span><span class="k">new</span> <span class="nf">TimerTask</span><span class="o">()</span> <span class="o">{</span>
                        <span class="nd">@Override</span>
                        <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
                            <span class="k">if</span> <span class="o">(</span><span class="n">mCount</span> <span class="o">&gt;</span> <span class="mi">10</span><span class="o">)</span> <span class="o">{</span>
                                <span class="n">mCheckImageTimer</span><span class="o">.</span><span class="na">cancel</span><span class="o">();</span>
                                <span class="n">mCheckImageTimer</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
                                <span class="k">return</span><span class="o">;</span>
                            <span class="o">}</span>
                            <span class="n">Bitmap</span> <span class="n">image</span> <span class="o">=</span> <span class="n">BitmapFactory</span><span class="o">.</span><span class="na">decodeFile</span><span class="o">(</span><span class="n">mLastTakenPath</span><span class="o">);</span>
                            <span class="k">if</span><span class="o">(</span><span class="n">image</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
                                <span class="n">mListener</span><span class="o">.</span><span class="na">onScreenshotTaken</span><span class="o">(</span><span class="n">mLastTakenPath</span><span class="o">);</span>
                                <span class="n">mCheckImageTimer</span><span class="o">.</span><span class="na">cancel</span><span class="o">();</span>
                                <span class="n">mCheckImageTimer</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
                                <span class="n">mCount</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
                            <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
                                <span class="n">mCount</span><span class="o">++;</span>
                            <span class="o">}</span>
                        <span class="o">}</span>
                    <span class="o">},</span> <span class="mi">0</span><span class="o">,</span> <span class="mi">1000</span><span class="o">);</span>
                <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
                    <span class="n">mListener</span><span class="o">.</span><span class="na">onScreenshotTaken</span><span class="o">(</span><span class="n">mLastTakenPath</span><span class="o">);</span>
                <span class="o">}</span>
            <span class="o">}</span>
            <span class="n">mLastTakenPath</span> <span class="o">=</span> <span class="n">data</span><span class="o">;</span>
        <span class="o">}</span>
    <span class="o">}</span>

    <span class="kd">private</span> <span class="kt">boolean</span> <span class="nf">checkScreenShot</span><span class="o">(</span><span class="n">String</span> <span class="n">data</span><span class="o">,</span> <span class="kt">long</span> <span class="n">dateTaken</span><span class="o">)</span> <span class="o">{</span>

        <span class="n">data</span> <span class="o">=</span> <span class="n">data</span><span class="o">.</span><span class="na">toLowerCase</span><span class="o">();</span>
        <span class="c1">// 判断图片路径是否含有指定的关键字之一, 如果有, 则认为当前截屏了</span>
        <span class="k">for</span> <span class="o">(</span><span class="n">String</span> <span class="n">keyWork</span> <span class="o">:</span> <span class="n">KEYWORDS</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">data</span><span class="o">.</span><span class="na">contains</span><span class="o">(</span><span class="n">keyWork</span><span class="o">))</span> <span class="o">{</span>
                <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
            <span class="o">}</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">private</span> <span class="n">String</span> <span class="nf">getLastTakenPath</span><span class="o">()</span> <span class="o">{</span>
        <span class="n">Cursor</span> <span class="n">cursor</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
        <span class="n">String</span> <span class="n">path</span> <span class="o">=</span> <span class="s">&quot;&quot;</span><span class="o">;</span>
        <span class="k">try</span> <span class="o">{</span>
            <span class="c1">// 数据改变时查询数据库中最后加入的一条数据</span>
            <span class="n">cursor</span> <span class="o">=</span> <span class="n">mContext</span><span class="o">.</span><span class="na">getContentResolver</span><span class="o">().</span><span class="na">query</span><span class="o">(</span>
                    <span class="n">MediaStore</span><span class="o">.</span><span class="na">Images</span><span class="o">.</span><span class="na">Media</span><span class="o">.</span><span class="na">INTERNAL_CONTENT_URI</span><span class="o">,</span>
                    <span class="n">MEDIA_PROJECTIONS</span><span class="o">,</span>
                    <span class="kc">null</span><span class="o">,</span>
                    <span class="kc">null</span><span class="o">,</span>
                    <span class="n">MediaStore</span><span class="o">.</span><span class="na">Images</span><span class="o">.</span><span class="na">ImageColumns</span><span class="o">.</span><span class="na">DATE_ADDED</span> <span class="o">+</span> <span class="s">&quot; desc limit 1&quot;</span>
            <span class="o">);</span>

            <span class="k">if</span> <span class="o">(</span><span class="n">cursor</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
                <span class="k">return</span> <span class="s">&quot;&quot;</span><span class="o">;</span>
            <span class="o">}</span>
            <span class="k">if</span> <span class="o">(!</span><span class="n">cursor</span><span class="o">.</span><span class="na">moveToFirst</span><span class="o">())</span> <span class="o">{</span>
                <span class="k">return</span> <span class="s">&quot;&quot;</span><span class="o">;</span>
            <span class="o">}</span>

            <span class="kt">int</span> <span class="n">dataIndex</span> <span class="o">=</span> <span class="n">cursor</span><span class="o">.</span><span class="na">getColumnIndex</span><span class="o">(</span><span class="n">MediaStore</span><span class="o">.</span><span class="na">Images</span><span class="o">.</span><span class="na">ImageColumns</span><span class="o">.</span><span class="na">DATA</span><span class="o">);</span>
            <span class="kt">int</span> <span class="n">dateTakenIndex</span> <span class="o">=</span> <span class="n">cursor</span><span class="o">.</span><span class="na">getColumnIndex</span><span class="o">(</span><span class="n">MediaStore</span><span class="o">.</span><span class="na">Images</span><span class="o">.</span><span class="na">ImageColumns</span><span class="o">.</span><span class="na">DATE_TAKEN</span><span class="o">);</span>

            <span class="n">path</span> <span class="o">=</span> <span class="n">cursor</span><span class="o">.</span><span class="na">getString</span><span class="o">(</span><span class="n">dataIndex</span><span class="o">);</span>

            <span class="n">cursor</span> <span class="o">=</span> <span class="n">mContext</span><span class="o">.</span><span class="na">getContentResolver</span><span class="o">().</span><span class="na">query</span><span class="o">(</span>
                    <span class="n">MediaStore</span><span class="o">.</span><span class="na">Images</span><span class="o">.</span><span class="na">Media</span><span class="o">.</span><span class="na">EXTERNAL_CONTENT_URI</span><span class="o">,</span>
                    <span class="n">MEDIA_PROJECTIONS</span><span class="o">,</span>
                    <span class="kc">null</span><span class="o">,</span>
                    <span class="kc">null</span><span class="o">,</span>
                    <span class="n">MediaStore</span><span class="o">.</span><span class="na">Images</span><span class="o">.</span><span class="na">ImageColumns</span><span class="o">.</span><span class="na">DATE_ADDED</span> <span class="o">+</span> <span class="s">&quot; desc limit 1&quot;</span>
            <span class="o">);</span>

            <span class="k">if</span> <span class="o">(</span><span class="n">cursor</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
                <span class="k">return</span> <span class="s">&quot;&quot;</span><span class="o">;</span>
            <span class="o">}</span>
            <span class="k">if</span> <span class="o">(!</span><span class="n">cursor</span><span class="o">.</span><span class="na">moveToFirst</span><span class="o">())</span> <span class="o">{</span>
                <span class="k">return</span> <span class="s">&quot;&quot;</span><span class="o">;</span>
            <span class="o">}</span>

            <span class="n">dataIndex</span> <span class="o">=</span> <span class="n">cursor</span><span class="o">.</span><span class="na">getColumnIndex</span><span class="o">(</span><span class="n">MediaStore</span><span class="o">.</span><span class="na">Images</span><span class="o">.</span><span class="na">ImageColumns</span><span class="o">.</span><span class="na">DATA</span><span class="o">);</span>
            <span class="kt">int</span> <span class="n">index</span> <span class="o">=</span> <span class="n">cursor</span><span class="o">.</span><span class="na">getColumnIndex</span><span class="o">(</span><span class="n">MediaStore</span><span class="o">.</span><span class="na">Images</span><span class="o">.</span><span class="na">ImageColumns</span><span class="o">.</span><span class="na">DATE_TAKEN</span><span class="o">);</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">index</span> <span class="o">&gt;</span> <span class="n">dateTakenIndex</span><span class="o">)</span> <span class="o">{</span>
                <span class="n">path</span> <span class="o">=</span> <span class="n">cursor</span><span class="o">.</span><span class="na">getString</span><span class="o">(</span><span class="n">dataIndex</span><span class="o">);</span>
            <span class="o">}</span>

        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>

        <span class="o">}</span> <span class="k">finally</span> <span class="o">{</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">cursor</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">cursor</span><span class="o">.</span><span class="na">isClosed</span><span class="o">())</span> <span class="o">{</span>
                <span class="n">cursor</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
            <span class="o">}</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="n">path</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">private</span> <span class="kt">void</span> <span class="nf">releaseTimer</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">mCheckImageTimer</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">mCheckImageTimer</span><span class="o">.</span><span class="na">cancel</span><span class="o">();</span>
            <span class="n">mCheckImageTimer</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
        <span class="o">}</span>
    <span class="o">}</span>


    <span class="kd">public</span> <span class="kd">interface</span> <span class="nc">OnScreenshotTakenListener</span> <span class="o">{</span>
        <span class="kt">void</span> <span class="nf">onScreenshotTaken</span><span class="o">(</span><span class="n">String</span> <span class="n">path</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="kd">private</span> <span class="kd">class</span> <span class="nc">ScreenshotObserver</span> <span class="kd">extends</span> <span class="n">ContentObserver</span> <span class="o">{</span>
        <span class="kd">private</span> <span class="n">Uri</span> <span class="n">mContentUri</span><span class="o">;</span>
        <span class="kd">public</span> <span class="nf">ScreenshotObserver</span><span class="o">(</span><span class="n">Handler</span> <span class="n">handler</span><span class="o">,</span> <span class="n">Uri</span> <span class="n">contentUri</span><span class="o">)</span> <span class="o">{</span>
            <span class="kd">super</span><span class="o">(</span><span class="n">handler</span><span class="o">);</span>
            <span class="n">mContentUri</span> <span class="o">=</span> <span class="n">contentUri</span><span class="o">;</span>
        <span class="o">}</span>

        <span class="nd">@Override</span>
        <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onChange</span><span class="o">(</span><span class="kt">boolean</span> <span class="n">selfChange</span><span class="o">)</span> <span class="o">{</span>
            <span class="kd">super</span><span class="o">.</span><span class="na">onChange</span><span class="o">(</span><span class="n">selfChange</span><span class="o">);</span>
            <span class="n">handleMediaContentChange</span><span class="o">(</span><span class="n">mContentUri</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div>
<p>这种方式比起FileObserver有一个明显的不同，就是FileObserver得在截屏之前就得知道哪些目录需要监听，而ContentObserver则是在文件系统发生变化的时候去查特定的目录和存储位置，适配起来就相对灵活，只要枚举出这些目录即可。综上，ContentObserver应该是最优的一种实现方式。</p>

	  ]]></description>
	</item>

	<item>
	  <title>Intall Emacs on Ubuntu</title>
	  <link>//install-emacs-on-ubuntu</link>
	  <author>Tao He</author>
	  <pubDate>2017-07-16T02:30:12+08:00</pubDate>
	  <guid>//install-emacs-on-ubuntu</guid>
	  <description><![CDATA[
	     <p>Install Emacs 25 on Ubuntu from source is very easy, follow these steps below could achieve it.</p>

<ul>
<li>Open terminal (Ctrl+Alt+T) and run command to install build tools:</li>
</ul>
<div class="highlight"><pre><code class="language-text" data-lang="text">sudo apt install build-essential checkinstall
</code></pre></div>
<ul>
<li>Then install the build dependencies via command:</li>
</ul>
<div class="highlight"><pre><code class="language-text" data-lang="text">sudo apt-get build-dep emacs24
</code></pre></div>
<ul>
<li><p>Now download the source at ftp.gnu.org/gnu/emacs/, then extract:</p></li>
<li><p>Open terminal and navigate to the &quot;emacs-25.1&quot; folder via command (or select &quot;Open in terminal&quot; from its context menu):</p></li>
</ul>
<div class="highlight"><pre><code class="language-text" data-lang="text">cd ~/Downloads/emacs-25.1
</code></pre></div>
<ul>
<li>In the same terminal window, once you’re in the source folder, run the commands below one by one:</li>
</ul>
<div class="highlight"><pre><code class="language-text" data-lang="text">./configure
make
</code></pre></div>
<ul>
<li>Finally use checkinstall command to create .deb and install Emacs 25.1:</li>
</ul>
<div class="highlight"><pre><code class="language-text" data-lang="text">sudo checkinstall
</code></pre></div>
<p>While running the command, answer on screen questions, e.g., install docs, type package description, change package name, version, etc.</p>

<p>Once done, Emacs is installed on your system and you can remove it anytime by running the command in the prompt with sudo privilege:</p>

<p>In my case it’s:</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">sudo dpkg -r emacs-25
</code></pre></div>
<p>And the last command create a .deb package in the source folder, and it can be used in another Ubuntu machine to install Emacs(need to manually install dependencies via step 2).</p>

<p>Finally, run command emacs to launch the text editor, or launch it from Unity Dash (App Launcher) at next login (or next boot).</p>

	  ]]></description>
	</item>

	<item>
	  <title>在Android上实现无限翻页轮播动画效果</title>
	  <link>//implement-page-up-down-animation-on-android</link>
	  <author>Tao He</author>
	  <pubDate>2017-07-13T02:30:12+08:00</pubDate>
	  <guid>//implement-page-up-down-animation-on-android</guid>
	  <description><![CDATA[
	     <p>最近在工作中遇到一个需求，要求在一个Dialog的标题上显示两行字，但是这行字如果同时出现的话会非常难看，设计出了套方案，类似无限翻页轮播这两行字，要有翻书的效果。
刚开始实现的时候，动画的效果也出来了，但是拿去给设计验收的时候设计总感觉怪怪的，始终达不到设计最终想要的结果。后来通过好多次的调试和验证，发现问题出现在两个
View的动画播放时序和旋转轴的问题上，解决了这两个问题后再拿去给设计看的时候，一切都完美了。 现在这个比较好的设计也已上线， 也因为这个调试和验证的过程感觉对
Android动画的一些细节碰触的较多，所以写下此文记录下这个过程。</p>

<h4>基本原理</h4>

<p>通过<code>ObjectAnimation</code>操作<code>View</code>的<code>RotationY</code>属性，再利用动态改变<code>PivotY</code>的值和动画播放时序的不同来模拟出无限翻页轮播的动画效果</p>

<h4>ObjectAnimation</h4>
<div class="highlight"><pre><code class="language-text" data-lang="text">// 上面的View翻下去的动画

private static ObjectAnimator aboveViewPageDownAnim;

// 下面的View翻上去的动画

private static ObjectAnimator belowViewPageUpAnim;

// 上面的View翻上去的动画

private static ObjectAnimator aboveViewPageUpAnim;

// 下面的View翻下去的动画

private static ObjectAnimator belowViewPageDownAnim;
</code></pre></div>
<h4>关键的常量</h4>
<div class="highlight"><pre><code class="language-text" data-lang="text">// 翻页动画的播放时长

private static int pageUpDownDurition = 500;

// 翻下播放结束前100翻上就开始播放

private static int pageUpBeforeDownEnd = 400;

// 翻上播放完后停留时间

private static int belowViewStayInterval = 800;

// 在Y轴底部翻转

private static int pageUpPivotY = 100;

// 在Y近顶部的位置翻转

private static int pageDownPivotY = 70;
</code></pre></div>
<h4>具体实现</h4>
<div class="highlight"><pre><code class="language-text" data-lang="text">public static void startPageUpDownAnimation(final View aboveView, final View belowView) {

    aboveViewPageDownAnim = ObjectAnimator.ofPropertyValuesHolder(aboveView,
            PropertyValuesHolder.ofFloat(View.ROTATION_X, 0, 90));

    aboveViewPageDownAnim.setDuration(pageUpDownDurition);
    aboveViewPageDownAnim.setInterpolator(new LinearInterpolator());
    aboveViewPageDownAnim.addListener(new Animator.AnimatorListener() {
        @Override
        public void onAnimationStart(Animator animator) {
            aboveView.setPivotY(pageDownPivotY);
            belowView.setVisibility(View.GONE);
            belowView.postDelayed(new Runnable() {
                @Override
                public void run() {
                    belowViewPageUpAnim.start();
                }
            }, pageUpBeforeDownEnd);
        }

        @Override
        public void onAnimationEnd(Animator animator) {

        }

        @Override
        public void onAnimationCancel(Animator animator) {

        }

        @Override
        public void onAnimationRepeat(Animator animator) {

        }
    });

    belowViewPageUpAnim = ObjectAnimator.ofPropertyValuesHolder(belowView,
    PropertyValuesHolder.ofFloat(View.ROTATION_X, -90, 0));
    belowViewPageUpAnim.setDuration(pageUpDownDurition);
    belowViewPageUpAnim.setInterpolator(new LinearInterpolator());
    belowViewPageUpAnim.addListener(new Animator.AnimatorListener() {
        @Override
        public void onAnimationStart(Animator animator) {
            belowView.setVisibility(View.VISIBLE);
            belowView.setPivotY(pageUpPivotY);
        }

        @Override
        public void onAnimationEnd(Animator animator) {
            belowView.postDelayed(new Runnable() {
                @Override
                public void run() {
                    belowViewPageDownAnim.start();
                }
            }, belowViewStayInterval);
        }

        @Override
        public void onAnimationCancel(Animator animator) {

        }

        @Override
        public void onAnimationRepeat(Animator animator) {

        }
    });

    belowViewPageDownAnim = ObjectAnimator.ofPropertyValuesHolder(belowView,
            PropertyValuesHolder.ofFloat(View.ROTATION_X, 0, 90));

    belowViewPageDownAnim.setDuration(pageUpDownDurition);
    belowViewPageDownAnim.setInterpolator(new LinearInterpolator());
    belowViewPageDownAnim.addListener(new Animator.AnimatorListener() {

        @Override
        public void onAnimationStart(Animator animator) {
            belowView.setPivotY(pageDownPivotY);
            aboveView.setVisibility(View.GONE);
            aboveView.postDelayed(new Runnable() {
                @Override
                public void run() {
                    aboveViewPageUpAnim.start();
                }
            }, pageUpBeforeDownEnd);
        }

        @Override
        public void onAnimationEnd(Animator animator) {

        }

        @Override
        public void onAnimationCancel(Animator animator) {

        }

        @Override
        public void onAnimationRepeat(Animator animator) {

        }
    });

    aboveViewPageUpAnim = ObjectAnimator.ofPropertyValuesHolder(aboveView,
            PropertyValuesHolder.ofFloat(View.ROTATION_X, -90, 0));
    aboveViewPageUpAnim.setDuration(pageUpDownDurition);
    aboveViewPageUpAnim.setInterpolator(new LinearInterpolator());
    aboveViewPageUpAnim.addListener(new Animator.AnimatorListener() {
        @Override
        public void onAnimationStart(Animator animator) {
            aboveView.setVisibility(View.VISIBLE);
            aboveView.setPivotY(pageUpPivotY);
        }

        @Override
        public void onAnimationEnd(Animator animator) {
            aboveView.postDelayed(new Runnable() {
                @Override
                public void run() {
                    aboveViewPageDownAnim.start();
                }
            }, belowViewStayInterval);
        }

        @Override
        public void onAnimationCancel(Animator animator) {

        }

        @Override
        public void onAnimationRepeat(Animator animator) {

        }
    });

    aboveViewPageDownAnim.start();
}
</code></pre></div>
<p>其实这个实现已经是一个基本比较通用的翻页动画了，不仅可以用于TextView，ImageView应该也没有问题。</p>

	  ]]></description>
	</item>

	<item>
	  <title>Java中的HashMap</title>
	  <link>//hashmap-in-java</link>
	  <author>Tao He</author>
	  <pubDate>2017-07-11T02:30:12+08:00</pubDate>
	  <guid>//hashmap-in-java</guid>
	  <description><![CDATA[
	     <p>如果你是个Java程序员，那么你不可能对HashMap视而不见，因为你会经常遇到使用它的场景，因此对HashMap的充分了解非常有必要，对我们写出高效可靠的代码很有帮助。</p>

<p>在对HashMap进行深入了解之前，得先清楚HashMap到底是个什么样的存在！</p>

<h4>What&#39;s HashMap</h4>

<p>让我来罗列一些点逐步勾勒出HashMap的轮廓:</p>

<ul>
<li><p>HashMap就是将key做hash算法，然后将hash所对应的数据映射到内存地址，直接取得key所对应的数据。</p></li>
<li><p>底层为哈希数组，数组的每个元素都是一个单链表的头结点</p></li>
<li><p>基于<code>Map</code>接口实现，提供了map操作的泛型类</p></li>
<li><p>允许<code>null</code> values and the <code>null</code> key </p></li>
<li><p>实现了Serializable和Cloneable接口，支持序列化，能被克隆</p></li>
</ul>

<p>轮廓已出，但是仍旧对HashMap感到陌生,甚至都不清楚与Hashtable的区别，因此与Hashtable做一个简单的对比，来辨识出一些HashMap的重要特性。</p>

<h4>HashMap vs. Hashtable</h4>

<ul>
<li><p>Hashtable是线程安全的，HashMap不是</p></li>
<li><p>HashMap 允许<code>null</code> values and the <code>null</code> key, Hashtable不允许</p></li>
<li><p>如果想要预测遍历次序，使用HashMap, Hashtable不易实现</p></li>
</ul>

<p>通过这些概念和理论的梳理，大概对HashMap有了一定感觉，也肯定能够在正确的场景下使用HashMap，但是要说起对HashMap的很多细节时，光知道这些是不够的，需要刨根问底了。
要深入了解HashMap，没有比看其原代码更直接的方式了，但是HashMap的源代码是在太长，如果全部贴进来进行分析和解释，实在没有必要，因此只节选部分关键代码来帮助理解
HashMap的实现和原理。</p>

<h4>HashMap的原理与实现</h4>

<h5>HashMap存储结构</h5>

<p>HashMap的底层存储结构是哈希数组，数组的每个元素都是一个单链表的头节点，链表是用来解决冲突的，如果不同的key映射到了数组的同一位置处，就将其放入单链表中。
链表中节点的数据结构:</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">static class Entry&lt;K,V&gt; implements Map.Entry&lt;K,V&gt; {    
    final K key;    
    V value;    
    // 指向下一个节点    
    Entry&lt;K,V&gt; next;    
    final int hash;    

    // 构造函数。    
    // 输入参数包括&quot;哈希值(h)&quot;, &quot;键(k)&quot;, &quot;值(v)&quot;, &quot;下一节点(n)&quot;    
    Entry(int h, K k, V v, Entry&lt;K,V&gt; n) {    
        value = v;    
        next = n;    
        key = k;    
        hash = h;    
    }    

    public final K getKey() {    
        return key;    
    }    

    public final V getValue() {    
        return value;    
    }    

    public final V setValue(V newValue) {    
        V oldValue = value;    
        value = newValue;    
        return oldValue;    
    }    

    // 判断两个Entry是否相等    
    // 若两个Entry的“key”和“value”都相等，则返回true。    
    // 否则，返回false    
    public final boolean equals(Object o) {    
        if (!(o instanceof Map.Entry))    
            return false;    
        Map.Entry e = (Map.Entry)o;    
        Object k1 = getKey();    
        Object k2 = e.getKey();    
        if (k1 == k2 || (k1 != null &amp;&amp; k1.equals(k2))) {    
            Object v1 = getValue();    
            Object v2 = e.getValue();    
            if (v1 == v2 || (v1 != null &amp;&amp; v1.equals(v2)))    
                return true;    
        }    
        return false;    
    }    

    // 实现hashCode()    
    public final int hashCode() {    
        return (key==null   ? 0 : key.hashCode()) ^    
               (value==null ? 0 : value.hashCode());    
    }    

    public final String toString() {    
        return getKey() + &quot;=&quot; + getValue();    
    }    

    // 当向HashMap中添加元素时，绘调用recordAccess()。    
    // 这里不做任何处理    
    void recordAccess(HashMap&lt;K,V&gt; m) {    
    }  

    // 当从HashMap中删除元素时，绘调用recordRemoval()。    
    // 这里不做任何处理    
    void recordRemoval(HashMap&lt;K,V&gt; m) {    
    }
} 
</code></pre></div>
<ul>
<li><p><code>Entry</code>是单向链表</p></li>
<li><p>它是 <code>HashMap</code>链式存储法对应的链表</p></li>
</ul>

<h5>HashMap几个重要的属性</h5>
<div class="highlight"><pre><code class="language-text" data-lang="text">public class HashMap&lt;K,V&gt;    
    extends AbstractMap&lt;K,V&gt;    
    implements Map&lt;K,V&gt;, Cloneable, Serializable    
{    

    static final int DEFAULT_INITIAL_CAPACITY = 16;    

    static final int MAXIMUM_CAPACITY = 1 &lt;&lt; 30;    

    static final float DEFAULT_LOAD_FACTOR = 0.75f;    

    // 存储数据的Entry数组，长度是2的幂。    
    // HashMap采用链表法解决冲突，每一个Entry本质上是一个单向链表    
    transient Entry[] table;    

    // HashMap的底层数组中已用槽的数量    
    transient int size;    

    int threshold;

    final float loadFactor;    

    // HashMap被改变的次数    
    transient volatile int modCount; 

    ...
}
</code></pre></div>
<ul>
<li><p><code>DEFAULT_INITIAL_CAPACITY</code> - 默认的初始容量（容量为HashMap中槽的数目）是16，且实际容量必须是2的整数次幂</p></li>
<li><p><code>MAXIMUM_CAPACITY</code> - 最大容量（必须是2的幂且小于2的30次方，传入容量过大将被这个值替换）</p></li>
<li><p><code>loadFactor</code> - 加载因子, 默认为0.75</p></li>
<li><p><code>threshold</code> - HashMap的阈值，用于判断是否需要调整HashMap的容量（threshold = 容量*加载因子）</p></li>
</ul>

<p>其中初始容量和加载因子是影响HashMap性能的重要参数。如果这两个测试设置得当，则HashMap可以表现出很好的性能。到此，关于HashMap
的一些关键部分都已和盘托出,更加细节的部分再次就不进一步讨论了。</p>

	  ]]></description>
	</item>

	<item>
	  <title>对AI的一些臆想</title>
	  <link>//think-about-AI</link>
	  <author>Tao He</author>
	  <pubDate>2017-07-10T02:30:12+08:00</pubDate>
	  <guid>//think-about-AI</guid>
	  <description><![CDATA[
	     <p>作为一个码农，长期从事应用研发的工作，于当下热门的人工智能其实一点都没有交集，既不了解机器学习，也没有接触过计算机神经网络，甚至没有使用过Hadoop这种技术，可谓对AI相关的领域所知甚少，但这并不阻碍我对AI产生一些思考和想法，而这些思考和想法的缘起竟然都是这一两年上映的几部AI相关的电影和相关的几本畅销书，其中所涉及的技术和思想也都相对易懂，和机器学习类的书籍形成鲜明对比。</p>

<p>但是通俗易懂并不代表其中的想法和思考无足轻重，相反，我认为如下的一些想法新颖具有启发性：</p>

<p>意识永生，简单的说就是人类的肉体可以死亡，但是把意识转移到了AI中，没有输入人类意识的AI可以通过学习获得人类的智能和意识，输入了人类意识的AI和真正的人类无异，结果就是人类的存在有了另外一种形式，人类的存在摆脱了肉体，智能的载体既可以是碳也可以是硅，这种想法其实很自然，人类要想在宇宙间获得更大的自由和实现更多的可能，肉体凡胎也许始终是一个阻碍和限制，尤其在面对宇宙近于无限的空间和时间时，人类更加渴望脱离这幅躯壳。</p>

<p>当然也有一些电影和书籍对技术的演进速度没有那么乐观，认为意识永生的概念太过理想化，太遥远，而他们所持的态度显得更加保守和务实，认为短期内达到人类智能水平的AI不会出现，AI的智能水平会越来越强，但是还是作为人类社会的一种技术形式存在，对人的能力的极大延伸，既不会超越人类，更不会取代人类。作为对人类的延伸，有可能在未来出现半人半机器的存在。</p>

<p>另一种大胆的想法认为，人类的未来之路就是被AI取代，人类打开了这个潘多拉魔盒，造成了无法逆转的灾难，人类彻底被取代，或被消灭，这种设想和猜测在时下非常流行，甚至有一些AI和计算机方面的专家都发出警告，要人类警惕AI的进一步发展。</p>

<p>以上就是一些我截取的一些有意思的观点和想法，可以看出近几年的一些电影和书籍多半不会深入艰深的技术细节，而多是通过对AI未来的畅想和猜测，以及带入AI这个特殊角色后对人类自身的一种反省和思考，我因受这些想法和思考的影响，也时而会在脑中闪出一下奇怪的想法，我甚至也不明白我为什么会产生这些奇思异想。</p>

<p>我竟想到人类的起源和AI的未来可能有某种相似性，怎么说呢？因为我之前看到过一些文章分析人类可能并不是地球上的土著生物，可能真的是被一种神一样的存在所创造的，无中生有的，而这种神一样的存在现在却只留在了人类的神话中，我突然就想到，这种神一样的存在创造了我们，而后被我们所取代，他们存在过的痕迹也就只留在了我们的神话中，也许我们现在之于AI，就是那个神一样的存在，但我们最终会被AI取代，只留在AI的神话中，就跟没存在过一样......</p>

<p>也许人类的真正归宿还真就是以硅为载体，以此长存于世，胡说八道了这么多，可以止笔了，再有臆想，再来码字</p>

	  ]]></description>
	</item>

	<item>
	  <title>Dimension Units in Android</title>
	  <link>//dimension-units-in-android</link>
	  <author>Tao He</author>
	  <pubDate>2017-04-07T20:30:12+08:00</pubDate>
	  <guid>//dimension-units-in-android</guid>
	  <description><![CDATA[
	     <p>When I start develop application for Android, I am confused about the dimension units many times. So I decide to figure out it clearly through this article.</p>

<p>Android is a mobile operating system that compatible many devices, because of its compatibility, we must think about vary size, density, shape of device&#39;s screen. The <strong>density independence</strong> is a important conception here. Later, I will explain detail about it. Now, we need give the defination of the dimension units and explain the relation of them.</p>

<h3>Dimension Unit</h3>

<h4>Defination</h4>

<ul>
<li><p><strong>px</strong> - An actual pixel on the screen.</p></li>
<li><p><strong>in</strong> - A physical inch on the screen.</p></li>
<li><p><strong>mm</strong> - A physical millimeter on the screen.</p></li>
<li><p><strong>pt</strong> - A point, a common font size unit, on the screen. </p></li>
<li><p><strong>dp</strong> - An abstract unit that is based on the physical density of the screen. These units are relative to a 160 dpi (dots per inch) screen, on which 1dp is roughly equal to 1px. </p></li>
<li><p><strong>sp</strong> - A scale independent pixel, specially designated for text sizes. </p></li>
</ul>

<h4>Relation</h4>
<div class="highlight"><pre><code class="language-text" data-lang="text">+----------------+----------------+---------------+-------------------------------+
| Density Bucket | Screen Density | Physical Size | Pixel Size                    | 
+----------------+----------------+---------------+-------------------------------+
| ldpi           | 120 dpi        | 0.5 x 0.5 in  | 0.5 in * 120 dpi = 60x60 px   | 
+----------------+----------------+---------------+-------------------------------+
| mdpi           | 160 dpi        | 0.5 x 0.5 in  | 0.5 in * 160 dpi = 80x80 px   | 
+----------------+----------------+---------------+-------------------------------+
| hdpi           | 240 dpi        | 0.5 x 0.5 in  | 0.5 in * 240 dpi = 120x120 px | 
+----------------+----------------+---------------+-------------------------------+
| xhdpi          | 320 dpi        | 0.5 x 0.5 in  | 0.5 in * 320 dpi = 160x160 px | 
+----------------+----------------+---------------+-------------------------------+
| xxhdpi         | 480 dpi        | 0.5 x 0.5 in  | 0.5 in * 480 dpi = 240x240 px | 
+----------------+----------------+---------------+-------------------------------+
| xxxhdpi        | 640 dpi        | 0.5 x 0.5 in  | 0.5 in * 640 dpi = 320x320 px | 
+----------------+----------------+---------------+-------------------------------+

+---------+-------------+---------------+-------------+--------------------+
| Unit    | Description | Units Per     | Density     | Same Physical Size | 
|         |             | Physical Inch | Independent | On Every Screen    | 
+---------+-------------+---------------+-------------+--------------------+
| px      | Pixels      | Varies        | No          | No                 | 
+---------+-------------+---------------+-------------+--------------------+
| in      | Inches      | 1             | Yes         | Yes                | 
+---------+-------------+---------------+-------------+--------------------+
| mm      | Millimeters | 25.4          | Yes         | Yes                | 
+---------+-------------+---------------+-------------+--------------------+
| pt      | Points      | 72            | Yes         | Yes                | 
+---------+-------------+---------------+-------------+--------------------+
| dp      | Density     | ~160          | Yes         | No                 | 
|         | Independent |               |             |                    | 
|         | Pixels      |               |             |                    | 
+---------+-------------+---------------+-------------+--------------------+
| sp      | Scale       | ~160          | Yes         | No                 | 
|         | Independent |               |             |                    | 
|         | Pixels      |               |             |                    | 
+---------+-------------+---------------+-------------+--------------------+
</code></pre></div>
<h3>Density Independence</h3>

<p><strong>Screen Density</strong></p>

<p>Screen density is a ratio of resolution and display size, which can be quantified as dots per inch, or <strong>dpi</strong>. The higher the dpi, the smaller each individual pixel is, and the greater clarity.</p>

<p><strong>Density Independence</strong> means the physical size of a dimension unit is only approximately the same on every screen density. The <strong>dp, sp, pt, mm, in</strong> are all density independence. The number of pixels these translate to varies depending on screen density and the <strong>density bucket</strong> the device falls into.</p>

<p><strong>Density Bucket</strong></p>

<blockquote>
<p>There is a myriad of Android devices with varying screen densities, which can range from 100 dpi to over 480 dpi. In order to optimize images for all these screen densities, images need to be created at different resolutions. However, trying to optimize every image resource for every possible density would be incredibly tedious, cause app sizes to be enormous, and simply is not a feasible solution. As a compromise, Android uses density &quot;buckets&quot; that are used to group devices together within certain screen density ranges. This way, apps are only required to optimize images for each density bucket, instead of every possible density. This keeps the workload reasonable for designers and developer, and also prevents the application size from ballooning. Of course, there is a tradeoff, leading to variance in the physical rendered size of images depending on device density.</p>
</blockquote>

<h3>Using Tips:</h3>

<ul>
<li><p>Try to use dp in xml file as much as possiable.</p></li>
<li><p>Use sp for font size.</p></li>
<li><p>Don&#39;t use px as much as possiable.</p></li>
</ul>

	  ]]></description>
	</item>

	<item>
	  <title>Building My Own Mac Working Environment</title>
	  <link>//building-my-own-mac-working-environment</link>
	  <author>Tao He</author>
	  <pubDate>2017-04-02T06:30:12+08:00</pubDate>
	  <guid>//building-my-own-mac-working-environment</guid>
	  <description><![CDATA[
	     <p>In recent 2 years, I have switched my own working environment from Windows to Ubuntu and Mac. For the reason that I switched C/C++ development for Windows to Java development for Android. But I still prefer C++, so I won&#39;t give up C/C++ programming. In this article I will write down detail steps that how I build working environment. This working environment on Mac is a general working environment, not just for Android development but also C/C++ development. Let&#39;s start!</p>

<p>First, I would install some universal tools.</p>

<h3>Universal Tools</h3>

<h4>Install and configure Oh my zsh</h4>

<ul>
<li>Install via curl or wget</li>
</ul>

<p><strong>via curl</strong></p>
<div class="highlight"><pre><code class="language-text" data-lang="text">sh -c &quot;$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)&quot;
</code></pre></div>
<p><strong>via wget</strong></p>
<div class="highlight"><pre><code class="language-text" data-lang="text">sh -c &quot;$(wget https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh -O -)&quot;
</code></pre></div>
<ul>
<li>Configure my prefer feature via edit .zshrc file</li>
</ul>

<p>Add this line to .zshrc file
<code>
plugins=(git vi-mode adb)
</code></p>

<h4>Install and configure iTerm</h4>

<ul>
<li><p>Install lastest release dmg</p></li>
<li><p>Clone solarized git project from github and import color scheme for iTerm2
<code>
git clone https://github.com/altercation/solarized.git
cd iterm2-colors-solarized
./Solarized Dark.itermcolors
</code></p>

<h4>Install userful command line tools</h4></li>
<li><p>Install brew - <code>ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;</code></p></li>
<li><p>Install ctags - <code>brew install ctags</code></p></li>
<li><p>Install cscope - <code>brew install cscope</code></p></li>
<li><p>Install ag - <code>brew install ag</code></p></li>
<li><p>Install grip - <code>brew install grip</code></p></li>
</ul>

<h4>Install and configure Vim</h4>

<ul>
<li>Install vim via source
<code>
git clone https://github.com/vim/vim.git
cd vim 
./configure --with-features=huge --enable-gui=gnome2 --enable-pythoninterp=yes --enable-cscope --enable-gui=auto \ --enable-gtk2-check --enable-gnome-check \ --enable-fail-if-missing --enable-multibyte --enable-fontset \ --with-x --with-compiledby=&quot;Tao He&quot;
make
sudo make install
</code></li>
<li><p>Configure vim
<code>
cd ~
git clone https://github.com/longlinht/vimrc.git ~/.vim_runtime
sh ~/.vim_runtime/install_awesome_vimrc.sh
</code></p>

<h3>Utilities</h3></li>
<li><p>Install Alfred</p></li>
<li><p>Install Dropbox</p></li>
<li><p>Install NutsCloud</p></li>
</ul>

<h3>Install IDE</h3>

<h4>Install and configure Android Studio</h4>

<ul>
<li><p>Install Android Studio via dmg</p></li>
<li><p>Install and configure ideavim plugin 
<code>
Install ideavim in Android Studio
git clone https://github.com/longlinht/VimForIDEs.git
In Android Studio -&gt; File -&gt;Import Settings -&gt; Choose VimForIDEs/ideavim/monokai/settings.jar
</code></p></li>
</ul>

<p>There are some userful application I have installed, but I don&#39;t want to list them becasue their easy installation. Until now, I work comfortably in this woking environment. Maybe I will develop a script to automate this process in the future. If I make it done, I would update this article and supply this script.</p>

	  ]]></description>
	</item>


</channel>
</rss>
