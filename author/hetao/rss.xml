<?xml version="1.0" encoding="UTF-8" ?>

<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
   
      <title>longlinht.github.io/</title>
   
   <link>http://longlinht.github.io/</link>
   <description>编程，读书，思考，旅行，与机器对话，与人交谈，对神发问，探索，体验人生美丽的风景</description>
   <language>en-uk</language>
   <managingEditor> Tao He</managingEditor>
   <atom:link href="rss" rel="self" type="application/rss+xml" />
   
	<item>
	  <title>加速Gradle构建</title>
	  <link>//speed-up-gradle-build</link>
	  <author>Tao He</author>
	  <pubDate>2019-03-09T20:20:12+00:00</pubDate>
	  <guid>//speed-up-gradle-build</guid>
	  <description><![CDATA[
	     <p>最近刚换工作，来这家新公司没几天，还在熟悉和适应阶段，leader也没安排什么特别的事情，只是说有空可以看看我们工程Gradle Build速度慢的问题。总算接到一个方向比较明确的任务，正好可以从工程的构建流程入手，可以一窥整个工程的结构和依赖。因为Gradle构建速度慢这个问题，其实有一些常见的排查方法，解决问题第一步，还是用最快的排查法，首先排除一些最常见的造成构建速度缓慢的原因。但是要找出构建速度慢的问题也需要将问题分情况来看，分两种情况，一种是在开发过程中的构建和正式发版上线的构建，这两种构建通常是相同的，但有时为了节约开发过程中的构建时间，会做一些特殊的设置和开启关闭一些选项来加速开发过程中的构建，因此，这两种情况面临的问题其实是类似的，因为还不是很清楚leader更在意的是开发过程中的构建时间还是发布上线的构建，因此我决定把这两种情况合二为一，罗列出所有的加速建议:</p>

<ul>
<li>检查是否使用了最新的Android Gradle Plugin</li>
</ul>

<p>当然了，这个排查不是硬性的，得看实际情况，但是如果能升到最新的插件版本，建议升级，随着插件的逐步完善，性能也会有很大提升</p>

<ul>
<li>尽量少用Module</li>
</ul>

<p>有技术博文称Module的构建时间可能是jar和aar的4倍（有待验证）</p>

<ul>
<li>使用Property选项</li>
</ul>

<p>在gradle.property文件中添加如下两行代码：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">org.gradle.daemon=true
org.gradle.parallel=true
org.gradle.configureondemand=true

// 这些值可以按实际情况设置
org.gradle.jvmargs=-Xmx2048m -XX:MaxPermSize=512m -XX:+HeapDumpOnOutOfMemoryError -Dfile.encoding=UTF-8
</code></pre></div>
<ul>
<li><p>避免在 minSdkVersion &lt; 21 时使用Multidex</p></li>
<li><p>Disable Multi-APK(限开发中的构建)</p></li>
</ul>

<p>如果你没有使用ABI或者Density splits， 你可以略过，如果你使用了，可以通过在Gradle文件里添加如下代码关闭这个选项，可以节省开发中的很多构建时间:</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">android {
   if (project.hasProperty(‘devBuild’)){
      splits.abi.enable = false
      splits.density.enable = false
   }
}
</code></pre></div>
<ul>
<li>最小化打包资源(限开发中的构建)</li>
</ul>

<p>在开发过程中，其实没必要打包所有App用到的资源，我们可以通过配置来控制开发构建中要打包的资源, 可在Gradle文件中加入如下代码:</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">productFlavors {
  development {
    minSdkVersion 21
    //only package english translations, and xxhdpi resources   
    resConfigs (“en”, “xxhdpi”)
  }
}
</code></pre></div>
<p>别小看这点改动，可能节省你很多开发中的构建时间</p>

<ul>
<li>Disable PNG 优化 </li>
</ul>

<p>PNG优化是默认开启的，但是在开发中的构建没什么必要，建议关闭 :</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">android {
  if (project.hasProperty(‘devBuild’)){
    aaptOptions.cruncherEnabled = false
  }
}
</code></pre></div>
<ul>
<li>使用Instant Run</li>
</ul>

<p>虽然这个功能有时会有一些问题，但是在加速构建方面还是很有用的</p>

<ul>
<li>避免很耗时的计算</li>
</ul>
<div class="highlight"><pre><code class="language-text" data-lang="text">def buildDateTime = new Date().format(‘yyMMddHHmm’).toInteger()
android {
  defaultConfig {
    versionCode buildDateTime
 }
}
</code></pre></div>
<p>这种代码在开发构建种就不要出现了， 因为每次构建都要重新一次额外的处理和打包，可以改为这样:</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">def buildDateTime = project.hasProperty(‘devBuild’) ? 100 : new Date().format(‘yyMMddHHmm’).toInteger()
android {
  defaultConfig {
    versionCode buildDateTime
 }
}
</code></pre></div>
<p>还有一个陷阱是Crashlytics build IDs, Crashlytics在每一次构建时都会产生一个新的id，一行代码就可将这个选项关闭:</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">apply plugin: ‘io.fabric’
android {
  buildTypes {
    debug {
      ext.alwaysUpdateBuildId = false
    }
  }
}
</code></pre></div>
<ul>
<li>避免使用动态的依赖版本号</li>
</ul>

<p>使用动态的依赖版本号会导致Gradle检查新的依赖版本，导致解析时间加长, 严重拖慢构建速度</p>

<ul>
<li>开启Gradle Cache</li>
</ul>
<div class="highlight"><pre><code class="language-text" data-lang="text">org.gradle.caching=true
</code></pre></div>
<p>在将这些建议和排查方法逐一的排查验证了一遍以后，发现这些Tips公司的工程都已采纳，一些坑也都完美的躲过，要想在这种情况下再去加速Gradle的构建速度，可就没那么容易了，必须通过一些方法，细化整个构建过程，找出一些耗时过长的操作，幸运的是，Gradle已经提供了这种功能，可以输出一个Gradle构建的profile报告，只要在苟建时添加一个参数即可。</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">./gradlew :android:assembleDebug --profile
</code></pre></div>
<p>构建结束后会在build的子目录下生成一个html文件的报告：</p>

<p><img src="https://wx2.sinaimg.cn/mw690/7033bf1dly1g295fu83jyj20lz0ccabp.jpg" alt=""></p>

<p>整个报告里面会比较详细的列出构建过程中Configuration，Dependency Resolution， Task Execution的具体耗时，非常详细和直观，有助于分析构建每个阶段的耗时。建议在分析构建过程的时候用起来。我就用这个选项也为公司的工程打了这样一份报告出来，并没有什么特别的发现，主要的耗时还好在app模块。那这样下去还是不能解决问题，因为我们的发布和上线构建是在Jekins上打包，看了打包脚本也并没有太多特殊的地方，于是我想到用Gradle build scan插件来进一步审视构建内部的情况。</p>

<p>为自己的工程创建build scan其实比较简单，具体步骤如下:</p>

<ol>
<li>在Project的build.gradle文件添加下面几行代码：</li>
</ol>
<div class="highlight"><pre><code class="language-text" data-lang="text">buildscript {
    repositories {
        google()
        jcenter()
    }
    dependencies {
        classpath &#39;com.android.tools.build:gradle:3.0.0&#39;

        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
    }
}

// 这7行是添加的
plugins {
    id &#39;com.gradle.build-scan&#39; version &#39;1.16&#39;
}
buildScan {                     
    licenseAgreementUrl = &#39;https://gradle.com/terms-of-service&#39;
    licenseAgree = &#39;yes&#39;
}

allprojects {
    repositories {
        google()
        jcenter()
    }
}
</code></pre></div>
<ol>
<li>在控制台执行命令 </li>
</ol>
<div class="highlight"><pre><code class="language-text" data-lang="text">./gradlew build --scan
</code></pre></div>
<ol>
<li>命令执行完后会给出一个网址，打开网址根据提示就可以得到相应的构建审核内容，如下图:</li>
</ol>

<p><img src="https://wx1.sinaimg.cn/mw690/7033bf1dly1g297i2yza3j20zh0ff41e.jpg" alt=""></p>

<p>经过这个插件工具的分析，也仍旧没有发现什么异常，看来公司的工程就是因为太大了，每个版本的自然增长导致当前的构建比很早一个版本的慢，虽然这次的调研没有提升打包速度，但是整个调研的构成让我了解了很多与Gradle有关的东西，也算是收获不少, 没有白忙活。</p>

	  ]]></description>
	</item>

	<item>
	  <title>移动应用中的典型页面</title>
	  <link>//typical-pages-in-mobile-app</link>
	  <author>Tao He</author>
	  <pubDate>2019-02-18T20:20:12+00:00</pubDate>
	  <guid>//typical-pages-in-mobile-app</guid>
	  <description><![CDATA[
	     <p>今天这篇文章不做具体技术细节的探讨，而是来观察诸多移动应用中反复出现，具有典型特征和重要作用的一些页面来一窥一般移动应用的基本结构。这些反复出现的页面原型可以归纳为如下六类:</p>

<ul>
<li><p>登录注册页面 - 但凡有账户系统的业务这种页面就不可或缺</p></li>
<li><p>流式页面(内容，信息流) - 这种页面可能就是App主页，用户可以通过滑动页面中的列表去看到多余一屏的内容</p></li>
<li><p>详情页面 - 这个页面是对流式页面的补充，可能流式页面展示的信息只是缩略图或者摘要，用户想要看到更多详细的内容就需要跳转至此页面</p></li>
<li><p>创建页面 - 是App承载的内容的来源页面，用户可通过此页面创建内容和资源</p></li>
<li><p>用户主页 - 用户账户信息的详情页</p></li>
<li><p>设置页面 - 这个页面几乎是每一个App都会有的，无论你的App有多简单，也是需要这个页面来允许用户对App做出配置</p></li>
</ul>

<p>除了这六种些典型的主要页面以外，还会经常遇到一些扩展的页面，或者说是子页面，包括:</p>

<ul>
<li><p>闪屏页面(Splash) </p></li>
<li><p>新手引导</p></li>
<li><p>地图视图</p></li>
<li><p>消息(聊天)页面</p></li>
<li><p>日历</p></li>
<li><p>媒体播放页面</p></li>
</ul>

<p>所有App，无论规模大小，其实都是这些典型页面的组合构建出来的，所以在开发过程中需要注意你所开发的页面是不是这些典型页面中的一种，如果不是，需要你反思这个页面是否需要，设计是否合理。虽然国内一些超级App已经变得非常巨大和复杂，但是也并没有标新立异，超出这些典型页面的范围，一来需要追求用户体验的一致性，二来这种做法已经成了一个大家默认遵守的规范。所以用户在使用不同的App时没有强烈的陌生感，就如同一个会开车的人，换辆其他品牌的车他仍旧会开，并不会产生疏离感。如果细细观察下来，一些扩展页面的情况会很多，但是主要的典型页面应该不会超过如上的六种。</p>

	  ]]></description>
	</item>

	<item>
	  <title>解决ScrollView内容显示不全</title>
	  <link>//scrollview-can-not-display-whole-content</link>
	  <author>Tao He</author>
	  <pubDate>2018-12-04T20:20:12+00:00</pubDate>
	  <guid>//scrollview-can-not-display-whole-content</guid>
	  <description><![CDATA[
	     <p>这个问题其实只要使用过<code>ScrollView</code>，可能都有机会遇到，问题的表现就是<code>ScrollView</code>包裹内容的高度超过<code>ScrollView</code>可视高度的话，被包裹的内容就会显示不全，最底部的内容永远也看不到了，这种情况肯定是无法接受的， 解决这个问题比较简单，其实就是简单的一句设置语句:</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">android:fillViewport=&quot;true&quot;
</code></pre></div>
<p>虽然这样可以解决问题，但是还是心中还有疑惑，我放在<code>ScrollView</code>中的<code>LinearLayout</code>是的高度是设置了<code>mactch_parent</code> 属性的，现在看来并没有生效，我猜测可能是<code>ScrollView</code>重写了测量方法导致的，于是去看<code>ScrollView</code>的<code>onMeasure</code> 方法:</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">@Override
protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
  super.onMeasure(widthMeasureSpec, heightMeasureSpec);

  if (!mFillViewport) {
      return;
  }

  final int heightMode = MeasureSpec.getMode(heightMeasureSpec);
  if (heightMode == MeasureSpec.UNSPECIFIED) {
      return;
  }

  if (getChildCount() &gt; 0) {
      final View child = getChildAt(0);
      final int widthPadding;
      final int heightPadding;
      final int targetSdkVersion = getContext().getApplicationInfo().targetSdkVersion;
      final FrameLayout.LayoutParams lp = (LayoutParams) child.getLayoutParams();
      if (targetSdkVersion &gt;= VERSION_CODES.M) {
          widthPadding = mPaddingLeft + mPaddingRight + lp.leftMargin + lp.rightMargin;
          heightPadding = mPaddingTop + mPaddingBottom + lp.topMargin + lp.bottomMargin;
      } else {
          widthPadding = mPaddingLeft + mPaddingRight;
          heightPadding = mPaddingTop + mPaddingBottom;
      }

      final int desiredHeight = getMeasuredHeight() - heightPadding;
      if (child.getMeasuredHeight() &lt; desiredHeight) {
          final int childWidthMeasureSpec = getChildMeasureSpec(
                  widthMeasureSpec, widthPadding, lp.width);
          final int childHeightMeasureSpec = MeasureSpec.makeMeasureSpec(
                  desiredHeight, MeasureSpec.EXACTLY);
          child.measure(childWidthMeasureSpec, childHeightMeasureSpec);
      }
  }
}
</code></pre></div>
<p>很明显，在没有设置fillViewport属性为true时，<code>ScrollView</code>并没有去测量子View的高度，这就导致超过一屏内容的<code>View</code>的高度无法正确测量。解决了这个问题以后PM又提了一个底部内容有一部分被遮挡，滑不出的问题，布局代码是这样的:</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">&lt;ScrollView
    android:layout_width=&quot;match_parent&quot;
    android:layout_height=&quot;wrap_content&quot;
    android:fillViewport=&quot;true&quot;
    android:layout_below=&quot;@id/tv_title&quot;
    android:layout_marginBottom=&quot;84dp&quot;
    &gt;

  &lt;com.zhy.view.flowlayout.TagFlowLayout
      android:id=&quot;@+id/tfl_label&quot;
      zhy:max_select=&quot;-1&quot;
      android:layout_width=&quot;match_parent&quot;
      android:layout_height=&quot;wrap_content&quot;
      android:layout_marginTop=&quot;14dp&quot;
      android:layout_marginStart=&quot;12dp&quot;
      android:layout_marginEnd=&quot;12dp&quot;
      &gt;
  &lt;/com.zhy.view.flowlayout.TagFlowLayout&gt;

&lt;/ScrollView&gt;
</code></pre></div>
<p>看了代码后发现被遮挡区域的高度差不多就是这个<code>TagFlowLayout</code>的<code>layout_marginTop</code>的值，当我去掉这个属性的设置后，遮挡的问题没有了，换作<code>paddingTop</code>后也没有问题，就是不能用<code>marginTop</code>，好吧，这个<code>ScrollView</code>的默认设定也是很奇葩啊！</p>

	  ]]></description>
	</item>

	<item>
	  <title>解决闹人的can not found symbol BR问题</title>
	  <link>//br-not-found</link>
	  <author>Tao He</author>
	  <pubDate>2018-12-02T20:20:12+00:00</pubDate>
	  <guid>//br-not-found</guid>
	  <description><![CDATA[
	     <p>最近公司研发的这个App是我从零到一搭建的，在框架搭建时分别使用了Databinding和Room，今天在做新需求时需要向Room中的实体类新添加一个字段，在写完了所有相关的逻辑后，build工程，所有自动生成的Databinding类都报错，build log中并没有指向任何具体报错的Databinding类，这就令人很困惑，因为这个需求的添加并没有改动任何Databinding的类，在不知所以的情况下，那就尝试其他方法解决，之前我在一个技术博客上看到过一个Databinding类的Troubleshooting: </p>

<p><strong>Troubleshooting the Issues with Binding Class</strong></p>

<ul>
<li><p>Make sure you have the proper dataBinding.enabled = true in gradle and trigger &quot;Sync with Gradle&quot;</p></li>
<li><p>Open the layout file and ensure that the XML file is valid and is wrapped in a <layout> tag.</p></li>
<li><p>Check the layout file for the correct name i.e activity_main.xml maps to ActivityMainBinding.java.</p></li>
<li><p>Run File =&gt; Invalidate Caches  Restart to clear the caches.</p></li>
<li><p>Run Project =&gt; Clean and Project =&gt; Re-Build to regenerate the class file.</p></li>
<li><p>Restart Android Studio again and then try the above steps again.</p></li>
</ul>

<p>对这几条Troubleshooting依次尝试后，报错依旧，这就非常恼人，然后我又怀疑是不是build log打印的信息不全，导致跑偏了定位问题的方向，因此在project Gradle中更改了错误信息的条数:</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">allprojects {
    gradle.projectsEvaluated {
        tasks.withType(JavaCompile) {
            options.compilerArgs &lt;&lt; &quot;-Xmaxerrs&quot; &lt;&lt; &quot;4000&quot;
            options.compilerArgs &lt;&lt; &quot;-Xmaxwarns&quot; &lt;&lt; &quot;4000&quot;
        }
    }
}
</code></pre></div>
<p>在打印更多错误信息以后，仍旧看不出错误的源头在哪里。排查到这一步，可能就需要最笨的办法了，倒推法，在依次回退了可能导致这个错误的代码后，算是定位到了出错的修改， 就是Room的实体类添加了一个新的字段导致的，这就很奇怪，添加一个字段不是非常正常的操作吗？就算添加的字段不符合规范，那也应该是Room报错，关Databinding什么事，一开始真是一头雾水，但是我猜想可能是Room和Databinding这两类组件都自动生成了很多代码，在生成Room代码的时候的出错导致Databinding类生成失败，所以编译时表现为Databinding类找不到，这下问题变得清晰起来，问题的源头应该还是Room导致的，最后发现其实就是一个小的细节导致的，在给Room实体类添加字段的时候是private的，但是并没有提供getter和setter方法，因此导致编译失败，只是错误的表现误导了我的思路。白白浪费了几个小时排查这种因为违反了组件使用规范的问题，以后必须引以为戒，再次重申这个恼人的细节:</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">@Entity(tableName = &quot;messages&quot;)
public class ChatMessageEntity {

    @NonNull
    @PrimaryKey(autoGenerate = true)
    //common field
    private int id;

    @SerializedName(&quot;title&quot;)
    private String title;

    @NonNull
    public int getId() {
        return id;
    }

    public void setId(@NonNull int id) {
        this.id = id;
    }

    public String getTitle() {
        return title;
    }

    public void setTitle(String title) {
        this.title = title;
    }

    public String getText() {
        return text;
    }

    public void setText(String text) {
        this.text = text;
    }
}
</code></pre></div>
<ul>
<li><p>被注解为Entity的实体类添加字段，如果是private的必须提供getter和setter方法，或者修饰为public的</p></li>
<li><p>如果违反了这个规则，变异错误信息不一定会指向这个错误</p></li>
</ul>

	  ]]></description>
	</item>

	<item>
	  <title>记一次看似困难的Debug</title>
	  <link>//record-a-debug-process</link>
	  <author>Tao He</author>
	  <pubDate>2018-11-29T20:20:12+00:00</pubDate>
	  <guid>//record-a-debug-process</guid>
	  <description><![CDATA[
	     <p>今年把自己的手机换成了Android，拿到新机后就想找到一款手写笔记的App，因为在iOS用过一款体验很好，还用那个写了一篇游记，在试用了十几款此类的Andorid App后最终找到了一款名为INKredible的手写笔记App，刚开始用的时候很不顺手，都想卸载了，但是经过一番摸索后找到了技巧，再去试用后有一种惊艳的感觉，今天在地铁通勤的时候竟然用它谢了一篇技术博文，并已图片的形式到了出来，全文如下:(字迹潦草，读者莫怪，其实如果以正楷的形式书写, 效率较差，体验会大打折扣).</p>

<p><img src="https://wx3.sinaimg.cn/mw690/7033bf1dly1g0aqh53p3dj20m80zkdlh.jpg" alt=""></p>

	  ]]></description>
	</item>

	<item>
	  <title>使用VideoView实现视频开屏页</title>
	  <link>//play-video-in-raw-folder</link>
	  <author>Tao He</author>
	  <pubDate>2018-11-27T17:20:12+00:00</pubDate>
	  <guid>//play-video-in-raw-folder</guid>
	  <description><![CDATA[
	     <p>今天PM提了一个视频开屏页的需求，需要在用户第一次使用时播放一个开屏视频，乍一看，挺简单一需求，但是也或多或少碰到了一些坑，也发现了Android资源编译的一个问题，本着研发之事无小事的原则，还是要记录下踩坑经验和发现的问题。整个实现过程一共两三个小时，逐步解决了以下问题:</p>

<h4>视频全屏</h4>

<p>看到这个问题的第一反应就是把<code>VideoView</code> 的宽高设置为<code>match_parent</code>, 并且保证父容器也是<code>match_parent</code> 根布局, 但是事实没那么简单，视频播放后并没有完全全屏，在我的开发机上视频底部有一条细细的白边，很明显视频没有完全全屏。后来又想到设置<code>MediaPlayer</code>的视频缩放模式:</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">mPlayer.setVideoScalingMode(MediaPlayer.VIDEO_SCALING_MODE_SCALE_TO_FIT_WITH_CROPPING);
</code></pre></div>
<p>设置了两种模式以后都没有效果，这说明<code>VideoView</code>本身没有全屏，没有铺满整个屏幕，所以需要根据屏幕大小动态设置<code>VideoView</code>的尺寸，所以用自定义View实现。
自定义一个继承自<code>VideoView</code>的类来满足要求，具体实现如下:</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">public class FullScreenVideoView extends VideoView {
    public FullScreenVideoView(Context context) {
        super(context);
    }

    public FullScreenVideoView(Context context, AttributeSet attrs) {
        super(context, attrs);
    }

    public FullScreenVideoView(Context context, AttributeSet attrs, int defStyleAttr) {
        super(context, attrs, defStyleAttr);
    }

    @Override
    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
        int width = getDefaultSize(0, widthMeasureSpec);
        int height = getDefaultSize(0, heightMeasureSpec);
        setMeasuredDimension(width, height);
    }
}
</code></pre></div>
<p>这样比较顺利的实现了全屏，接下来需要解决第二个问题:</p>

<h4>循环播放</h4>

<p>这个比较容易，几乎就是一行代码，是对播放器的设置:</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">mBinding.vvSplash.setOnPreparedListener(new MediaPlayer.OnPreparedListener() {
    @Override
    public void onPrepared(MediaPlayer mp) {
        mPlayer = mp;
        mPlayer.setLooping(true);
        mPlayer.setVideoScalingMode(MediaPlayer.VIDEO_SCALING_MODE_SCALE_TO_FIT_WITH_CROPPING);
        mPlayer.start();

        mPlayer.setVideoScalingMode();
    }
});
</code></pre></div>
<p>第三个问题:</p>

<h4>音量切换</h4>

<p>这个问题也比较简单，主要是对播放器的操作，虽然简单但是需要注意以下几个问题:</p>

<ul>
<li>要保证操作的播放器一直是同一个</li>
<li>调用setVolume以后不需要再调用start</li>
<li>恢复音量时最好的方式是通过系统服务(AudioManager)去获取当前音量，但是这个需求只要设置为1就可以了</li>
</ul>

<p>到此，问题都逐一解决了，最后需要记录下一个Android资源编译的问题，问题如下:</p>

<blockquote>
<p>我的工程目录res/drawable下有一个图片文件名为splash.png，开屏视频的MP4文件在res/raw下，名为splash.mp4，编译工程运行后一直报错：
<code>无法播放此视频</code></p>
</blockquote>

<p>当时还以为我代码哪里写错了，检查发现没有错误，后来怀疑路径是不是错了，但断点调试也没问题，就很纳闷，后来拷贝了其它视频播放，发现是正常的，我才想到可能是资源文件名字冲突了，我给开屏视频文件重命名以后一切OK了，冲突在编译期间竟然没有报错，感觉有点坑，这样看来Android在编译资源时并没有区分res/drawable目录和res/raw目录，这个问题需要重视起来，不然会比较恼人。</p>

	  ]]></description>
	</item>

	<item>
	  <title>MultidexApplication相关的一个crash</title>
	  <link>//multidex-application-crash</link>
	  <author>Tao He</author>
	  <pubDate>2018-11-25T20:20:12+00:00</pubDate>
	  <guid>//multidex-application-crash</guid>
	  <description><![CDATA[
	     <p>最近在内测的一个App在内测开始后有用户反馈启动就crash的问题，后来拿到用户的信息后发现几个crash的机器都是4.4的机器，因为现在真实用户使用4.4系统的用户真的是不多了，就没怎么在意，但是在阿里云移动测试平台进行兼容性测试的时候，这个问题必现，并且都出现在4.4的机器上，查看兼容性测试报告，都是同一个crash，崩溃的堆栈记录了下来:</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">FATAL EXCEPTION: main Process: com.ross.android, PID: 9282 java.lang.RuntimeException: Unable to get provider com.readystatesoftware.chuck.internal.data.ChuckContentProvider: 
java.lang.ClassNotFoundException: Didn&#39;t find class &quot;com.readystatesoftware.chuck.internal.data.ChuckContentProvider&quot; on path: DexPathList[[zip file &quot;/data/app/com.ross.android-1.apk&quot;],nativeLibraryDirectories=[/data/app-lib/com.ross.android-1, /vendor/lib, /system/lib]] 
at android.app.ActivityThread.installProvider(ActivityThread.java:5060) 
at android.app.ActivityThread.installContentProviders(ActivityThread.java:4631) 
at android.app.ActivityThread.handleBindApplication(ActivityThread.java:4571) 
at android.app.ActivityThread.access$1500(ActivityThread.java:155) 
at android.app.ActivityThread$H.handleMessage(ActivityThread.java:1406) 
at android.os.Handler.dispatchMessage(Handler.java:110) 
at android.os.Looper.loop(Looper.java:193)
at android.app.ActivityThread.main(ActivityThread.java:5341) 
at java.lang.reflect.Method.invokeNative(Native Method) 
at java.lang.reflect.Method.invoke(Method.java:515) 
at com.android.internal.os.ZygoteInit$MethodAndArgsCaller.run(ZygoteInit.java:830) 
at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:646) 
at dalvik.system.NativeStart.main(Native Method) Caused by: java.lang.ClassNotFoundException: Didn&#39;t find class &quot;com.readystatesoftware.chuck.internal.data.ChuckContentProvider&quot; on path: DexPathList[[zip file &quot;/data/app/com.ross.android-1.apk&quot;],nativeLibraryDirectories=[/data/app-lib/com.ross.android-1, /vendor/lib, /system/lib]] at dalvik.system.BaseDexClassLoader.findClass(BaseDexClassLoader.java:56) 
at java.lang.ClassLoader.loadClass(ClassLoader.java:497) 
at java.lang.ClassLoader.loadClass(ClassLoader.java:457)
at android.app.ActivityThread.installProvider(ActivityThread.java:5045) 
at android.app.ActivityThread.installContentProviders(ActivityThread.java:4631)
at android.app.ActivityThread.handleBindApplication(ActivityThread.java:4571) 
at android.app.ActivityThread.access$1500(ActivityThread.java:155) 
at android.app.ActivityThread$H.handleMessage(ActivityThread.java:1406) 
at android.os.Handler.dispatchMessage(Handler.java:110) 
at android.os.Looper.loop(Looper.java:193) 
at android.app.ActivityThread.main(ActivityThread.java:5341) 
at java.lang.reflect.Method.invokeNative(Native Method) at java.lang.reflect.Method.invoke(Method.java:515)
at com.android.internal.os.ZygoteInit$MethodAndArgsCaller.run(ZygoteInit.java:830) 
at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:646) 
at dalvik.system.NativeStart.main(Native Method)
</code></pre></div>
<p>看到这个崩溃的记录后，赶紧去查看到了build.gradle中multiDexEnabled选项，果然是true，处于打开状态，然后看了本App的Application竟然并没有继承自<code>MultiDexApplication</code>，在<code>Application</code>的onCreate的方法中也没有调用<code>MultiDex.install(this)</code>, 这也就难怪在4.4中出现这个崩溃了，因为貌似这个崩溃只出现在 api&lt;21 的情况下, 因为我平时的开发机都是8.0的系统，所以这个问题一直没有暴露出来, 直到将这个App安装在用户的机器上，崩溃出现了，这个问题解决起来其实很简单，要么将本App的Application继承自<code>MultiDexApplication</code>, 要么在Application中的onCreate中调用<code>MultiDex.install(this)</code>。就是这么简单,那这么简单的一个问题为什么要专写一篇来记录呢？其实也是因为这次这个内测阶段的crash的问题很典型，它就是在开发工程中被忽略，或者现有环境没有覆盖到，导致崩溃出现在了用户的机器上，其实这类问题是可以在发布版本前就能避免的，算是一次很好的教训。 解决方案再明确下:</p>

<ul>
<li>方法一 </li>
</ul>
<div class="highlight"><pre><code class="language-text" data-lang="text">TestApplcation extends MultiDexApplication {


}
</code></pre></div>
<ul>
<li>方法二</li>
</ul>
<div class="highlight"><pre><code class="language-text" data-lang="text">TestApplcation extends Application {

    @Override
    public void onCreate() {
        super.onCreate();

        MultiDex.install(this);
    }

}
</code></pre></div>
	  ]]></description>
	</item>

	<item>
	  <title>读《决断力》</title>
	  <link>//read-make-a-better-decision</link>
	  <author>Tao He</author>
	  <pubDate>2018-10-15T18:20:12+00:00</pubDate>
	  <guid>//read-make-a-better-decision</guid>
	  <description><![CDATA[
	     <p>今年可能年景不好，运气不佳，再加上自己昏招频频，感觉今年非常不顺，也发现自己很不会决策，没有很好的决断力。于是就想找一本决断力相关的书来看看，找了一下，还果然有这个书名的一本书，而且豆瓣上评价不错，于是发送到Kindle，趁着地铁通勤的时间很快看完了，因为是中文版，看起来比较快，感觉正本书还是比较平实的，很多决策的方法可操作性强，因为这次使用了Kindle自带的标注功能，在看的过程中随手标注了重点和一些精彩的段落，整本书看完后，对标注和笔记做了整理，现记录出来：</p>

<p><strong>正常情况下，你的思维几乎会对所有发生的事情做出直觉反应并形成某种看法。</strong></p>

<ul>
<li><p>在你的精神世界里，很显然，你极少被某个问题难住。</p></li>
<li><p>在尚未熟悉某个人之前，你已经产生了喜欢或厌恶的感觉；</p></li>
<li><p>当然，你也可能不知道为什么自己会信任或怀疑陌生人；</p></li>
<li><p>或是在未对某一公司做出任何分析评估的情况下就认定它一定会成功。</p></li>
</ul>

<p><strong>聚光效应</strong></p>

<blockquote>
<p>卡尼曼认为，人们匆忙做出结论，是由于我们对眼前的信息关注过多，却对视线之外的信息不加考量。</p>
</blockquote>

<p>从本质上来讲，这又恰恰是决策的核心难题：灯光内的东西很少会是我们做出一个好的决定所需要的全部,但我们时常会忘了调整聚光灯的方向。 人们在决策时遇到的难题，即主观偏见和非逻辑性。</p>

<p><strong>研究人员通过对比发现&quot;决策流程更为重要——比分析重要 6倍&quot;。</strong></p>

<p><strong>唯一被广泛采用的决策方法是列出利弊清单。</strong></p>

<p><strong>影响决策的屏障</strong></p>

<ul>
<li><p>思维狭隘</p></li>
<li><p>限制你的选择范围</p></li>
<li><p>证实倾向</p></li>
</ul>

<p>当人们有机会从现实世界中搜集信息时，人们更可能去搜集那些支持他们已有的看法、信仰和行动的信息</p>

<p>证实倾向令人感到些许恐惧的地方在于：当我们希望某件事情是真实的时候，便会关注支持这件事是真实性的信息，然后，当我们从中得出自己想要的结论时，还要庆幸自己做了一个非常理智的决定。天啊！</p>

<ul>
<li><p>短期情绪</p></li>
<li><p>过于自信</p></li>
</ul>

<p>因为相对于自己存在的偏见，人们往往更容易发现他人的偏见。</p>

<blockquote>
<p>利弊清单法不能校正上述问题，但是 WRAP流程法可以做到</p>
</blockquote>

<p><strong>WRAP</strong></p>

<ul>
<li><p>Widen your options（拓宽选择空间）</p></li>
<li><p>Redlity- test your assumptions（把假设放到现实中检验）</p></li>
<li><p>Attain distance before deciding（在做出决策前，留出一段距离来考虑）</p></li>
<li><p>Prepare to be wrong（做好出错的准备）</p></li>
</ul>

<p><strong>思维狭隘</strong></p>

<ul>
<li><p>青少年们易变得思维狭隘，这也就是阻碍决策的第一个因素。</p></li>
<li><p>事实证明，在做决定时，机构和组织的行为倒是跟青少年的很相像。</p></li>
<li><p>青少年陷入思维狭隘之中。他们意识不到选项的存在。</p></li>
<li><p>可供我们选择的选项常常比预期的要丰富得多。</p></li>
</ul>

<p><strong>为什么我们会陷入思维狭隘之中？</strong></p>

<p>专注于目前的选择意味着对其他选项视而不见。</p>

<p><strong>我们如何避开思维狭隘？</strong></p>

<ul>
<li><p>考虑机会成本。</p></li>
<li><p>试试“消失选项测试”：现有的选择消失后你会怎么做？</p></li>
<li><p>身在其外——作为一个决策顾问，更容易发现思维的狭隘。“是或否”决定应该引起重视。</p></li>
</ul>

<p><strong>多目标追踪</strong></p>

<ul>
<li><p>多目标追踪使我们时刻保持自省。</p></li>
<li><p>那些考虑多个选择的执行者能更快地做出决定。</p></li>
<li><p>极端的多目标追踪是有害的</p></li>
<li><p>最明智的决定可能是将预防心态的谨慎和进取心态的热情结合在一起</p></li>
<li><p>当生活提供给我们“非此即彼”的选择时，我们应该勇敢地去探索是否存在一个“两者都选”的正确答案。</p></li>
<li><p>多目标追踪等于同时思考一个以上的选择。</p></li>
<li><p>当你同时考虑多个选择的时候，你认识到了问题的“形状”。</p></li>
<li><p>考虑数个选择可能引起决策瘫痪，因此我们只可再多考虑一至两个选择。这样，得到的收益是巨大的。</p></li>
<li><p>警惕&quot;虚假选择&quot;。</p></li>
</ul>

<p><strong>当你需要更多选择，却感觉陷入僵局时，那就去寻找已经帮你解决了问题的人吧。</strong></p>

<p><strong>寻找已经帮你解决了问题的人</strong></p>

<ul>
<li><p>从外部寻找：竞争分析，基准衡量，最优方法。</p></li>
<li><p>从内部寻找：找到你的亮点。</p></li>
</ul>

<p><strong>为了变得主动，请将你的精细选择编入决策的&quot;问题列表&quot;。</strong></p>

<p><strong>审核清单阻止人们犯错误，问题列表刺激新思路的产生。</strong></p>

<p><strong>第三个寻找创意的地方：着眼于远处。</strong></p>

<p><strong>假设积极意图和写婚姻日记是被心理学家称作“考虑相反的情况”的两个例</strong></p>

<p><strong>三种对抗证实倾向的方法：</strong></p>

<ul>
<li><p>第一，我们可以使他人更容易地提出反对意见</p></li>
<li><p>第二，我们可以提出更有可能使相反信息显现的问题</p></li>
<li><p>第三，我们可以通过考虑相反情况的方法来对自己进行核查</p></li>
</ul>

<p><strong>证实倾向指的是搜寻到的正是我们初步假设的信息（常常是有利于自己的）</strong></p>

<p><strong>警告：在角色划分明确的情况下，探究性问题可能产生事与愿违的效果。</strong></p>

<p><strong>非证实倾向的极端形式：我们能否强迫自己考虑直觉的对立面？</strong></p>

<p><strong>我们甚至可以通过故意犯错来测试自己的假设。</strong></p>

<p><strong>因为我们会自然地去寻找自我证实的信息，所以我们需要训练自己从相反的原则考虑问题。</strong></p>

<p><strong>当我们依据评论做出决定时，我们便是在承认两件事情：</strong></p>

<ul>
<li><p>我们自身搜集产品真实情况的能力是有限的，而且我们的判断还会受限于制造公司对产品信息的失真传达。</p></li>
<li><p>基于上述原因，用他人的平均评价弥补自己印象的不足就是更明智的行为。</p></li>
</ul>

<p><strong>心理学家对同一情境中的“内视观点”和“外视观点”进行过如下区分。</strong></p>

<p><strong>内视观点是指在考虑决定时，从处于我们聚光灯内的信息——自己对情况的印象和评价——来获得结论。</strong></p>

<p><strong>相比之下，外视观点则能够忽略具体细节，从大局进行分析。</strong></p>

<p><strong>适当的情绪恰是我们做出明智之选所必需的。</strong></p>

<p><strong>我们对&quot;平均值&quot;的信任常常会超过我们的直觉——但却做不到应该相信的程度。</strong></p>

<p><strong>内视观点等于对自身所在的特定环境的评价。外视观点等于在类似于我们这样的情况下，事情通常是如何呈现的。外视观点更为精确，但绝大多数人会向内视观点倾斜。</strong></p>

<p><strong>如果你无法为自己的选择找到“基本比率”，那就去找专家。</strong></p>

<p><strong>专家们擅长评估基本比率，但在预测方面却不在行。</strong></p>

<p><strong>特写”可以增添外视观点所缺少的内容。</strong></p>

<p><strong>为了得到最好的信息，我们应该用缩小和放大法。</strong></p>

<p><strong>我发现找到任何一个人类要表现明显优于粗略的外推算法的领域是不可能的。</strong></p>

<p><strong>怎么专家知道的如此多，他们的预测能力却如此差劲？</strong></p>

<p><strong>尝试应该被当成一种加快搜集可靠信息的方法，而不是一种减缓我们做出值得全心投入的决策的方法。</strong></p>

<p><strong>我们已经接触到了三种对应策略。</strong></p>

<ul>
<li><p>第一，我们必须勤于想出搜集信息的方法，提出反面问题和考虑相反的情况；</p></li>
<li><p>第二，我们必须寻找正确的信息：用缩小法去寻找那些总结他人经验的基本比率，用放大法去获取对现实更加细微的印象；</p></li>
<li><p>第三， 尝试（ ooching）就等于做小实验以测试我们的理论。</p></li>
</ul>

<p><strong>尝试</strong></p>

<ul>
<li><p>尝试的方法很有用，因为我们在预测未来方面做得很糟。</p></li>
<li><p>企业家会很自然地尝试</p></li>
</ul>

<p><strong>警告：尝试在需要做出承诺的情形中，不能使我们达到预期效果。</strong></p>

<p><strong>常见的聘用错误：我们试图通过面试对成功做出预测</strong></p>

<p><strong>为什么我们要在可以了解的时候去猜测？在做出决策前，留出一段距离来考虑</strong></p>

<p><strong>使用 10— 10— 10方法，就意味着我们要以三个不同的时间范围为基础对决定进行考量：从现在算起的 10分钟后，我们对这一决定会有什么样的感觉？再过 10个月后呢？ 10年后呢？</strong></p>

<p><strong>对某物的熟悉不会令人们产生轻视的情绪，它更可能使人们心满意足。几十年来，心理学家们一直在研究这一被称为“曝光效应”（ mere exposure）的现象</strong></p>

<ul>
<li><p>发现看到刺激物的次数越多，人们对刺激物的好感度就越高。</p></li>
<li><p>这种对于现状的偏爱是另一种认知偏见。它被称为损失厌恶（ loss aversion），指的是人们发现相较于收益带来的快乐，损失带来的痛苦更大</p></li>
</ul>

<p><strong>组织内部的决策容易受到强有力的情感扭曲的支配。</strong></p>

<p><strong>维持现状偏见（ Status- Quo Bias）也许在大型官僚制的组织中最为明显。</strong></p>

<p><strong>解释水平理论”（ construal- level theory）的相对新型的心理学研究领域显示，距离我们面临的问题越远，我们就越能更清楚地看到问题最重要的方面。</strong></p>

<p><strong>研究人员发现，从实质上讲，我们为他人提出的建议常取决于唯一一个最重要的因素，而我们自己的思绪却在各种变量中翻腾。</strong></p>

<p><strong>由此可知，我们给他人提出的建议具有两大优点：</strong></p>

<ul>
<li><p>它自然地会把最重要的因素放在决策中的优先位置进行考虑，</p></li>
<li><p>而且它还弱化了短期情绪。 </p></li>
</ul>

<p><strong>瞬时的情绪诱使我们做出那些在长远看来是坏决定的决定。</strong></p>

<p><strong>为了克服使我们分心的短期情绪，我们要学会留出些距离。</strong></p>

<p><strong>10— 10— 10方法迫使我们像考虑当前情绪一样对未来情绪进行充分考虑，从而使“留出距离”得以实现。</strong></p>

<p><strong>我们的决定常常被两种微妙的短期情绪改变：</strong></p>

<ul>
<li><p>曝光效应：我们喜欢自己所熟悉的东西。</p></li>
<li><p>损失厌恶：损失让人痛苦，收益让人愉快，而前者的程度要更大一些。</p></li>
</ul>

<p><strong>损失厌恶与曝光效应相结合的结果是维持现状偏见。</strong></p>

<p>通过一个观察者的角度看自身所处的情况，我们可以留出这个距离。</p>

<p>在个人做决策时，最有力的问题可能会是：“如果面临这种情况的是我最好的朋友，那我会告诉他/她如何去做？”</p>

<p>《从优秀到卓越》（ Good to Great）一书的作者——会建议我们建立一个“停止做的事情”的清单。</p>

<p>他的顾问让他思考，如果他接到了两个改变人生的电话，他会怎么做。</p>

<p>在第一个电话中，他会得知自己继承了 2 000万美元，并且无任何附带条件。</p>

<p>而第二个电话则是告知他患上了一个罕见而难以治愈的疾病，他只剩下 10年的寿命。</p>

<p><strong>平复短期情绪并不总能令一个决定变得容易。</strong></p>

<p><strong>核心价值观</strong></p>

<ul>
<li><p>一个令人苦恼的决定常常是你的核心价值观遭遇冲突的时候。核心价值观：长期的情感价值、目标和志向。</p></li>
<li><p>将你的核心价值观视为神圣的东西，在解决现在以及未来遇到的困境时，就可以更容易一些。</p></li>
<li><p>遗憾的是，建立你的优先顺序与遵守它们是不同的。</p></li>
<li><p>空出时间来实践我们的核心价值观，我们必须对次级优先的事情发起攻势。</p></li>
</ul>

<p><strong>预想式</strong>回顾似乎能鞭策我们产生更多的深刻见解，因为它迫使我们在今天以及一件确定发生的未来事件之间的空白处添上内容（截然不同于一个猜测某件事情是否会发生的更加难以明确的过程）。</p>

<p><strong>未来不是一个“点”——一个我们必须预测的简单场景，它是一个范围。</strong>我们应该书档未来，对从非常坏到非常好的大范围内的结果进行考虑。</p>

<p><strong>事前验尸方式</strong></p>

<p>在为较矮的那片书档做准备时，我们需要进行事前验尸。“已经过去一年了。我们的决策彻底失败了。它失败的原因是什么？”</p>

<p><strong>预演</strong></p>

<p>为较高的那片书档做准备时，我们需要进行预演。“已经过去一年了。我们变成了英雄。我们准备好获得成功了吗？”</p>

<p>为了应对无法预见的结果，我们可以采用一个“安全系数”。</p>

<p>对问题做出预期能够帮助我们处理问题。 “真实工作预览”：预先揭示一份工作的缺点，给人们“注射了不满意疫苗”。</p>

<p><strong>通过书档法——同时对逆境和成功做出预期和准备——我们预先做好了有利于自己决定的布局。</strong></p>

<p><strong>绊网（tripwire）</strong></p>

<ul>
<li><p>有个方法是设定最后期限，而这是绊网最为常见的形式。</p></li>
<li><p>在设定最后期限和测量评估方法之外的另一个策略是，用一个“隔断”（partition）来充当绊网。</p></li>
<li><p>但是隔断却在做一些不同的事情：它在设定界限。</p></li>
<li><p>在生活中，我们会自然地进入“自动驾驶”状态，将以前的决定搁置一旁，不对其进行检查。</p></li>
<li><p>一个绊网可以令我们清醒过来，并使我们意识到自己有个选择。</p></li>
<li><p>在变化缓慢进行的时候，绊网特别有用</p></li>
<li><p>受困于“自动驾驶状态”中的人们可以考虑最后期限和隔断。我们易于增加自己对糟糕决定的投入；隔断能帮助我们阻止这种做法。</p></li>
</ul>

<p><strong>实际上，绊网可以为冒险行为提供一个安全空间。它们：</strong></p>

<ul>
<li><p>规定了冒险行为的上限；</p></li>
<li><p>使你的精神获得平静，直至碰到“触发器”。</p></li>
</ul>

<p>许多有力的绊网是被模式识别的，而非日期、度量和预算所触发。</p>

<p>绊网可以提供一个宝贵的认识：我们有一个选择要做。</p>

<p><strong>妥协就像是个老笑话：“骆驼乃是由委员会制作的一匹马。”</strong></p>

<p><strong>程序正义</strong></p>

<ul>
<li><p>大量研究证实，在解释人们对一个决定的感受方面，程序正义非常重要。关键的不是结果，而是过程。</p></li>
<li><p>群体做出的决定有一个额外的负担：它们必须被人们视为公正的决定。</p></li>
<li><p>“讨价还价”——直至各方都可以接受最后的选择——有助于形成被人们视为公正的决定。</p></li>
<li><p>我们应该确保人们能感觉到判定过程是公正的。</p></li>
<li><p>一个可靠的方法可以帮助我们设法解决哪怕是最棘手的决定。</p></li>
<li><p>“流程”并非富有魅力，但它所能提供的信心却是珍贵的。</p></li>
</ul>

	  ]]></description>
	</item>

	<item>
	  <title>读《Lies My Doctor Told Me》</title>
	  <link>//reading-lies-my-doctor-told-me</link>
	  <author>Tao He</author>
	  <pubDate>2018-08-02T18:20:12+00:00</pubDate>
	  <guid>//reading-lies-my-doctor-told-me</guid>
	  <description><![CDATA[
	     <blockquote>
<p>The doctor is more to be feared than the disease.</p>
</blockquote>

<p>最近在Telegram上闲逛，无意间看到了这本书，有精排的epub版本，就顺手下载了下来发送到了Kindle上，原本不太可能会读，一来对这类书名的书向来没有好感，二来是英文版，又是关于医药，健康，想到会有众多医学专有名词，有点生畏。但是在地铁上顺手打开看了几页后，感觉书开篇很平实，就接着看了下去，几天地铁的通勤，竟然看完了，算是我看过的英文版书籍里读的最快的了。虽然读得较快，但是给我了我不少启发，也意识到之前自己对医药和健康的一些错误认知。作者在开篇讲到了一些很有意思的观点，值得记录下来：</p>

<ul>
<li><p>医生和病人的关系不应该是一般的医患关系，病人不应该完全盲信医生，医生也不应该拒绝与病人对病情的探讨，相互的关系应该是一种partner的关系</p></li>
<li><p>医生不应该不经研究和验证而盲目相信制药企业的产品，甚至也不应该盲从医疗科研机构的结论</p></li>
<li><p>医生应该时刻更新自己的知识体系，跟上最新医疗成果和研究方向，使自己的病人能够享受到最新最好的医疗方案</p></li>
<li><p>医生也是人，也会懒惰，也会对新事物，新观念迟钝，不要仰视盲从医生，病人自己也要积极对待自己的病情</p></li>
<li><p>医药领域的探索研究得出的一些结论可能是片面的，需要甄别对待，不能盲从制药企业和研究机构</p></li>
<li><p>人性都是一样的，这同样适用于医生，因为这是人的思维惯性，很难避免</p></li>
<li><p>当你唯一的工具是锤子时，所有东西看起来都像钉子。当医生只有听诊器的时候，什么病他可能都用听诊器。</p></li>
<li><p>当你的收入取决于相信某件事时，你倾向于相信它</p></li>
<li><p>人类(医生)总是在生活的各个方面寻找捷径</p></li>
<li><p>仅仅因为两件事之间有关联并不意味着其中一件事会导致另一件事发生。医生也不能避免这种思维惯性</p></li>
<li><p>当某件事听起来是真的，我们通常会开始相信它是真的(甚至医生也会这么做)。 </p></li>
<li><p>一个谎言在社会中不断重复，即使它被证明是假的。医生也不能抗拒</p></li>
<li><p>如果某样东西不那么糟糕，那么它一定是好的。</p></li>
<li><p>愚蠢的重复谎言会让人相信。</p></li>
</ul>

<p>这些根植于人性中的思维范式，作用于一般人，也同样作用于医生，成为医药健康领域中众多谎言和神话的土壤，这些谎言是那么广为人知，使人深信不疑，即使官方和研究机构一再的向公众阐明那是谎言，是错误认知，都不能改变人们的习惯认知。我觉得我有必要记下这些长久以来的谎言和错误认知：</p>

<ul>
<li><p>吃脂肪，尤其是饱和脂肪，会导致高胆固醇和肥胖和心脏疾病</p></li>
<li><p>喝牛奶对你有益，可以使你的骨骼保持强壮</p></li>
<li><p>血液中的高胆固醇水平是危险的，会增加心脏病发作的风险。如果你的胆固醇水平高于正常水平，你应该少吃饱和脂肪，并服用胆固醇药物。</p></li>
<li><p>小麦是一种对身体非常有益的健康食品。每个人都应该每天吃多份全麦食品。</p></li>
<li><p>美国农业部的食物金字塔提供了最健康的方式来选择食物。如果你遵循它，你会有更好的健康。</p></li>
<li><p>如果你多运动，你就会减肥。</p></li>
<li><p>爆米花、坚果和种子会引起憩室炎。</p></li>
<li><p>给男性注射睾丸素会导致前列腺癌。</p></li>
<li><p>更年期的女性通常不需要孕激素，也不需要睾丸激素。他们只需要合成雌激素来控制潮热，如果有的话。</p></li>
<li><p>你流鼻涕/耳朵疼/咳嗽不会好起来的，除非你服用抗生素。</p></li>
<li><p>吃盐会增加你患高血压的风险，因此会增加你患心脏病和中风的风险。为了预防心脏病，你应该尽可能多地吃低盐饮食。</p></li>
<li><p>一卡路里就是一卡路里;无论是生日蛋糕还是西兰花。你可以想吃什么就吃什么，只要你限制总热量摄入。你会苗条健康，但要计算卡路里，因为所有的卡路里都是一样的。如果你想减肥，那么你应该燃烧比你吃的更多的卡路里。</p></li>
<li><p>吃或喝太多的钙会导致肾结石。或者，如果你有肾结石，你应该减少钙的摄入量，这样你就不会再得了。</p></li>
<li><p>一项名为TSH(促甲状腺素刺激激素)的实验室测试是你检查甲状腺功能是否正常所需要的。如果TSH在正常范围内，那么你的甲状腺正常，你的症状都在你的大脑里。</p></li>
<li><p>你的饮食中有足够的维生素D。你没有佝偻病(小孩骨头容易弯曲)或骨软化(大人骨头脆弱疼痛)，这证明你已经够了。不需要服用维生素D补充剂。</p></li>
<li><p>人类母乳缺乏维生素D。纯母乳喂养的婴儿应补充维生素D滴剂。</p></li>
<li><p>暴露在阳光下会导致皮肤癌。为了降低患皮肤癌的风险，你应该尽可能远离太阳。如果你一定要去晒太阳，那么你应该涂抹高防晒系数的防晒霜来保护自己。</p></li>
</ul>

<p>以上是作者用很多篇幅证伪的一些比较典型的谎言，其实生活中充斥着很多传播甚广，根本没有根据的观念和判断，顽固的留在很多人的大脑里，久久不肯离去，也许人的认知真的是一个很复杂和奇特的系统，有时令人叹为观止，有时又啼笑皆非。这本书虽然谈的是医药，健康，但是揭示的一些造成认知偏差的原因却适用于很多领域，值得回味，反思。</p>

	  ]]></description>
	</item>

	<item>
	  <title>读《1984》</title>
	  <link>//reading-1984</link>
	  <author>Tao He</author>
	  <pubDate>2018-07-15T18:20:12+00:00</pubDate>
	  <guid>//reading-1984</guid>
	  <description><![CDATA[
	     <p>1984应该是我读的第一本英文原版小说，我其实不太喜欢看小说，汉语的我也很少看，但竟然每天在地铁上看，一个月下来竟然看完了，期间总会遇到生词，看不懂的长句，但竟然读出了惊叹，大有拍案叫绝的冲动，感受得到人物的绝望，恐惧，第一次，读着非母语写成的文字，生出了喟叹，感动。这些英文单词变得不那么疏离，它所描绘的情景人物变得栩栩如生，人物的落寞与心死都可透出纸面，感染到我。也许好的文字无论用什么语言表达都能直直抵人心吧！</p>

<p>有一些段落我在读的过程中记录了下来，现摘录如下：</p>

<p>BIG BROTHER IS WATCHING YOU</p>

<p>The telescreen received and transmitted simultaneously. Any sound that Winston made, above the level of a very low whisper, would be picked up by it, moreover, so long as he remained within the field of vision which the metal plaque commanded, he could be seen as well as heard. There was of course no way of knowing whether you were being watched at any given moment. How often, or on what system, the Thought Police plugged in on any individual wire was guesswork. It was even conceivable that they watched everybody all the time. But at any rate they could plug in your wire whenever they wanted to. You had to live—did live, from habit that became instinct—in the assumption that every sound you made was overheard, and, except in darkness, every movement scrutinized.</p>

<p>WAR IS PEACE
FREEDOM IS SLAVERY 
IGNORANCE IS STRENGTH</p>

<p>This was not illegal ( nothing was illegal, since there were no longer any laws), but if detected it was reasonably certain that it would be punished by death, or at least by twenty-five years in a forced-labor camp.</p>

<p>The horrible thing about the Two Minutes Hate was not that one was obliged to act a part, but, on the contrary,that it was impossible to avoid joining in. Within thirty seconds any pretence was always unnecessary. A hideous ecstasy of fear and vindictiveness, a desire to kill, to torture, to smash faces in with a sledge-hammer, seemed to flow through the whole group of people like an electric current, turning one even against one&#39;s will into a grimacing, screaming lunatic. And yet the rage that one felt was an abstract, undirected emotion which could be switched from one object to another like the flame of a blow lamp. </p>

<p>Nearly all children nowadays were horrible.What was worst of all was that by means of such organizations as the Spies they were systematically turned into ungovernable little savages, and yet this produced in them no tendency whatever to rebel against the discipline of the Party. On the contrary, they adored the Party and everything connected with it. The songs, the processions, the banners, the hiking, the drilling with dummy rifles, the yelling of slogans, the worship of Big Brother--it was all a sort of glorious game to them. All their ferocity was turned outwards, against the enemies of the State, against foreigners, traitors, saboteurs, thought-criminals. It was almost normal for people over thirty to be frightened of their own children. And with good reason, for hardly a week passed in which The Times did not carry a paragraph describing how some eavesdropping little sneak -- &quot;child hero&quot; was the phrase generally used — had overheardsome compromising remark and denounced its parents to the Thought Police.</p>

<p>Years ago — how long was it? Seven years it must be — he had dreamed that he was walking through a pitch-dark room. And someone sitting to one side of him had said as he passed: &quot;We shall meet in the place where there is no darkness.&quot; It was said very quietly, almost casually — a statement, not a command. He had walked on without pausing. What was curious was that at the time, in the dream, the words had not made much impression on him. It was only later and by degrees that they had seemed to take on significance. He could not now remember whether it was before or after having the dream that he had seen O&#39;Brien for the first time, nor could he remember when he had first identified the voice as O&#39;Brien&#39;s. But at any rate the identification existed. It was O&#39;Brien who had spoken to him out of the dark.
Winston had never been able to feel sure — even after this morning&#39;s flash of the eyes it was still impossible to be sure whether O&#39;Brien was a friend or an enemy. Nor did it even seem to matter greatly. There was a link of understanding between them, more important than affection or partisanship.&quot;We shall meet in the place where there is no darkness,&quot; he had said. Winston did not know what it meant, only that in some way or another it would come true.</p>

<p>It was always at night. The arrests invariably happened at night. The sudden jerk out of sleep, the rough hand shaking your shoulder, the lights glaring in your eyes, the ring of hard faces round the bed. In the vast majority of cases there was no trial, no report of the arrest. People simply disappeared, always during the night. Your name was removed from the registers, every record of everything you had ever done was wiped out, your one-time existence was denied and then forgotten. You were abolished, annihilated: vaporized was the usual word. </p>

<p>Thoughtcrime does not entail death: thoughtcrime IS death. </p>

<p>Tragedy,he perceived,belonged to the ancient time,to a time when there were still privacy,love and friendship,and when the members of a family stood by one another without needing to know the reason.</p>

<p>Who controls the past controls the future, who controls the present controls the past.</p>

<p>“Don&#39;t you see that the whole aim of Newspeak is to narrow the range of thought?In the end we shall make thought-crime literally impossible, beacuse there will be no words in which to express it. Every concept that can ever be needed will be expressed by exactly one word, with its meaning rigidly defined and all its subsidiary meanings rubbed out and forgotten. Already,in the Eleventh Edition, we&#39;re not far from that point. But the process will still be continuing long after you and I are dead. Every year fewer and fewer words,and the range of consciousness always alittle smaller. Even now, of course there&#39;s no reason or excuse for committing thought-crime. It&#39;s merely a question of self-discipline, reality-control. But in the end there won&#39;t be any need even for that. The Revolution will be complete when the language is perfect. Nespeak is Ingsoc and Ingsoc is Newspeak,” he added with a sort of mystical satisfaction. &quot;Has it ever occurred to you, Winston, that by the year2050, at the very latest, not a single human being will be alive who could understant such a conversation as we are having now?&quot;</p>

<p>In some ways she was far more acute than Winston, and far less susceptible to Party propaganda. Once when he happened in some connexion to mention the war against Eurasia, she startled him by saying casually that in her opinion the war was not happening. The rocket bombs which fell daily on London were probably fired by the Government of Oceania itself, “just to keep people frightened”. </p>

<p>&#39;You&#39;re only a rebel from the waist downwards,&#39; he told her.</p>

<p>Throughout recorded time, and probably since the end of the Neolithic Age, there have been three kinds of people in the world, the High, the Middle, and the Low. They have been subdivided in many ways, they have borne countless different names, and their relative numbers, as well as their attitude towards one another, have varied from age to age: but the essential structure of society has never altered. Even after enormous upheavals and seemingly irrevocable changes, the same pattern has always reasserted itself, just as a gyroscope will always return to equilibrium, however far it is pushed one way or the other.</p>

<p>In one combination or another, these three super-states are permanently at war, and have been so for the past twenty-five years. War, however, is no longer the desperate, annihilating struggle that it was in the early decades of the twentieth century. It is a warfare of limited aims between combatants who are unable to destroy one another, have no material cause for fighting and are not divided by any genuine ideological difference This is not to say that either the conduct of war, or the prevailing attitude towards it, has become less bloodthirsty or more chivalrous. On the contrary, war hysteria is continuous and universal in all countries, and such acts as raping, looting, the slaughter of children, the reduction of whole populations to slavery, and reprisals against prisoners which extend even to boiling and burying alive, are looked upon as normal, and, when they are committed by one&#39;s own side and not by the enemy, meritorious. But in a physical sense war involves very small numbers of people, mostly highly-trained specialists, and causes comparatively few casualties. The fighting, when there is any, takes place on the vague frontiers whose whereabouts the average man can only guess at, or round the Floating Fortresses which guard strategic spots on the sea lanes. In the centres of civilization war means no more than a continuous shortage of consumption goods, and the occasional crash of a rocket bomb which may cause a few scores of deaths. War has in fact changed its character. </p>

<p>The war, therefore, if we judge it by the standards of previous wars, is merely an imposture. It is like the battles between certain ruminant animals whose horns are set at such an angle that they are incapable of hurting one another. But though it is unreal it is not meaningless. It eats up the surplus of consumable goods, and it helps to preserve the special mental atmosphere that a hierarchical society needs. War, it will be seen, is now a purely internal affair. In the past, the ruling groups of all countries, although they might recognize their common interest and therefore limit the destructiveness of war, did fight against one another, and the victor always plundered the vanquished. In our own day they are not fighting against one another at all. The war is waged by each ruling group against its own subjects, and the object of the war is not to make or prevent conquests of territory, but to keep the structure of society intact. The very word &#39;war&#39;, therefore, has become misleading. It would probably be accurate to say that by becoming continuous war has ceased to exist. The peculiar pressure that it exerted on human beings between the Neolithic Age and the early twentieth century has disappeared and been replaced by something quite different. The effect would be much the same if the three super-states, instead of fighting one another, should agree to live in perpetual peace, each inviolate within its own boundaries. For in that case each would still be a self-contained universe, freed for ever from the sobering influence of external danger. A peace that was truly permanent would be the same as a permanent war. This -- although the vast majority of Party members understand it only in a shallower sense -- is the inner meaning of the Party slogan: War is Peace</p>

<p>Between life and death, and between physical pleasure and physical pain, there is still a distinction, but that is all. Cut off from contact with the outer world, and with the past, the citizen of Oceania is like a man in interstellar space, who has no way of knowing which direction is up and which is down. The rulers of such a state are absolute, as the Pharaohs or the Caesars could not be. They are obliged to prevent their followers from starving to death in numbers large enough to be inconvenient, and they are obliged to remain at the same low level of military technique as their rivals; but once that minimum is achieved, they can twist reality into whatever shape they choose.</p>

<p>War, it will be seen, is now a purely internal affair. In the past, the ruling groups of all countries, although they might recognize their common interest and therefore limit the destructiveness of war, did fight against one another, and the victor always plundered the vanquished. In our own day they are not fighting against one another at all. The war is waged by each ruling group against its own subjects, and the object of the war is not to make</p>

<p>The aims of these three groups are entirely irreconcilable. The aim of the High is to remain where they are. The aim of the Middle is to change places with the High. The aim of the Low, when they have an aim — for it is an abiding characteristic of the Low that they are too much crushed by drudgery to be more than intermittently conscious of anything outside their daily lives —is to abolish all distinctions and create a society in which all men shall be equal. Thus throughout history a struggle which is the same in its main outlines recurs over and over again. For long periods the High seem to be securely in power, but sooner or later there always comes a moment when they lose either their belief in themselves or their capacity to govern efficiently, or both. They are then overthrown by the Middle, who enlist the Low on their side by pretending to them that they are fighting for liberty and justice. As soon as they have reached their objective, the Middle thrust the Low back into their old position of servitude, and themselves become the High. Presently a new Middle group splits off from one of the other groups, or from both of them, and the struggle begins over again. Of the three groups, only the Low are never even temporarily successful in achieving their aims. It would be an exaggeration to say that throughout history there has been no progress of a material kind. Even today, in a period of decline, the average human being is physically better off than he was a few centuries ago. But no advance in wealth, no softening of manners,no reform or revolution has ever brought human equality a millimetre nearer. From the point of view of the Low, no historic change has ever meant much more than a change in the name of their masters.</p>

<p>Part of the reason for this was that in the past no government had the power to keep its citizens under constant surveillance. The invention of print, however, made it easier to manipulate public opinion, and the film and the radio carried the process further. With the development of television, and the technical advance which made it possible to receive and transmit simultaneously on the same instrument, private life came to an end. Every citizen, or at least every citizen important enough to be worth watching, could be kept for twentyfour hours a day under the eyes of the police and in the sound of official propaganda, with all other channels of communication closed. The possibility of enforcing not only complete obedience to the will of the State, but complete uniformity of opinion on all subjects, now existed for the first time.</p>

<p>It had long been realized that the only secure basis for oligarchy is collectivism. Wealth and privilege are most easily defended when they are possessed jointly. The so-called &quot;abolition of private property&quot; which took place in the middle years of the century meant, in effect, the concentration of property in far fewer hands than before: but with this difference, that the new owners were a group instead of a mass of individuals. Individually, no member of the Party owns anything, except petty personal belongings. Collectively, the Partyowns everything in Oceania, because it controls everything, and disposes of the products as it thinks fit.</p>

<p>&quot; When you make love you&#39;re using up energy; and afterwards you feel happy and don&#39;t give a damn for anything. They can&#39;t bear you to feel like that. They want you to be bursting with energy all the time. All this marching up and down and cheering and waving flags is simply sex gone sour.&quot; ... There was a direct, intimate connection between chastity and political orthodoxy. 
...The family could not actually be abolished, and, indeed, people were encouraged to be fond of their children in an almost the old-fashioned way. The children, on the other hand, were systematically turned against their parents and taught to spy on them and report their deviations...It was a device by means of which everyone could be surrounded night and day by informers who knew him intimately.</p>

<p>He had won the victory over himself. He loved Big Brother.</p>

	  ]]></description>
	</item>


</channel>
</rss>
