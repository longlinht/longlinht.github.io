<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0"
  xmlns:content="http://purl.org/rss/1.0/modules/content/"
  xmlns:dc="http://purl.org/dc/elements/1.1/"
  xmlns:itunes="http://www.itunes.com/dtds/podcast-1.0.dtd"
  xmlns:trackback="http://madskills.com/public/xml/rss/module/trackback/">
  <channel>
    <title>Dancing with Machine, Human and God</title>
    <link>http://longlinht.github.io/</link>
    <description>World is complex,confusing and wonderful,I will talk about machine,human and god to known it, to reveal it.</description>
    <pubDate>Sun, 16 Jul 2017 02:30:12 +0800</pubDate>
    <item>
      <title>Intall Emacs on Ubuntu</title>
      <link>http://longlinht.github.io//install-emacs-on-ubuntu</link>
      <description>Install Emacs 25 on Ubuntu from source is very easy, follow these steps below could achieve it.

</description>
      <pubDate>Sun, 16 Jul 2017 02:30:12 +0800</pubDate>
      <dc:date>2017-07-16T02:30:12+08:00</dc:date>
    </item>
    <item>
      <title>对AI的一些臆想</title>
      <link>http://longlinht.github.io//think-about-AI</link>
      <description>   作为一个码农，长期从事应用研发的工作，于当下热门的人工智能其实一点都没有交集，既不了解机器学习，也没有接触过计算机神经网络，甚至没有使用过Hadoop这种技术，可谓对AI相关的领域所知甚少，但这并不阻碍我对AI产生一些思考和想法，而这些思考和想法的缘起竟然都是这一两年上映的几部AI相关的电影和相关的几本畅销书，其中所涉及的技术和思想也都相对易懂，和机器学习类的书籍形成鲜明对比。
   

</description>
      <pubDate>Mon, 10 Jul 2017 02:30:12 +0800</pubDate>
      <dc:date>2017-07-10T02:30:12+08:00</dc:date>
    </item>
    <item>
      <title>Dimension Units in Android</title>
      <link>http://longlinht.github.io//dimension-units-in-android</link>
      <description>When I start develop application for Android, I am confused about the dimension units many times. So I decide to figure out it clearly through this article.

</description>
      <pubDate>Fri, 07 Apr 2017 20:30:12 +0800</pubDate>
      <dc:date>2017-04-07T20:30:12+08:00</dc:date>
    </item>
    <item>
      <title>Building My Own Mac Working Environment</title>
      <link>http://longlinht.github.io//building-my-own-mac-working-environment</link>
      <description>In recent 2 years, I have switched my own working environment from Windows to Ubuntu and Mac. For the reason that I switched C/C++ development for Windows to Java development for Android. But I still prefer C++, so I won't give up C/C++ programming. In this article I will write down detail steps that how I build working environment. This working environment on Mac is a general working environment, not just for Android development but also C/C++ development. Let's start!

</description>
      <pubDate>Sun, 02 Apr 2017 06:30:12 +0800</pubDate>
      <dc:date>2017-04-02T06:30:12+08:00</dc:date>
    </item>
    <item>
      <title>Java References</title>
      <link>http://longlinht.github.io//java-references</link>
      <description>Before JDK 1.2, if a object isn't referenced by any variable, it can't be used any more.Since JDK 1.2, Java has four reference types.In order from strongest to weakest these references are: Strong, Soft, Weak, Phantom. 

</description>
      <pubDate>Wed, 10 Aug 2016 00:00:00 +0800</pubDate>
      <dc:date>2016-08-10T00:00:00+08:00</dc:date>
    </item>
    <item>
      <title>Android Thread Related Stuff</title>
      <link>http://longlinht.github.io//thread-looper-handler-in-android</link>
      <description>It's widely known that it's illegal to update UI components directly from threads other than main thread in android. This a rule in Android world, we can't violate it. But, so many situations we need 
update UI when we finish something in separated thread. This is a basic problem, it will refer more important concepts related thread.

</description>
      <pubDate>Sat, 06 Aug 2016 03:00:00 +0800</pubDate>
      <dc:date>2016-08-06T03:00:00+08:00</dc:date>
    </item>
    <item>
      <title>Understanding Java Garbage Collection</title>
      <link>http://longlinht.github.io//java-garbage-collection</link>
      <description>**stop-the-world** Stop-the-world means that the JVM is stopping the application from running to execute a GC. When stop-the-world occurs, every thread except for the threads needed for the GC will stop their tasks. The interrupted tasks will resume only after the GC task has completed. GC tuning often means reducing this stop-the-world time.

</description>
      <pubDate>Fri, 05 Aug 2016 00:00:00 +0800</pubDate>
      <dc:date>2016-08-05T00:00:00+08:00</dc:date>
    </item>
    <item>
      <title>Android Binder Mechanism</title>
      <link>http://longlinht.github.io//android-binder-mechanism</link>
      <description>#### What is Binder

</description>
      <pubDate>Wed, 03 Aug 2016 03:00:00 +0800</pubDate>
      <dc:date>2016-08-03T03:00:00+08:00</dc:date>
    </item>
    <item>
      <title>Memory Leak in Android Development</title>
      <link>http://longlinht.github.io//memory-leak-in-android-development</link>
      <description>When programming Android, although java has GC mechanism, some our wrong code way and personal habits still cause memory leak, GC also can't fix it.

</description>
      <pubDate>Mon, 01 Aug 2016 22:00:00 +0800</pubDate>
      <dc:date>2016-08-01T22:00:00+08:00</dc:date>
    </item>
    <item>
      <title>Userful command line in Android development</title>
      <link>http://longlinht.github.io//userful-command-line-in-android-development</link>
      <description>## 

</description>
      <pubDate>Sun, 10 Jul 2016 02:30:12 +0800</pubDate>
      <dc:date>2016-07-10T02:30:12+08:00</dc:date>
    </item>
    <item>
      <title>Define Userful Android Drawables</title>
      <link>http://longlinht.github.io//define-userful-android-drawables</link>
      <description>We can define many useful drawables in Android, in this article, I collected some of definations I ever used.

</description>
      <pubDate>Wed, 06 Jul 2016 02:20:12 +0800</pubDate>
      <dc:date>2016-07-06T02:20:12+08:00</dc:date>
    </item>
    <item>
      <title>I Do Not Know What I May Appear To The World</title>
      <link>http://longlinht.github.io//I-do-not-know-what-I-may-appear-to-the-world</link>
      <description>作为“God”板块的第一篇，引用牛顿爵士的一段话来开启。

</description>
      <pubDate>Thu, 09 Jun 2016 01:20:00 +0800</pubDate>
      <dc:date>2016-06-09T01:20:00+08:00</dc:date>
    </item>
    <item>
      <title>Easy doesn't enter into grown-up life</title>
      <link>http://longlinht.github.io//easy-doesnt-enter-into-grown-up-life</link>
      <description>这是我“Human”目录的第一篇文章，我以一句电影里的台词作为题目，“成年人的生活里没有容易二字”。这个板块其实我更不知道写什么，不过倒是可以借此文来解释一下那个奇怪的目录名称，其实这个奇怪的名称源于我几年前写
的一句话“ 茕茕孑力，与机器，人，神共舞”。此文止,期待后续的文章。


</description>
      <pubDate>Thu, 09 Jun 2016 00:10:00 +0800</pubDate>
      <dc:date>2016-06-09T00:10:00+08:00</dc:date>
    </item>
    <item>
      <title>Hello World</title>
      <link>http://longlinht.github.io//hello-world</link>
      <description>This is my first post for Machine category, I named it 'Hello World' to start my blog. Because many developers start their first program with a single line code to print 'Hello World'. Certainly my first line code also is 'Hello World' in C programming language. I hope this will be a good start!

</description>
      <pubDate>Thu, 09 Jun 2016 00:00:00 +0800</pubDate>
      <dc:date>2016-06-09T00:00:00+08:00</dc:date>
    </item>
    <item>
      <title>Using Duilib to build GUI</title>
      <link>http://longlinht.github.io//using-duilib-to-build-gui</link>
      <description>Duilib is a free open source DirectUI library on Windows , because its simple and expandable design and stable and efficient implementation, accepted generally by the major Internet companies  widely used in IM, video client, stock market software, navigation software, mobile phone support Software, security software and many PC client software in other industries. When We developed a IM in a company I worked, we even use this library to replace Qt GUI part we used in our code.

</description>
      <pubDate>Sun, 04 Jan 2015 03:20:00 +0800</pubDate>
      <dc:date>2015-01-04T03:20:00+08:00</dc:date>
    </item>
    <item>
      <title>C#创建不规则窗体(控件)</title>
      <link>http://longlinht.github.io//c-sharp-create-unregular-window</link>
      <description>创建不规则窗体和控件这个过程包含了大量的图形编程工作，不同的计算机因内存和显卡的不同可能会导致最终的效果有所不同 。创建不规则窗体具体步骤：

</description>
      <pubDate>Thu, 06 Sep 2012 02:30:12 +0800</pubDate>
      <dc:date>2012-09-06T02:30:12+08:00</dc:date>
    </item>
    <item>
      <title>Similarities and Differences between Java and C++</title>
      <link>http://longlinht.github.io//similarities-and-differences-between-java-and-cpp</link>
      <description>* Java does not support typedefs, defines, or a preprocessor. 

</description>
      <pubDate>Sun, 15 Jan 2012 22:00:00 +0800</pubDate>
      <dc:date>2012-01-15T22:00:00+08:00</dc:date>
    </item>
    <item>
      <title>Smart Pointer in C++</title>
      <link>http://longlinht.github.io//smart-pointer-in-cpp</link>
      <description>In C++, there is a uncommnon conception named smart pointer, it is rarely seen in other programming lauguages. So, what's it? We could simply define it. **A smart pointer is a class that wraps a 'raw' (or 'bare') C++ pointer, to manage the lifetime of the object being pointed to**.

</description>
      <pubDate>Mon, 07 Mar 2011 02:30:12 +0800</pubDate>
      <dc:date>2011-03-07T02:30:12+08:00</dc:date>
    </item>
    <item>
      <title>高质量C++编程注意事项</title>
      <link>http://longlinht.github.io//high-quality-cpp</link>
      <description>* 不提倡使用全局变量，尽量不要在头文件中出现象extern int value 这类声明

</description>
      <pubDate>Sat, 05 Feb 2011 22:00:00 +0800</pubDate>
      <dc:date>2011-02-05T22:00:00+08:00</dc:date>
    </item>
    <item>
      <title>Copy and swap idiom in C++</title>
      <link>http://longlinht.github.io//copy-and-swap-idiom-in-cpp</link>
      <description>#### Purpose - assists the assignment operator in achieving two things: 

</description>
      <pubDate>Fri, 04 Feb 2011 02:20:12 +0800</pubDate>
      <dc:date>2011-02-04T02:20:12+08:00</dc:date>
    </item>
    <item>
      <title>Type conversion in C++</title>
      <link>http://longlinht.github.io//type-conversion-in-cpp</link>
      <description>* `static_cast`

</description>
      <pubDate>Thu, 27 Jan 2011 02:20:12 +0800</pubDate>
      <dc:date>2011-01-27T02:20:12+08:00</dc:date>
    </item>
    <item>
      <title>References vs. Pointers in C++</title>
      <link>http://longlinht.github.io//pointers-vs-references-in-cpp</link>
      <description>In C++, references provide many of the same capabilities as pointers. In real development, we prefer to use references to avoid the complex and error prone of pointers. But in some situations, our choices're not clear. As a good C++ developer, we shouldn't ignore this confusion, this hesitation, so we need make it clear, more clear.

</description>
      <pubDate>Wed, 19 Jan 2011 03:40:32 +0800</pubDate>
      <dc:date>2011-01-19T03:40:32+08:00</dc:date>
    </item>
    <item>
      <title>Split a String in C++</title>
      <link>http://longlinht.github.io//split-string-in-cpp</link>
      <description>There are many ways to split a string in C++, but what's the most elegant way to split a string in C++? May be we can find it step by step. The most simple and direct way is use `istringstream` to split.

</description>
      <pubDate>Wed, 29 Dec 2010 02:20:12 +0800</pubDate>
      <dc:date>2010-12-29T02:20:12+08:00</dc:date>
    </item>
    <item>
      <title>Forward declaration in C++</title>
      <link>http://longlinht.github.io//forward-declaration-in-cpp</link>
      <description>Why need use forward declaration? when we can use it? I will figure out these problem separately.

</description>
      <pubDate>Wed, 03 Nov 2010 02:30:12 +0800</pubDate>
      <dc:date>2010-11-03T02:30:12+08:00</dc:date>
    </item>
    <dc:date>2017-07-16T02:30:12+08:00</dc:date>
  </channel>
</rss>