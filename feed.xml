<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Dancing with Machine, Human and God</title>
    <description>World is complex,confusing and wonderful,I will talk about machine,human and god to known it, to reveal it.</description>
    <link>http://longlinht.github.io/</link>
    <atom:link href="http://longlinht.github.io//feed.xml" rel="self" type="application/rss+xml" />
    
      <item>
        <title>Java References</title>
        <description>&lt;p&gt;Before JDK 1.2, if a object isn&amp;#39;t referenced by any variable, it can&amp;#39;t be used any more.Since JDK 1.2, Java has four reference types.In order from strongest to weakest these references are: Strong, Soft, Weak, Phantom. &lt;/p&gt;

&lt;h4&gt;Strong reference&lt;/h4&gt;

&lt;p&gt;Below code is regular object reference:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;Sample&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sample&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Sample&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The variable &lt;code&gt;sample&lt;/code&gt; holds a strong reference to a Sample object. Before you stop reading there is a point to this: objects that are reachable through any chain of strong references are not eligible for garbage collection. Even JVM throw &lt;code&gt;OutOfMemoryError&lt;/code&gt; to terminate the program, it will not to reclaim the memory that strong reference hold.&lt;/p&gt;

&lt;h4&gt;Soft reference&lt;/h4&gt;

&lt;p&gt;Soft references are cleared at the discretion of the garbage collector in response to memory demand. The virtual machine guarantees that all soft references to softly-reachable objects will have been cleared before it would ever throw an &lt;code&gt;OutOfMemoryError&lt;/code&gt;.&lt;/p&gt;

&lt;h4&gt;Weak reference&lt;/h4&gt;

&lt;p&gt;This code snippets is regular weak reference:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;WeakReference&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Cacheable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;weakData&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;WeakReference&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Cacheable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To access data call weakData.get(). This call to get may return &lt;code&gt;null&lt;/code&gt; if the weak reference was garbage collected: you must check the returned value to avoid &lt;code&gt;NullPointerException&lt;/code&gt;s.&lt;/p&gt;

&lt;p&gt;An object that is identified as only weakly reachable will be collected at the next GC cycle.&lt;/p&gt;

&lt;p&gt;If you pass a &lt;code&gt;ReferenceQueue&lt;/code&gt; into the constructor for a weak reference then the garbage collector will append that weak reference to the &lt;code&gt;ReferenceQueue&lt;/code&gt; when it is no longer needed. You can periodically process this queue and deal with dead references.&lt;/p&gt;

&lt;p&gt;The difference between &lt;code&gt;SoftReference&lt;/code&gt; and &lt;code&gt;WeakReference&lt;/code&gt; is:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;A soft reference is exactly like a weak reference, except that it is less eager to throw away the object to which it refers. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;An object which is only weakly reachable (the strongest references to it are WeakReferences) will be discarded at the next garbage collection cycle, but an object which is softly reachable will generally stick around for a while.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;SoftReferences&lt;/code&gt; aren&amp;#39;t required to behave any differently than &lt;code&gt;WeakReferences&lt;/code&gt;, but in practice softly reachable objects are generally retained as long as memory is in plentiful supply. This makes them an excellent foundation for a cache, such as the image cache described above, since you can let the garbage collector worry about both how reachable the objects are (a strongly reachable object will never be removed from the cache) and how badly it needs the memory they are consuming.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Garbage collector uses algorithms to decide whether or not to reclaim a softly reachable object, but always reclaims a weakly reachable object.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;Phantom reference&lt;/h4&gt;

&lt;p&gt;Phantom references are the most tenuous of all reference types: calling get will always return null.
When you construct a phantom reference you must always pass in a &lt;code&gt;ReferenceQueue&lt;/code&gt;. &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;ReferenceQueue&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;queue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ReferenceQueue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;PhantomReference&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;PhantomReference&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;queue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This indicates that you can use a phantom reference to see when your object is GC’d. The phantom reference is enqueued after it has been physically removed from memory — as opposed to weak references which are enqueued before they’re finalized or GC’d.&lt;/p&gt;
</description>
        <pubDate>Wed, 10 Aug 2016 00:00:00 +0800</pubDate>
        <link>http://longlinht.github.io//java-references</link>
        <guid isPermaLink="true">http://longlinht.github.io//java-references</guid>
      </item>
    
      <item>
        <title>I Do Not Know What I May Appear To The World</title>
        <description>&lt;p&gt;作为“God”板块的第一篇，引用牛顿爵士的一段话来开启。&lt;/p&gt;

&lt;p&gt;I do not know what I may appear to the world, but to myself I seem to have been only like a boy playing on the sea-shore, and diverting myself in now and then finding a smoother pebble or a prettier shell than ordinary, whilst the great ocean of truth lay all undiscovered before me.  &lt;/p&gt;
</description>
        <pubDate>Thu, 09 Jun 2016 01:20:00 +0800</pubDate>
        <link>http://longlinht.github.io//I-do-not-know-what-I-may-appear-to-the-world</link>
        <guid isPermaLink="true">http://longlinht.github.io//I-do-not-know-what-I-may-appear-to-the-world</guid>
      </item>
    
      <item>
        <title>Easy doesn&#39;t enter into grown-up life</title>
        <description>&lt;p&gt;这是我“Human”目录的第一篇文章，我以一句电影里的台词作为题目，“成年人的生活里没有容易二字”。这个板块其实我更不知道写什么，不过倒是可以借此文来解释一下那个奇怪的目录名称，其实这个奇怪的名称源于我几年前写
的一句话“ 茕茕孑力，与机器，人，神共舞”。此文止,期待后续的文章。&lt;/p&gt;
</description>
        <pubDate>Thu, 09 Jun 2016 00:10:00 +0800</pubDate>
        <link>http://longlinht.github.io//easy-doesnt-enter-into-grown-up-life</link>
        <guid isPermaLink="true">http://longlinht.github.io//easy-doesnt-enter-into-grown-up-life</guid>
      </item>
    
      <item>
        <title>Hello World</title>
        <description>&lt;p&gt;This is my first post for Machine category, I named it &amp;#39;Hello World&amp;#39; to start my blog. Because many developers start their first program with a single line code to print &amp;#39;Hello World&amp;#39;. Certainly my first line code also is &amp;#39;Hello World&amp;#39; in C programming language. I hope this will be a good start!&lt;/p&gt;

&lt;p&gt;Before Starting this blog, I think about this expression way for a long time, I didin&amp;#39;t know what I should write, I also can&amp;#39;t sure I could write down some useful, excellent articles. I even worry about my articles would be some non-value pieces. But now, I never care about it. I will do my best to write some useful, valuable IT articles.&lt;/p&gt;

&lt;p&gt;To make a good start, I need figure out what I shoud write. I think about some categories below:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;General IT&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Programming Miscellaneous&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Programming&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Computer Science&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Thu, 09 Jun 2016 00:00:00 +0800</pubDate>
        <link>http://longlinht.github.io//hello-world</link>
        <guid isPermaLink="true">http://longlinht.github.io//hello-world</guid>
      </item>
    
  </channel>
</rss>