<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>与机器，人，神共舞</title>
    <description>编程，读书，思考，旅行，与机器对话，与人交谈，对神发问，探索，体验人生美丽的风景</description>
    <link>http://longlinht.github.io/</link>
    <atom:link href="http://longlinht.github.io//feed.xml" rel="self" type="application/rss+xml" />
    
      <item>
        <title>用python脚本优雅的整理Kindle的标注和笔记</title>
        <description>&lt;p&gt;我是重度Kindle使用者，Kindle里面存满了各类书籍，经常会同时读两三本书，时间一长，多本书的标注和笔记都交叉记录在My Clippings.txt文本文件里，现在这个文件已经有几万行，每次手动去整理特定的一本书的标注和笔记时都极为头疼，还容易错漏，终于有一天实在忍不了了，就去网上找有没有整理kindle标注和笔记的服务，还真让我给找到了，clipping.io，在线服务，马上使用，上传My Clippings.txt文件，一切顺利，文件上传后开始分析整理文本，看到几本书的标注已经出来了，等全部整理结束后发现少了好几本书的，再次重新上传文件重试整理，问题依旧，空欢喜一场，依旧不能解决我的痛点，最近在读的两本书的标注和笔记恰好没有被整理出来，一怒之下，决定自己用python脚本来写一个这样的整理工具，还以为得花费一两天的时间，一不小心，两个小时不到的功夫写完了，调试了一番，完全满足我的需求，现在只需一条命令，传入书名就可以整理出指定的一本书的所有标注和笔记，脚本如下：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;# coding=utf-8

import os
import sys

def main():
   filepath = sys.argv[1]
   bookName = sys.argv[2]

   if not os.path.isfile(filepath):
       print(&amp;quot;File path {} does not exist. Exiting...&amp;quot;.format(filepath))
       sys.exit()

   DELIMITER = &amp;quot;==========&amp;quot;
   TIME_MAKR = &amp;quot;- 您在第&amp;quot;
   lineNum = 0
   books = {}

   bag_of_words = {}
   with open(filepath) as fp:
       encounter = False
       delimiterCount = 0
       curBookName = &amp;quot;&amp;quot;
       for line in fp:
           if lineNum == 0:
               books[line] = []
               curBookName = line
               delimiterCount += 1
           else:
               if line.startswith(DELIMITER):
                   delimiterCount += 1
                   encounter = True
               else:
                   if encounter == True:
                       if line in books:
                           curBookName = line
                       else:
                           books[line] = []
                       encounter = False
                       curBookName = line
                   else:
                       books[curBookName].append(line)
           lineNum += 1
           #print(line)

       fp.close()            

   outFile = open(&amp;quot;MyClippingOutput.txt&amp;quot;, &amp;quot;w&amp;quot;)
   for k in books:
       if k.startswith(bookName) :
           outFile.writelines(k)
           lines = books[k]
           for l in lines:
               if l.startswith(TIME_MAKR):
                   continue
               if l.startswith(bookName):
                   continue
               outFile.writelines(l)
   outFile.close()

if __name__ == &amp;#39;__main__&amp;#39;:
    main()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;目前这个脚本我只是自用，满足我个人的需求，我想肯定也有很多kindle的重度使用者有类似的需求，后续我准备把这个工具也做成在在线服务，使用方式类似clipping.io，做到比clipping.io的可定制型更强，能够适应更多的异常情况，因为我发现clipping.io对一些不规范的书名的容错性很差。期待这个服务上线！&lt;/p&gt;
</description>
        <pubDate>Thu, 12 Nov 2020 04:54:12 +0800</pubDate>
        <link>http://longlinht.github.io//using-python-parse-kindle-notes</link>
        <guid isPermaLink="true">http://longlinht.github.io//using-python-parse-kindle-notes</guid>
      </item>
    
      <item>
        <title>读《未来简史》</title>
        <description>&lt;p&gt;读《未来简史》一直都在我的读书计划中，最近终于可以安排上了，本来的计划是先把《人类简史》的英文版先读一遍，再接着读三部曲中的第二部，这样可以像看电影似的接上，因为赫拉利的书观点性很强，《人类简史》的中文版我已经读过一遍，所以不太想再把那些观点再嚼一遍，于是直接在Kindle上开始看《未来简史》，通勤中，飞机上，睡觉前，半个月时间，不知不觉看完了。如同《人类简史》一样，是一本让人手不释卷的好书。看完后，总有一种不吐不快的感觉，因此有了此文。
英文版的封面与中文版不同，醒目的红色大字&amp;quot;Homo Deus&amp;quot;是主标题，而中文版的主标题却是英文版的副标题&amp;quot;A Brief History of Tomorrow&amp;quot;,正好主副标题颠倒，对&amp;quot;Homo Deus&amp;quot;的翻译是&amp;quot;从智人到智神&amp;quot;, 看完全书，感觉还是翻译为&amp;quot;从智人到智神&amp;quot;更为贴切，&amp;quot;未来简史&amp;quot;感觉是病句，当然认为前者更贴切的原因不仅仅是咬文嚼字，而是这个标题才是整本书的主旨——未来会有一个新的脱胎于智人的种族（Homo Deus）诞生，或取代智人的地位，或导致智人灭绝。Homo Deus延续了《人来简史》的风格，或者说延续了赫拉利的写史风格, 宏大的叙事，精炼的语句，几乎是我读过的所有历史类，社会类书籍里面独有的一种，开篇就有惊人之语，至少在我读过的书里面没有遇到类似的论调:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;For thousands of years the answer to this question remained unchanged. The same three problems preoccupied the people of twentieth-century China, of medieval India and of ancient Egypt. Famine, plague and war were always at the top of the list. For generation after generation humans have prayed to every god, angel and saint, and have invented countless tools, institutions and social systems – but they continued to die in their millions from starvation, epidemics and violence. Many thinkers and prophets concluded that famine, plague and war must be an integral part of God’s cosmic plan or of our imperfect nature, and nothing short of the end of time would free us from them.&lt;/p&gt;

&lt;p&gt;Yet at the dawn of the third millennium, humanity wakes up to an amazing realisation. Most people rarely think about it, but in the last few decades we have managed to rein in famine, plague and war. Of course, these problems have not been completely solved, but they have been transformed from incomprehensible and uncontrollable forces of nature into manageable challenges.&lt;/p&gt;

&lt;p&gt;Forthe first time in history, more people die today from eating too much than from eating too little; more people die from old age than from infectious diseases; and more people commit suicide than are killed by soldiers, terrorists and criminals combined. In the early twenty-first century, the average human is far more likely to die from bingeing at McDonald’s than from drought, Ebola or an al-Qaeda attack.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;翻译提炼下截取的这三个段落:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;饥荒，瘟疫和战争一直是世代困扰智人的三大难题，智人在第三个千年第一次战胜了饥荒，瘟疫和战争，或者说基本控制了这三大难题.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;的确是新颖的观点，第一次发现可以从这个视角来看人类的历史，开篇的这些惊人之语，只是开胃菜，也是论述智神诞生的铺垫，因为当智人战胜了这三大难题后，智人的使命或者说智人未来的福祉会是什么，追求永生还是获取极乐？这个问题明显是一个无限开放，无限发散的问题，整本书就是沿着这条主线展开的，而从智人脱颖而出的智神的诞生也是探寻这个问题过程中导致的结果之一，书中在探寻这个问题的过程中逐步展开更多的命题，抛出振聋发聩，令人耳目一新的论点，让人震惊，叹息，恐惧，并引起深思。&lt;/p&gt;

&lt;p&gt;因为我是差不多半个月的时间陆续读完全书，对书中内容的印象是碎片化的，写下此文时也不是正襟危坐，思绪连贯的行文，而是在手机或电脑上迅速记下一些思绪的片段，着重对一些触动我的部分展开讨论，现遴如下：&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;人类有灵魂而动物没有灵魂是错的， 灵魂是不存在的&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;这个论点既不是无神论，也不是唯物主义，而是经过大量的心理学实验的论断，智人从动物中脱颖而出并最终统治这个世界当然不是因为独有的灵魂，而仅仅是因为智人可以想象并编造出这个世界上没有的东西，并因此而为之达成规模无限扩大的合作，这才是智人胜出的关键，之所以这里说到的是智人，而不是人类，是因为一些与智人同源的一些人类分支已经灭绝了，而可怕的事实是灭绝的原因可能与智人直接相关。 乍一看，这个观点仅仅是对上一部《人类简史》中观点的呼应，但书中讨论了很多心理学实验，进一步佐证和加强了这个观点。并且这个观点也将智人拉下了神坛，顺便给人文主义一击。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;人文主义(Humanism)不过是另一种宗教而已，数据(Dataism)主义也是&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;这个不仅对人文主义是沉重一击，也击到了我，人文主义不是人类曙光吗？引领人类摆脱宗教，战胜愚昧。作者有很多理由，多个维度告诉你它仅仅是另一种宗教，这是一个激怒无数人的论调，因为人文主义不单单是一种主义，在当下语境，它是和自由主义，民主，市场化，法律等等的观念产物紧密相连，是目前人类社会的基石。而往往认为它是和宗教完全不同的。看到这个论调的时候我猛然想到汤因比的《历史研究》里曾把社会主义和基督教作类比，但仍旧无法立刻接受把人文主义与基督教作类比。而这个论调更要命的是否定智人的自由意志，而自由意志是所有人类法律，市场，良知，道德的基石。很多抛弃人文主义的人开始倒向数据主义，而数据主义得益于日益飞速发展的计算机互联网技术，凭借惊人的算力，AI的逐步演进，生物技术的突破，俨然成为了另一种宗教。人有丰富的情绪，在人文主义者看来这是人的价值所在，独特之处，而在数据主义者看来不过是一些人体的生化反应而。孰对孰错，孰优孰劣，交给时间吧！&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;智神会导致智人的消亡，如同智人导致了非智人人类的消亡一样&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;智神如何导致智人消亡我们没看到过，但是智人导致其他人类的消亡却有考古和历史证据，而智神们是脱胎于现在的人类，也许通过基因技术，数据特权，悄无声息的崛起。所谓的超人诞生，智人消亡，这不禁让人联想到纳粹主义，想到尼采，但都不能与之同日而语，也许这个过程是和平演进，底层的民众如大梦初醒时一切都已经晚了，因为智神已经出现，无论从智力，体力，智神都完全碾压智人，智人比任何一个时代都绝望，“富不过三代，穷不过三代”，这个规律不再适用，智人厄运不止，最终消亡。这种图景也许是很多普通人无法接受的，但是果真如赫拉利所言，智人又能怎样呢？你只能期盼赫拉利错了。&lt;/p&gt;

&lt;p&gt;当然整本书绝不仅仅是以上的这些观点，只是以上的这些观点最触动我，也能呼应很多以前看过的书，是一次很好的对思维方式和观念结构的SPA，至于书中的一些观点的对错其实并不重要，启发和击中我才是最重要的，其中所提供的一些视角和思考方法也是独一份，独特到我很快要被它安利了，但是我又要保持警惕，不至于陷入&amp;quot;赫拉利主义&amp;quot;。放眼全球，貌似赫拉利在中国最火，似乎我们又狂热的认为如获至宝，就跟很多年前马克思主义被引进时，而事实上赫拉利如美国很多畅销书作家一样，只是提出了一种新的观点和研究成果，既不是真理，也不是终极预言，却引来很多国内互联网大佬和学者的热烈讨论，实属奇观，如果仅是讨论学术，那真是太好了，说明国内思想学术之活跃，如果因为其他，那也是奇观！&lt;/p&gt;
</description>
        <pubDate>Sun, 25 Oct 2020 04:54:12 +0800</pubDate>
        <link>http://longlinht.github.io//read-homo-deus</link>
        <guid isPermaLink="true">http://longlinht.github.io//read-homo-deus</guid>
      </item>
    
      <item>
        <title>在Flutter中实现一个类似Android中的BottomSheetDialog</title>
        <description>&lt;p&gt;从屏幕底部滑出的这种弹窗实在是太普遍的需求了，所以Flutter不可能不提供，一查文档，果然有一个API直接就可以调出Dialog: showModalBottomSheet, 这个API有很多入参，但是如果不需要对Dialog的外观和行为有特殊的定制需求的话，值传递前两个参数就可以了。 API看起来非常简单，但是我看到网上有些blog文章对这个API的使用是错误的，所以我贴出我实现了上方圆角dialog的代码:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;void openBottomSheet(context) {
  showModalBottomSheet(
    backgroundColor: Colors.white,
    context: context,
    shape: RoundedRectangleBorder(
      borderRadius: BorderRadius.only(topLeft: Radius.circular(18), topRight: Radius.circular(18))
  ),

  builder: (builder) {
      return new Container(
        child: Wrap(
          children: &amp;lt;Widget&amp;gt;[
            getListTile(Icons.more, Colors.black45, &amp;quot;More&amp;quot;, context),
            getListTile(Icons.favorite, Colors.pink, &amp;quot;Favourites&amp;quot;, context),
            getListTile(Icons.account_box, Colors.blue, &amp;quot;Profile&amp;quot;, context),
            new Divider(
              thickness: 2.0,
              height: 10.0,
            ),
            getListTile(Icons.exit_to_app, null, &amp;quot;Logout&amp;quot;, context),
          ],
        ),
      );
    },
  );
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这个圆角的实现，其实可以直接传入&lt;code&gt;backgroundColorback&lt;/code&gt;和&lt;code&gt;shape&lt;/code&gt;参数，不用额外去添加一层i&lt;code&gt;Container&lt;/code&gt;，如果想实现圆角背景，通过&lt;code&gt;Container&lt;/code&gt;也可以实现，就是把&lt;code&gt;backgroundColor&lt;/code&gt;设置成透明，多了一道工序，没必要。背景阴影的效果通过&lt;code&gt;barrierColor&lt;/code&gt;来设置。很简单的一api，如果错误使用，不但不能优雅的实现功能，反而额外做了很多工作，却不能实现预期。看到的几个demo都没有正确使用这个API，所以特意为这个问题做此小记。&lt;/p&gt;
</description>
        <pubDate>Mon, 12 Oct 2020 02:20:12 +0800</pubDate>
        <link>http://longlinht.github.io//bottom-sheet-dialog-in-flutter</link>
        <guid isPermaLink="true">http://longlinht.github.io//bottom-sheet-dialog-in-flutter</guid>
      </item>
    
      <item>
        <title>Kotlin synthetic binding view is null in Fragment</title>
        <description>&lt;p&gt;Kotlin provide a handy and concise way to access views in xml layout from code, it works well, but When I create a subclass of &lt;code&gt;DialogFragment&lt;/code&gt;, in its method &lt;code&gt;onCreateView&lt;/code&gt;, I access synthetic binding view, it seems all is fine, but when run these code, app crash. In logcat, I got this &lt;code&gt;NullPointerException&lt;/code&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Caused by: java.lang.NullPointerException: Attempt to invoke virtual method &amp;#39;android.view.View android.view.View.findViewById(int)&amp;#39; on a null object reference&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I&amp;#39;m sure synthetic statement is imported and view id is right, it confused me a bit. So I Google Kotlin synthetic binding view related web pages, finally I found a solution:&lt;/p&gt;

&lt;p&gt;Just move accessing syntheic binding view statement from &lt;code&gt;onCreateView&lt;/code&gt; to &lt;code&gt;onViewCreated&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The problem is that I am accessing it too soon, When I delay the chance to access view, all works well. Magic! But it’s nothing magical, if you decompile the bytecode (By going toTools -&amp;gt; Kotlin -&amp;gt; Show Kotlin Bytecode and then selecting Decompile in the pane) and take a look at the generated java class, you’ll see that all it does is call findViewById() for us. Although this is a simple problem, but it is useful to record it.&lt;/p&gt;
</description>
        <pubDate>Wed, 09 Sep 2020 02:20:12 +0800</pubDate>
        <link>http://longlinht.github.io//kotlin-synthetic-view-binding-view-is-null-in-fragment</link>
        <guid isPermaLink="true">http://longlinht.github.io//kotlin-synthetic-view-binding-view-is-null-in-fragment</guid>
      </item>
    
      <item>
        <title>Kotlin中的&quot;静态&quot; 方法和域</title>
        <description>&lt;p&gt;最近开始尝试在现有的工程中使用Kotlin，刚开始使用时感觉语法简洁，代码量也少了很多，语法层面的防空，可以直接访问布局控件这些特性，都让人耳目一新，但是当我要定义静态方法和静态类时，不爽的体验一下子就上来了，所以通过此文来一探Kotlin&amp;quot;静态&amp;quot; 的究竟。
  先来看静态方法， 很遗憾，Kotlin中没有&lt;code&gt;static&lt;/code&gt;关键字，需要将静态方法放在&lt;code&gt;companion object&lt;/code&gt;中的代码块中，因此：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;class Foo {
  public static int a() { return 1; }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;就变成了这样:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;class Foo {
  companion object {
     fun a() : Int = 1
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;可以在Kotlin代码中这样使用该类:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;Foo.a();
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在Java代码中:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;Foo.Companion.a();
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如果你不喜欢使用&lt;code&gt;Companion&lt;/code&gt;, 你可以对该静态方法添加&lt;code&gt;@JvmStatic&lt;/code&gt;注解:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;class Foo {
  companion object {
    @JvmStatic
    fun a() : Int = 1;
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;也可以命名你的&lt;code&gt;companion&lt;/code&gt;类:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;class Foo {
  companion object Blah {
    fun a() : Int = 1;
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;然后可以这样调用:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;Foo.Blah.a() 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;然后来看静态域， 比起静态方法，静态域的情况有所不同，虽然也可以这样定义:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;class Foo {
  companion object {
    val MY_CONSTANT = &amp;quot;MY_CONSTANT&amp;quot;
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;但是会自动为&lt;code&gt;MY_CONSTANT&lt;/code&gt;生成getter和setter方法，相当于实例域访问，开销会比静态方法大，不推荐此种定义方法。可以这样定义:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;object Foo {
    const val MY_CONSTANT = &amp;quot;MY_CONSTANT&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;上面定义的object Foo可以全局访问:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;Foo.MY_CONSTANT
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;而companion object中定义的&lt;code&gt;const var MY_CONSTANT&lt;/code&gt;是不可以全局访问的。 当然了，静态域为了避免访问时的Companion，也可以在定义时添加&lt;code&gt;@StaticField&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;到此Kotlin中&lt;code&gt;静态&lt;/code&gt;相关的部分基本已经覆盖到了，个人觉得这个companion object不是什么好的设计，远没有Java的static关键字来的简洁和表达力。&lt;/p&gt;
</description>
        <pubDate>Thu, 03 Sep 2020 04:54:12 +0800</pubDate>
        <link>http://longlinht.github.io//static-method-in-kotlin</link>
        <guid isPermaLink="true">http://longlinht.github.io//static-method-in-kotlin</guid>
      </item>
    
      <item>
        <title>基于DrawerLayout实现直播抽屉</title>
        <description>&lt;p&gt;直播间里右侧的滑出抽屉现在几乎成了主流直播的标配，无论是映客还是Bigo，都很早就上线了抽屉。我所在的这个产品最近也要上同样的功能，因此需要简单实现一个。
  要实现一个简单的侧滑抽屉，最先想到的就是直接使用&lt;code&gt;DrawerLayout&lt;/code&gt;，但是无法满足产品的一个手势要求: 在屏幕任何位置都可以调出和收起抽屉。&lt;code&gt;DrawerLayout&lt;/code&gt; 的默认行为是只能从屏幕边缘调出。因此需要改变DrawerLayout的默认行为，使期能够从屏幕任何位置调出，这就需要通过反射修改drawerlayout的edgesize属性，因为drawerlayout还可以通过长按调出，我们的产品需求并不需要这个行为，因此也需要屏蔽掉，通过一个静态方法来统一实现：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;public static void setDrawerLeftEdgeSize(DrawerLayout drawerLayout,
                                             float percent) {
    if (drawerLayout == null)
        return;
    try {
        //获取 ViewDragHelper，更改其 edgeSizeField 为 displayWidthPercentage*屏幕大小
        Field rightDraggerField = drawerLayout.getClass().getSuperclass().getDeclaredField(&amp;quot;mRightDragger&amp;quot;);
        rightDraggerField.setAccessible(true);
        ViewDragHelper rightDragger = (ViewDragHelper) rightDraggerField.get(drawerLayout);

        Field edgeSizeField = rightDragger.getClass().getDeclaredField(&amp;quot;mEdgeSize&amp;quot;);
        edgeSizeField.setAccessible(true);
        int edgeSize = edgeSizeField.getInt(rightDragger);

        edgeSizeField.setInt(rightDragger, Math.max(edgeSize, (int)(UIUtils.getScreenWidth() * percent)));

        //获取 Layout 的 ViewDragCallBack 实例“mLeftCallback”
        //更改其属性 mPeekRunnable
        Field rightCallbackField = drawerLayout.getClass().getSuperclass().getDeclaredField(&amp;quot;mRightCallback&amp;quot;);
        rightCallbackField.setAccessible(true);

        //因为无法直接访问私有内部类，所以该私有内部类实现的接口非常重要，通过多态的方式获取实例
        ViewDragHelper.Callback leftCallback = (ViewDragHelper.Callback) rightCallbackField.get(drawerLayout);

        Field peekRunnableField = leftCallback.getClass().getDeclaredField(&amp;quot;mPeekRunnable&amp;quot;);
        peekRunnableField.setAccessible(true);
        Runnable nullRunnable = new Runnable() {
            @Override
            public void run() {

            }
        };
        peekRunnableField.set(leftCallback, nullRunnable);
    } catch (Exception e) {
        e.printStackTrace();
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;解决了edgsize和长按的问题后，马上又面临一个净屏页和抽屉的手势滑动冲突问题，并且还要注意两个UI元素的层级，基本的解决思路是根据滑动的方向和净屏页的状态在&lt;code&gt;DrawerLayout&lt;/code&gt;子类的onInterceptTouchEvent里来处理事件拦截，改变&lt;code&gt;DrawerLayout&lt;/code&gt;的默认行为，净屏页的逻辑不变，只向&lt;code&gt;DrawerLayout&lt;/code&gt;提供状态的get方法，具体实现如下：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;@Override
public boolean onInterceptTouchEvent(MotionEvent ev){
    Log.d(&amp;quot;drawerLayout&amp;quot;, &amp;quot;onInterceptTouchEvent, action: &amp;quot;
            + ev.getAction() + &amp;quot; x= &amp;quot; + ev.getX() + &amp;quot; y=&amp;quot; + ev.getY());

    boolean drawerOpen = this.isDrawerOpen(Gravity.RIGHT);
    boolean pureMode = contentView.isPureMode();

    switch(ev.getAction()) {
        case MotionEvent.ACTION_DOWN:
            mLastX = ev.getX();
            mLastY = ev.getY();

            /*
            final View touchedView = findTopChildUnder((int) mLastX, (int) mLastY);
            boolean isContent = isContentView(touchedView);


            if (!drawerOpen &amp;amp;&amp;amp; isContent) {
                return false;
            }
              */

            break;
        case MotionEvent.ACTION_MOVE:
            float dx = ev.getX() - mLastX;
            float dy = ev.getY() - mLastY;

            boolean horizontal = Math.abs(dx) &amp;gt; Math.abs(dy);

            if (!pureMode &amp;amp;&amp;amp; dx &amp;lt; 0 &amp;amp;&amp;amp; horizontal) {

            } else if(!pureMode &amp;amp;&amp;amp; dx &amp;gt; 0 &amp;amp;&amp;amp; drawerOpen &amp;amp;&amp;amp; horizontal){

            } else {
                return false;
            }

            break;
        default:
            break;
    }
    return super.onInterceptTouchEvent(ev);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这样用最小的开发成本完成了产品的需求，实现了主流直播产品的抽屉功能。唯一的小瑕疵是直播间上下滑动时不能自动收起抽屉，这个因为并不是产品很在意的点，再加上产品需求紧急，就没有深究。当然了，这个抽屉功能其实可以抽取出来做成一个通用的抽屉，提供不同的接口来满足定制要求。&lt;/p&gt;

&lt;p&gt;tips：&lt;code&gt;DrawerLayout&lt;/code&gt;显示区域穿透的问题可以这样解决：
将显示区域的clickable属性设置为true。&lt;/p&gt;
</description>
        <pubDate>Wed, 29 Jul 2020 04:54:12 +0800</pubDate>
        <link>http://longlinht.github.io//implement-live-drawer</link>
        <guid isPermaLink="true">http://longlinht.github.io//implement-live-drawer</guid>
      </item>
    
      <item>
        <title>为什么学习设计模式</title>
        <description>&lt;p&gt;设计模式，可能是每一个程序员都绕不过去的话题，有人认为特别重要，有人对其嗤之以鼻，也有人并不是很确定它的重要性。为什么要学习设计模式，这么多年以来其实我也没有看到一个很好的回答，前一阵在Youtube看到一个讲Android系统开发的youtuber的主页，发现他的一篇很短的文章探讨了这个问题，看完后感觉醍醐灌顶，因此有冲动翻译并记录下其主要的观点。&lt;/p&gt;

&lt;p&gt;编程如下棋，一个新手刚开始接触时，首先要了解能够正常下棋的要素，如棋子，棋盘，要熟悉棋子移动，吃子，将军的规则，等这些都了解了以后，就可以正常下棋了，虽然可能下的不好，但是渐渐的，开始领会一些这个游戏的基本规律，如何占取优势，如何使用策略，通过一次次的棋局，逐步的识别出一些可能是很愚蠢的错误，并在以后的棋局中尽量避免，一个新手也可能下棋下的越来越好。&lt;/p&gt;

&lt;p&gt;但是一个人如果想成为下棋的大师，却需要学习大师们所下过的棋局。隐藏在这些棋局中的模式必须通过理解，记忆，反复应用，最后成为一个人的本能。这些模式可能是成千上万的，开放模式更是繁多，以至于有很多关于其变化的书籍。 游戏中模式和结束模式也很普遍，作为大师们必须熟悉它们。&lt;/p&gt;

&lt;p&gt;编程也一样，首先学习规则，学习算法，数据结构，熟悉了这些后就可以编程了，尽管所写的代码会比较蹩脚。之后，开始学习软件设计的原则，如结构化编程，模块化编程，面向对象编程，如高内聚低耦合的重要性，如信息隐藏和依赖管理。等这些都学习了以后，一个人要想成为真正的编程大师，还是需要学习大师们的设计，并深入这些设计，举一反三，这些模式必须被理解，记忆，反复应用，最后成为一个人的本能。&lt;/p&gt;

&lt;p&gt;这篇文章本来就很短，但是我依旧要提炼出本文要划重点的句子:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;一个人要想成为真正的编程大师，还是需要学习大师们的设计，并深入这些设计，举一反三，这些模式必须被理解，记忆，反复应用，最后成为一个人的本能。&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        <pubDate>Fri, 08 May 2020 04:54:12 +0800</pubDate>
        <link>http://longlinht.github.io//why-learn-design-pattern</link>
        <guid isPermaLink="true">http://longlinht.github.io//why-learn-design-pattern</guid>
      </item>
    
      <item>
        <title>解决TextView中emoji被截断的问题</title>
        <description>&lt;p&gt;理论上TextView中包含emoji显示是没有问题的，问题出在如果TextView限制了宽度，且末尾包含了emoji字符，但是又不够显示，则会出现乱码的情况，原因是单个emoji由两个字符组成，TextView在截断字符时按单个字符截断，所以就有emoji的两个字符被截断后显示的情况，TexView自然无法正常显示。网上有很多解决办法，思路都是通过改变TextView的行为来规避这个问题，但都不理想，在一些特殊情况下仍然有问题。后来我改变了思路，不对TextView做任何更改，而是通过保证emoji本身不被截断来解决问题。&lt;/p&gt;

&lt;p&gt;考虑这样一个场景，直播间顶部主播区域的主播昵称，肯定是有字数限制的，如果昵称中包含emoji，如何保证emoji不被截断，并且不丧失在昵称过长后需要...的功能?&lt;/p&gt;

&lt;p&gt;代码如下:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;private void setAnchorName(String nick) {
    if (TextUtils.isEmpty(nick)) {
        labelUserName.setText(&amp;quot;&amp;quot;);
        return;
    }
    int len = TextCharUtils.getCurLength(nick);
    if (len &amp;lt;= 8) {
        labelUserName.setText(nick);
        return;
    }
    String newNick = TextCharUtils.substring(nick, 6) + &amp;quot;...&amp;quot;;
    labelUserName.setText(newNick);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;思路很好理解，就是预先算出String的长度，来决定要不要做处理。 准确计算字符长度的工具类如下:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;public class TextCharUtils {
    /**
     * 获取字符串中个数（汉字、emoji算2个长度，数字、英文算一个）
     *
     * @param source
     * @return
     */
    public static int getCurLength(String source) {
        if (TextUtils.isEmpty(source)) {
            return 0;
        }
        int codePointCount = source.codePointCount(0, source.length());
        int temp = 0;
        int size = 0;
        for (int i = 1; i &amp;lt;= codePointCount; i++) {
            int index = source.offsetByCodePoints(0, i);
            String sub = source.substring(temp, index);
            if (&amp;quot;&amp;quot;.equals(sub)) {
                continue;
            }
            size += getCharSize(sub.charAt(0));
            temp = index;
        }
        return size;
    }

    /**
     * 截取字符串（汉字、emoji算2个长度，数字、英文算一个）
     *
     * @param source
     * @param end
     * @return
     */
    public static String substring(String source, int end) {
        if (TextUtils.isEmpty(source)) {
            return source;
        }
        StringBuffer sb = new StringBuffer();
        int codePointCount = source.codePointCount(0, source.length());
        int temp = 0;
        int size = 0;
        for (int i = 1; i &amp;lt;= codePointCount; i++) {
            int index = source.offsetByCodePoints(0, i);
            String sub = source.substring(temp, index);
            if (TextUtils.isEmpty(sub)) {
                continue;
            }
            size += getCharSize(sub.charAt(0));
            if (size &amp;gt; end) {
                break;
            }
            sb.append(sub);
            temp = index;
        }
        return sb.toString();
    }

    public static int getCharSize(char word) {
        return (isChineseChar(word) || isEmojiCharacter(word)) ? 2 : 1;
    }

    /**
     * 计算中文字符与表情字符
     */
    public static Pair&amp;lt;Integer, Integer&amp;gt; getSpecialCharNum(CharSequence sequence) {
        if (TextUtils.isEmpty(sequence)) {
            return new Pair&amp;lt;&amp;gt;(0, 0);
        }
        int chineseNum = 0, emojiNum = 0;
        for (int i = 0; i &amp;lt; sequence.length(); i++) {
            char word = sequence.charAt(i);
            if (isChineseChar(word)) {//中文
                chineseNum++;
            }

            if (isEmojiCharacter(word)) {
                emojiNum++;
            }
        }
        return new Pair&amp;lt;&amp;gt;(chineseNum, emojiNum / 2);
    }

    public static CharSequence getSubString(CharSequence sequence, int maxChar) {
        if (TextUtils.isEmpty(sequence)) {
            return sequence;
        }

        int size = 0;
        for (int i = 0; i &amp;lt; sequence.length(); i++) {
            char word = sequence.charAt(i);
            if (isChineseChar(word)) {
                size += 2;
            } else {
                size++;
            }

            if (size &amp;gt;= maxChar) {
                return sequence.subSequence(0, i + 1);
            }
        }

        return sequence;
    }

    /**
     * 判断是否是中文
     */
    public static boolean isChineseChar(char c) {
        Character.UnicodeBlock ub = Character.UnicodeBlock.of(c);
        return ub == Character.UnicodeBlock.CJK_UNIFIED_IDEOGRAPHS
                || ub == Character.UnicodeBlock.CJK_COMPATIBILITY_IDEOGRAPHS
                || ub == Character.UnicodeBlock.CJK_UNIFIED_IDEOGRAPHS_EXTENSION_A
                || ub == Character.UnicodeBlock.CJK_UNIFIED_IDEOGRAPHS_EXTENSION_B
                || ub == Character.UnicodeBlock.CJK_SYMBOLS_AND_PUNCTUATION
                || ub == Character.UnicodeBlock.HALFWIDTH_AND_FULLWIDTH_FORMS
                || ub == Character.UnicodeBlock.GENERAL_PUNCTUATION;
    }

    public static boolean isEmojiCharacter(char codePoint) {
        return !(codePoint == 0x0 || codePoint == 0x9 || codePoint == 0xA ||
                codePoint == 0xD || codePoint &amp;gt;= 0x20 &amp;amp;&amp;amp; codePoint &amp;lt;= 0xD7FF);
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
        <pubDate>Wed, 22 Apr 2020 04:54:12 +0800</pubDate>
        <link>http://longlinht.github.io//fix-textview-emoji-problem</link>
        <guid isPermaLink="true">http://longlinht.github.io//fix-textview-emoji-problem</guid>
      </item>
    
      <item>
        <title>最简LeakCanary原理解析</title>
        <description>&lt;p&gt;LeakCanary现在几乎成了Android开发过程中的一个标配，使用起来非常简单，能够帮助开发者发现和规避大部分的内存泄露问题。虽然大部分的开发者都或多或少，或深或浅的接触过LeakCanary，说起来是比较熟悉的一个第三方框架了，但是谈到LeakCanary的原理可能就会陌生很多。虽然网上也有非常多的讲解LeakCanary的文章，但是很多博文要么陷入无止境的代码细节中，要么就泛泛而谈，都不能很清楚的将LeakCanary的原理讲清楚。这篇文章尽力规避前两种文章的问题，用最小的篇幅把LeakCanary的原理讲清楚。&lt;/p&gt;

&lt;h4&gt;LeakCanary到底是怎么工作的?&lt;/h4&gt;

&lt;p&gt;LeakCanary能够准确，及时地检测到内存泄露，有以下几个关键点&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;检测保留的实例&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;LeakCanary能够工作的基石是一个叫做ObjectWatcher的库，它hook了Android中Activity和Fragment的生命周期，能够自动检测到Activity和Fragment的销毁和将要被GC，这些被检测到的Activity和Fragment的实例被传给了&lt;code&gt;ObjectWatcher&lt;/code&gt;，&lt;code&gt;ObjectWatcher&lt;/code&gt;以WeakReference持有他们。如果这些WeakReference在5秒后或者一次GC周期以后还没有被清理，那么LeakCanary认为这些实例被保留了，没有被回收，泄露发生了。检测没有被回收的实例是LeakCanary能够工作起来的基石，也是后续处理的基础，这一点非常重要。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Dump 堆&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;这一步需要对检测到的泄露进行处理，当然也不是检测到一个实例就会触发dump，而是有一个阈值，当达到一定数量实例的泄露后就会触发LeakCanary将Java堆内存dump到&lt;code&gt;.hprof&lt;/code&gt;文件中去，当然了，这个文件存储在Android文件系统中。这个触发dump的阈值是如何确定的呢？如果App还可见，那这个阈值默认是5，如果App不可见，阈值默认是1。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;分析Java 堆&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;LeakCanary使用&lt;code&gt;Shark&lt;/code&gt;来分析&lt;code&gt;.hprof&lt;/code&gt;文件，找出阻止实例被回收的引用链:leak trace.其实leak trace的另一个名字是GC Root到被引用实例的最短强引用路径。一旦leak trace确定了，LeakCanary会根据内置的对Android的知识库来推断出leak trace上哪个实例泄露了。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Leak分组&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;LeakCanary使用泄露的状态信息，将引用链缩小为可能引起泄露的子引用链，并且在界面上显示出来，也就是我们在LeakCanary界面上看到的信息。有的泄露可能不相关，但是引用链相同，也会被认为是同一个引用链，所以泄露会根据相同的子引用链分组。&lt;/p&gt;

&lt;p&gt;以上就是LeakCanary基本原理的关键点，相信也是最简单的对LeakCanary原理的描述了吧!&lt;/p&gt;
</description>
        <pubDate>Mon, 11 Nov 2019 04:54:12 +0800</pubDate>
        <link>http://longlinht.github.io//most-simple-leakcanary-principle</link>
        <guid isPermaLink="true">http://longlinht.github.io//most-simple-leakcanary-principle</guid>
      </item>
    
      <item>
        <title>ImageSpan的定制使用</title>
        <description>&lt;p&gt;最近在做一个具体业务需求时，为了实现UI设计的要求，需要实现在同一段文字中，有一段文字是需要有形状的背景色，有一段文字中还有网络图片的插入，如果要达到这两个要求，简单的使用SpannableStringBuilder肯定是达不到要求的，虽然SpannableStringBuilder可以设置背景色，但是并不能绘制形状，说白了就是只能设置颜色，不能设置文字的背景图片。想要在文字中插入图片，可以直接使用ImageSpan，但是ImageSpan并不能加载网络图片。因此这种简单的使用方式都是行不通的，需要考虑去定制ImageSpan实现我们特殊的要求。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;实现给同一段文字的一部分文字区域设置背景图片&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;这个功能的实现还是要继承ImageSpan，将我们的背景图片传进去，并且override ImageSpan的draw方法，根据对文字区域的测量，分别绘制出背景和文字。实现代码如下:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;// BgImageSpan

public class BgImageSpan extends ImageSpan {

    private int textSize = 20;
    private int color = Color.GRAY;
    private TextView mTextView;
    static float textboundhight;
    static float textY;
    String mText;

    public BgImageSpan(Drawable d, TextView tv, String text) {
        super(d);
        mTextView = tv;
        mText = text;
        textSize = (int) mTextView.getTextSize();
    }


    @Override
    public void draw(Canvas canvas, CharSequence text, int start, int end, float x, int top, int y,
                     int bottom, Paint paint) {

        String str = mText;
        Rect bounds = new Rect();
        paint.setTextSize(textSize);
        paint.getTextBounds(str, 0, str.length(), bounds);
        int textHeight = bounds.height();
        int textWidth = bounds.width();

        getDrawable().setBounds(0, top, (int)(bounds.width() * 1.3) , bottom);
        super.draw(canvas, str, start, end, x, top, y, bottom, paint);
        paint.setColor(mTextView.getTextColors().getDefaultColor());
        paint.setTypeface(Typeface.create(&amp;quot;normal&amp;quot;, Typeface.NORMAL));

        Rect bounds1 = getDrawable().getBounds();

        float textX = x + bounds1.width() / 2 - bounds.width() / 2;
        if (textboundhight == 0) {
            textboundhight = bounds.height();
            textY = (bounds1.height()) / 2 + textboundhight / 2;
        }
        canvas.drawText(str, textX, textY, paint);
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;使用方法和ImageSpan并没有什么区别:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;String username = &amp;quot;用户名：&amp;quot;;
String message = &amp;quot;哈哈，我是一个天才&amp;quot;;

SpannableStringBuilder ssb = new SpannableStringBuilder(username);
ssb.append(message);

Rect bounds = new Rect();
Paint paint = mContent.getPaint();
paint.getTextBounds(username, 0, username.length(), bounds);

Drawable bgDrawable = getDrawable(R.drawable.round_rect);
bgDrawable.setBounds(0, 0, (int)(bounds.width() * 1.3), bounds.height());

ImageSpan nameBgSpan = new BgImageSpan(bgDrawable, mContent, username);
ssb.setSpan(nameBgSpan, 0, username.length(), Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);

ForegroundColorSpan contentColorSpan = new ForegroundColorSpan(Color.parseColor(&amp;quot;#ffc800&amp;quot;));
ssb.setSpan(contentColorSpan, username.length(), username.length() + message.length(), Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);

mContent.setText(ssb);
mContent.postInvalidate();
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;使用代码需要注意一下几点:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;传给BgImageSpan的Drawable需要设置Bounds，然后再传进去，否则可能会出现字符重叠的问题。&lt;/li&gt;
&lt;li&gt;如果设置了Bounds还有字符重叠错乱的问题，可以调用TextView的postInvalidate重绘。&lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
&lt;li&gt;第二种实现同一段文字的一部分文字区域设置背景图片&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;这种实现的思路很简单，就是通过inflate一个单独的布局，然后用这个inflate好的view生成图片，然后传给一个ImageSpan，即可完成，代码如下:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;View view = LayoutInflater.from(this).inflate(R.layout.container, null);
TextView textView = view.findViewById(R.id.tv_value);
textView.setText(username);

view.measure(View.MeasureSpec.makeMeasureSpec(0, View.MeasureSpec.UNSPECIFIED),
        View.MeasureSpec.makeMeasureSpec(0, View.MeasureSpec.UNSPECIFIED));
view.layout(0, 0, view.getMeasuredWidth(), view.getMeasuredHeight());
view.buildDrawingCache();
Bitmap bitmap = view.getDrawingCache();

ImageSpan nameBgSpan = new ImageSpan(this, bitmap);
ssb.setSpan(nameBgSpan, 0, username.length(), Spanned.SPAN_EXCLUSIVE_INCLUSIVE);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;实现一段文字中插入网络图片&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;插入网络图片和插入本地图片其实没有本质区别，要插入网络图片，就得先获取到网络图片后再设置到ImageSpan中去。代码如下：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;String url = &amp;quot;http://img2.imgtn.bdimg.com/it/u=1467875646,1039972052&amp;amp;fm=26&amp;amp;gp=0.jpg&amp;quot;;
RequestOptions options = new RequestOptions()
        .dontAnimate()
        .diskCacheStrategy(DiskCacheStrategy.NONE);

Glide.with(this)
        .load(url)
        .apply(options)
        .into(new CustomTarget&amp;lt;Drawable&amp;gt;() {
            @Override
            public void onResourceReady(@NonNull Drawable resource, @Nullable Transition&amp;lt;? super Drawable&amp;gt; transition) {
                if (resource instanceof BitmapDrawable) {
                    resource.setBounds(0, 0, 50, 50);

                    ImageSpan iconSpan = new ImageSpan(resource);
                    ssb.setSpan(iconSpan, username.length(), username.length() + 2, Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);

                    mContent.setText(ssb);
                    mContent.postInvalidate();
                }
            }

            @Override
            public void onLoadCleared(@Nullable Drawable placeholder) {

            }
        });
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;使用起来需要注意的问题和上面的BgImageSpan相同，也是先要设置Drawable的Bounds。&lt;/p&gt;

&lt;p&gt;虽然这两个实现看起来也没有什么难度，但是还是需要把这种解决过的，不那么常规的方法记录下来，以后遇到同样的问题可节省很多调研和调试的事件。&lt;/p&gt;
</description>
        <pubDate>Sat, 19 Oct 2019 04:54:12 +0800</pubDate>
        <link>http://longlinht.github.io//custom-image-span</link>
        <guid isPermaLink="true">http://longlinht.github.io//custom-image-span</guid>
      </item>
    
  </channel>
</rss>