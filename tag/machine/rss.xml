<?xml version="1.0" encoding="UTF-8" ?>

<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
   
      <title>longlinht.github.io/</title>
   
   <link>http://longlinht.github.io/</link>
   <description>编程，读书，思考，旅行，与机器对话，与人交谈，对神发问，探索，体验人生美丽的风景</description>
   <language>en-uk</language>
   <managingEditor> Tao He</managingEditor>
   <atom:link href="rss" rel="self" type="application/rss+xml" />
   
	<item>
	  <title>在Android中定制Emoji的实现</title>
	  <link>//custom-emoji-in-android</link>
	  <author>Tao He</author>
	  <pubDate>2021-01-15T22:00:00+08:00</pubDate>
	  <guid>//custom-emoji-in-android</guid>
	  <description><![CDATA[
	     <p>最近公司产品在评论输入中要加入定制emoji面板，因此趟了emoji这个浑水，现以此文记录期间踩过的坑和一些心得。要实现一个相对比较完善的emoji输入和显示的功能，需要解决两个主要的问题: 键盘和emoji表情的平滑切换和emoji的正确显示。前者其实和emoji本身不相关，因此放在后面讨论。先来探究定制emoji的实现方案。 </p>

<p>我们团队内部想到的最快的实现方案是定制googlefonts的NotoColorEmojiCompat.ttf, 使用EmojiCompact加载定制的ttf文件来显示我们定制的emoji。Google官方提供的NotoColorEmojiCompat的使用方法只有两种，一种方式是将NotoColorEmojiCompat.ttf文件放在assets目录，打入apk中使用，另一种方式是不打入apk，而是通过动态查询ContentProvider去查询获得，好处是不用将ttf文件打入apk包，坏处是查询到的ttf文件还是未定制的NotoColorEmojiCompat.ttf文件，实现不了定制的目的。我们的目标是在不打入这样一个7M的ttf文件的情况下实现定制目的，因此官方提供的这两种使用方式都不可取。因此就只剩下一条路，那就是app启动时下载我们定制的ttf文件，在EmojiCompat初始化时自己实现ttf的load过程，从而实现动态加载定制的emoji表情。</p>

<p>创建一个EmojiHelpler类来管理EmojiCompat的初始化和定制ttf的加载:</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">public class EmojiHelper {

    private static Context sContext;
    private static boolean sEmojiReady = false;

    public static void initCompat(Context context) {

        sContext = context;
        //EmojiCompat.Config config = new BundledEmojiCompatConfig(AppContext.get());
        EmojiCompat.Config config = new XLEmojiCompatConfig();

        config.setReplaceAll(true);
        config.registerInitCallback(new EmojiCompat.InitCallback() {
            @Override
            public void onInitialized() {
                super.onInitialized();
                Log.d(&quot;hetaod&quot;, &quot;onInitialized&quot;);
                //XLog.d(&quot;onInitialized&quot;);
            }

            @Override
            public void onFailed(@Nullable Throwable throwable) {
                super.onFailed(throwable);
                Log.d(&quot;hetaod&quot;, &quot;onFailed: &quot; + throwable.getMessage());
                //XLog.printStackTrace(throwable);
            }
        });


        EmojiCompat.init(config);
    }

    public static CharSequence process(CharSequence text) {
        if (sEmojiReady) {
            return EmojiCompat.get().process(text);
        }
        return text;
    }

    private static class XLEmojiCompatConfig extends EmojiCompat.Config {
        XLEmojiCompatConfig() {
            super(new XLMetadataRepoLoader());
        }
    }

    private static class XLMetadataRepoLoader implements EmojiCompat.MetadataRepoLoader {

        @Override
        public void load(@NonNull EmojiCompat.MetadataRepoLoaderCallback loaderCallback) {
            //String filePath = sContext.getCacheDir().getAbsolutePath() + &quot;/NotoColorrEmojiCompat.ttf&quot;;

            File file = new File(&quot;/sdcard/NotoColorEmojiCompat.ttf&quot;);
            FileInputStream fileInputStream = null;
            try {
                fileInputStream = new FileInputStream(file);
                loaderCallback.onLoaded(MetadataRepo.create(Typeface.createFromFile(file.getAbsolutePath()), fileInputStream));
            } catch (IOException e) {
                Log.d(&quot;hetaod&quot;, e.getMessage());
                //XLog.printStackTrace(e);
            } finally {
                //Util.safeClose(fileInputStream);
            }
        }
    }
}
</code></pre></div>
<p>加载定制ttf的关键是继承EmojiCompat和实现EmojiCompat.MetadataRepoLoader接口。在实现了初始化和加载定制ttf后，就剩最后一步，制作定制ttf文件，通过一些emoji的工具，可以轻松制作定制的emoji，我们的实现方式是使用未使用的unicode码来定义我们自己的emoji，在定制的ttf文件制作后以后，下载，初始化，加载，加载失败，卡在了加载这一步，我们定制的ttf文件加载失败，一直报如下的错误:</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">Cannot read metadata.
</code></pre></div>
<p>我们多次确认制作ttf的方法应该没有问题，但是仍旧加载失败，怀疑是Google做了限制，无法定制这个ttf文件，多次尝试无果后，我们放弃了这个方案。</p>

<p>放弃了上面这个方案后，我们选择了Github上的一个开源实现，简单易用，通过实现一个提供定制表情的provider就可以达到定制的目的。</p>

<p>Github地址: https://github.com/vanniktech/Emoji</p>

<p>使用方法：</p>

<ol>
<li>添加依赖：</li>
</ol>
<div class="highlight"><pre><code class="language-text" data-lang="text">implementation &#39;com.vanniktech:emoji:0.7.0&#39;
</code></pre></div>
<ol>
<li>实现EmojiProvider接口:</li>
</ol>
<div class="highlight"><pre><code class="language-text" data-lang="text">//实现EmojiProvider接口
public class CocoEmojiProvider implements EmojiProvider {
    @Override @NonNull
    public EmojiCategory[] getCategories() {
        return new EmojiCategory[] {
                new SimpleCategory()
        };
    }
}


//emoji分类
public class SimpleCategory implements EmojiCategory {
    private static final CocoEmoji[] EMOJIS = CategoryUtils.concatAll(SimpleCategoryChunk0.get());

    @Override @NonNull
    public CocoEmoji[] getEmojis() {
        return EMOJIS;
    }

    @Override @DrawableRes
    public int getIcon() {
        return 0;
    }

    @Override @StringRes
    public int getCategoryName() {
        return 0;
    }
}


// 定制emoji列表定义
final class SimpleCategoryChunk0 {
    @SuppressWarnings(&quot;PMD.ExcessiveMethodLength&quot;) static CocoEmoji[] get() {
        return new CocoEmoji[] {
                new CocoEmoji(0x1F580, new String[]{&quot;Hehe&quot;}, 0, 0, false),
                new CocoEmoji(0x1F581, new String[]{&quot;Mesume&quot;}, 0, 1, false),
                new CocoEmoji(0x1F582, new String[]{&quot;Ngenes&quot;}, 0, 2, false),
                new CocoEmoji(0x1F583, new String[]{&quot;Apaan sih&quot;}, 0, 3, false),
                new CocoEmoji(0x1F584, new String[]{&quot;Ngupil&quot;}, 0, 4, false),
                new CocoEmoji(0x1F585, new String[]{&quot;Bodo&quot;}, 0, 5, false),
                new CocoEmoji(0x1F586, new String[]{&quot;Berdoa&quot;}, 0, 6, false),
                new CocoEmoji(0x1F588, new String[]{&quot;Lempar tai&quot;}, 0, 7, false),
                new CocoEmoji(0x1F589, new String[]{&quot;Bengek&quot;}, 0, 8, false),
                new CocoEmoji(0x1F58E, new String[]{&quot;Jempol&quot;}, 0, 9, false),
                new CocoEmoji(0x1F58F, new String[]{&quot;tepuk tangan&quot;}, 0, 10, false),
                new CocoEmoji(0x1F591, new String[]{&quot;love&quot;}, 0, 11, false),
        };
    }

    private SimpleCategoryChunk0() {
        // No instances.
    }
}
</code></pre></div>
<ol>
<li>在布局中使用支持emoji的控件:</li>
</ol>
<div class="highlight"><pre><code class="language-text" data-lang="text">&lt;RelativeLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;
    android:layout_width=&quot;wrap_content&quot;
    android:layout_height=&quot;wrap_content&quot;
    android:padding=&quot;10dp&quot;
    android:orientation=&quot;horizontal&quot;&gt;

    &lt;com.vanniktech.emoji.EmojiTextView
        android:layout_width=&quot;match_parent&quot;
        android:layout_height=&quot;30dp&quot;
        android:id=&quot;@+id/quick_textview&quot;
        android:textColor=&quot;@color/CO_T1&quot;
        android:textSize=&quot;25sp&quot;
        android:gravity=&quot;center_horizontal&quot;
        /&gt;

&lt;/RelativeLayout&gt;
</code></pre></div>
<p>在此方案中仍旧是使用未使用的unicode来定义我们定制的emoji，而不是去定一个固定形式的字符串来定义。因此存在兼容老版本的问题，因为我们app的老版本未使用任何定制emoji，这个问题我们目前是简单的通过服务端替换来解决。</p>

<p>解决了emoji的显示问题，就该着手解决emoji面板和键盘平滑切换的问题了。需要键盘和其他面板切换的输入场景下一般的解决方案是使用KPSwitch实现。但是KPSwitch切换界面在嵌入到一个单独的view里面后，切换时有跳闪，体验不是很好，所以这种方案虽然实现起来最快，但是不符合交互要求，所以首先pass，还有一个方案是把emoji面板，键盘都整体做到一个透明的Activity中，和app其他的业务逻辑分离，吊起键盘相当于启动一个透明的activity，和输入相关的功能逻辑都封装到activity中。这种方案虽然隔离性很好，也相对独立，但是需要管理生命周期的问题，对我们现有的输入功能改动较大，所以也pass。排除了两种可行的方案后，要想改动最小，又能实现平滑的体验，就需要做到两点:</p>

<ol>
<li>这个输入功能还是得实现为一个自定义View，而不是一个Activity，这样对现有代码改动最小，影响最小。</li>
<li>要在不使用KPSwitch的情况下实现平滑切换。</li>
</ol>

<p>第一个要求好实现，不在赘述。要实现第二个要求也不是那么难，关键点如下:</p>

<ol>
<li>自定义View的特殊布局</li>
<li>关键的几个布局控制方法</li>
</ol>

<p>先来看布局:</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">&lt;LinearLayout
        android:layout_width=&quot;match_parent&quot;
        android:layout_height=&quot;wrap_content&quot;
        android:orientation=&quot;vertical&quot;
        &gt;

        &lt;!--键盘弹起后上，屏幕剩余部分--&gt;
        &lt;View
            android:id=&quot;@+id/layout_input_empty&quot;
            android:layout_width=&quot;match_parent&quot;
            android:layout_height=&quot;0dp&quot;
            android:layout_weight=&quot;1&quot;
            /&gt;

        &lt;!--键盘及其他交互UI部分--&gt;
        &lt;LinearLayout
            android:id=&quot;@+id/ll_bottom&quot;
            android:layout_width=&quot;match_parent&quot;
            android:layout_height=&quot;wrap_content&quot;
            android:focusable=&quot;true&quot;
            android:clickable=&quot;true&quot;
            android:focusableInTouchMode=&quot;true&quot;
            android:gravity=&quot;center_vertical&quot;

            &gt;

            &lt;LinearLayout
                android:layout_width=&quot;match_parent&quot;
                android:layout_height=&quot;wrap_content&quot;
                android:orientation=&quot;vertical&quot;
                &gt;

                &lt;cn.xiaochuankeji.zuiyouLite.widget.listener.FrameListenerLayout
                    android:id=&quot;@+id/publisher_top_listener&quot;
                    android:layout_width=&quot;match_parent&quot;
                    android:layout_height=&quot;wrap_content&quot;
                    android:layout_gravity=&quot;center_vertical&quot;
                    android:paddingLeft=&quot;15dp&quot;
                    android:paddingTop=&quot;5dp&quot;
                    android:paddingRight=&quot;15dp&quot;
                    android:background=&quot;@drawable/replay_comment_bg&quot;
                    &gt;

                    &lt;RelativeLayout
                        android:layout_width=&quot;match_parent&quot;
                        android:layout_height=&quot;wrap_content&quot;
                        android:gravity=&quot;center_vertical&quot;&gt;

                        &lt;cn.xiaochuankeji.zuiyouLite.widget.publisher.ReplaySomeoneTipView
                            android:id=&quot;@+id/replay_someone_tip_view&quot;
                            android:layout_width=&quot;match_parent&quot;
                            android:layout_height=&quot;wrap_content&quot;
                            android:layout_marginTop=&quot;14dp&quot;
                            android:layout_marginBottom=&quot;3dp&quot;
                            android:visibility=&quot;gone&quot; /&gt;


                        &lt;cn.xiaochuankeji.zuiyouLite.widget.publisher.QuickReplayView
                            android:id=&quot;@+id/quick_replay_view&quot;
                            android:layout_width=&quot;match_parent&quot;
                            android:layout_height=&quot;wrap_content&quot;
                            android:layout_below=&quot;@+id/replay_someone_tip_view&quot;
                            android:layout_marginTop=&quot;11dp&quot; /&gt;

                        &lt;LinearLayout
                            android:id=&quot;@+id/edit_scroll&quot;
                            android:layout_width=&quot;match_parent&quot;
                            android:layout_height=&quot;wrap_content&quot;
                            android:orientation=&quot;vertical&quot;
                            android:background=&quot;@drawable/comment_edit_bg&quot;
                            android:padding=&quot;8dp&quot;
                            android:layout_below=&quot;@+id/quick_replay_view&quot;
                            android:layout_toLeftOf=&quot;@+id/publisher_send_new&quot;
                            android:layout_marginBottom=&quot;12dp&quot;
                            &gt;

                            &lt;cn.xiaochuankeji.zuiyouLite.widget.publisher.PostCommentEditText
                                android:id=&quot;@+id/publisher_edit&quot;
                                android:layout_width=&quot;match_parent&quot;
                                android:layout_height=&quot;wrap_content&quot;
                                android:background=&quot;@color/CO_B3&quot;
                                android:hint=&quot;@string/comment_input_comment&quot;
                                android:lineSpacingExtra=&quot;2.4dp&quot;
                                android:maxLength=&quot;2000&quot;
                                android:maxLines=&quot;3&quot;
                                android:minLines=&quot;1&quot;
                                android:textColor=&quot;@color/CO_T1&quot;
                                android:textColorHint=&quot;@color/CO_T3&quot;
                                android:textCursorDrawable=&quot;@drawable/cursor_yellow&quot;
                                android:textSize=&quot;13sp&quot; /&gt;
                            &lt;!-- 选中的 视频/图片 文件列表 --&gt;
                            &lt;androidx.recyclerview.widget.RecyclerView
                                android:id=&quot;@+id/publisher_select_media_list&quot;
                                android:layout_below=&quot;@+id/publisher_edit&quot;
                                android:layout_width=&quot;wrap_content&quot;
                                android:layout_height=&quot;match_parent&quot;
                                android:layout_alignLeft=&quot;@+id/publisher_edit&quot;
                                android:layout_alignRight=&quot;@+id/publisher_edit&quot;
                                android:layout_marginTop=&quot;7dp&quot;
                                android:visibility=&quot;gone&quot; /&gt;
                        &lt;/LinearLayout&gt;


                        &lt;androidx.appcompat.widget.AppCompatImageView
                            android:id=&quot;@+id/publisher_send_new&quot;
                            android:layout_width=&quot;24dp&quot;
                            android:layout_height=&quot;24dp&quot;
                            android:layout_marginLeft=&quot;15dp&quot;
                            android:layout_alignBottom=&quot;@id/edit_scroll&quot;
                            android:layout_marginBottom=&quot;4dp&quot;
                            android:layout_alignParentRight=&quot;true&quot;
                            android:background=&quot;@drawable/selector_chat_send&quot; /&gt;


                        &lt;androidx.appcompat.widget.AppCompatImageView
                            android:id=&quot;@+id/publisher_image_new&quot;
                            android:layout_width=&quot;36dp&quot;
                            android:layout_height=&quot;36dp&quot;
                            android:paddingRight=&quot;12dp&quot;
                            android:paddingBottom=&quot;12dp&quot;
                            android:layout_below=&quot;@+id/edit_scroll&quot;
                            android:src=&quot;@drawable/ic_comment_select_image&quot; /&gt;

                        &lt;androidx.appcompat.widget.AppCompatImageView
                            android:id=&quot;@+id/publisher_emoji&quot;
                            android:layout_width=&quot;36dp&quot;
                            android:layout_height=&quot;36dp&quot;
                            android:layout_below=&quot;@+id/edit_scroll&quot;
                            android:layout_toRightOf=&quot;@id/publisher_image_new&quot;
                            android:paddingLeft=&quot;12dp&quot;
                            android:paddingBottom=&quot;12dp&quot;
                            android:src=&quot;@drawable/ic_comment_cocoemoji&quot; /&gt;

                        &lt;androidx.appcompat.widget.AppCompatImageView
                            android:id=&quot;@+id/publisher_at_new&quot;
                            android:layout_width=&quot;36dp&quot;
                            android:layout_height=&quot;36dp&quot;
                            android:layout_below=&quot;@id/edit_scroll&quot;
                            android:layout_toRightOf=&quot;@id/publisher_emoji&quot;
                            android:layout_marginLeft=&quot;12dp&quot;
                            android:paddingLeft=&quot;12dp&quot;
                            android:paddingBottom=&quot;12dp&quot;
                            android:src=&quot;@drawable/ic_comment_at&quot; /&gt;

                    &lt;/RelativeLayout&gt;


                &lt;/cn.xiaochuankeji.zuiyouLite.widget.listener.FrameListenerLayout&gt;


                &lt;!--emoji面板--&gt;
                &lt;FrameLayout
                    android:id=&quot;@+id/fl_bottom&quot;
                    android:layout_width=&quot;match_parent&quot;
                    android:layout_height=&quot;300dp&quot;
                    android:background=&quot;#f5f7fa&quot;
                    android:visibility=&quot;gone&quot;
                    &gt;

                    &lt;androidx.recyclerview.widget.RecyclerView
                        android:id=&quot;@+id/rv_emoji&quot;
                        android:layout_width=&quot;match_parent&quot;
                        android:layout_height=&quot;wrap_content&quot;
                        android:paddingTop=&quot;5dp&quot;
                        android:paddingLeft=&quot;5dp&quot;
                        android:paddingRight=&quot;5dp&quot;
                        /&gt;

                    &lt;androidx.appcompat.widget.AppCompatImageView
                        android:id=&quot;@+id/iv_emoji_delete&quot;
                        android:layout_width=&quot;54dp&quot;
                        android:layout_height=&quot;40dp&quot;
                        android:src=&quot;@drawable/ic_comment_delete&quot;
                        android:scaleType=&quot;centerInside&quot;
                        android:layout_gravity=&quot;bottom|right&quot;
                        android:layout_marginRight=&quot;15dp&quot;
                        android:layout_marginBottom=&quot;15dp&quot;
                        android:shadowColor=&quot;#33000000&quot;
                        android:shadowDx=&quot;3.0&quot;
                        android:background=&quot;@drawable/emoji_delete_bg&quot;
                        /&gt;


                &lt;/FrameLayout&gt;

            &lt;/LinearLayout&gt;
        &lt;/LinearLayout&gt;
    &lt;/LinearLayout&gt;
</code></pre></div>
<p>动态代码中几个关键的方法:</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">/**
  * 锁定内容View以防止跳闪
  */
public void lockContentViewHeight() {
    LinearLayout.LayoutParams layoutParams =
            (LinearLayout.LayoutParams) layout_input_empty.getLayoutParams();
    layoutParams.height = layout_input_empty.getHeight();
    layoutParams.weight = 0;
    layout_input_empty.requestLayout();
}

/**
  * 释放锁定的内容View
  */
public void unlockContentViewHeight() {
    postDelayed(() -&gt; {
        LinearLayout.LayoutParams layoutParams =
                (LinearLayout.LayoutParams) layout_input_empty.getLayoutParams();
        layoutParams.height = 0;
        layoutParams.weight = 1;
        //rc_content.requestLayout();
        ll_bottom.requestLayout();
        //requestLayout();
    }, 200);
}


public void hideEmoji() {
    iv_emoji.setImageResource(R.drawable.ic_comment_cocoemoji);
    lockContentViewHeight();
    rv_emoji.setVisibility(View.GONE);
    fl_bottom.setVisibility(GONE);
    unlockContentViewHeight();
    presentStatus = PublisherStatus.文字编辑;
    emojiVisible = false;
}

public void showEmoji(boolean animate) {
    iv_emoji.setImageResource(R.drawable.ic_comment_keyboard);
    if (!animate) {
        lockContentViewHeight();
        rv_emoji.setVisibility(View.VISIBLE);
        fl_bottom.setVisibility(VISIBLE);
        unlockContentViewHeight();
    } else {
        rv_emoji.setVisibility(View.VISIBLE);
        fl_bottom.setVisibility(VISIBLE);
    }
    //UIUtils.hideSoftInput((Activity) getContext());
    AndroidPlatformUtil.hideSoftInput((Activity) getContext());
    presentStatus = PublisherStatus.EMOJI;
    emojiVisible = true;
}
</code></pre></div>
<p>如何调用：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">private void onEmojiClick() {
    if (rv_emoji.getVisibility() == View.VISIBLE) {
        lockContentViewHeight();
        hideEmoji();
        unlockContentViewHeight();
        //UIUtils.showSoftInput(et_comment, getContext());
        AndroidPlatformUtil.showSoftInput(et_comment, getContext());
    } else {
        showEmoji(false);
    }
}
</code></pre></div>
<p>其实实现这个方案后，我也有点惊讶，KPSwitch那么复杂的逻辑，竟然可以简单的以这种方式实现。说明做一切事情都不可拘泥于过去成功的方案，应该大胆尝试新的方法，说不定就能收获到惊喜呢！</p>

	  ]]></description>
	</item>

	<item>
	  <title>First Lesson of Machine Learning</title>
	  <link>//first-lesson-of-machine-learning</link>
	  <author>Tao He</author>
	  <pubDate>2020-12-01T04:54:12+08:00</pubDate>
	  <guid>//first-lesson-of-machine-learning</guid>
	  <description><![CDATA[
	     <p>Two months ago, I made a decision for my career: learning machine learning from scratch. Machine learning involves many stuff of math while math is difficult. But I didnot give up in half way this time. Books, Youtube lectures, blogs, I collect learning materials as much as I can and do my best to learning it. 60 days passed, I have had a clarity understanding about some important concepts of Machine learing. In this article, I will figure out these concepts and their relations through 2 figures.</p>

<p><strong>Figure 1</strong> </p>

<p>This figure seems simple, but it reveals the relations of some important concepts.</p>

<p><img src="/assets/images/scratch_ml.jpg" /></p>

<p><strong>Figure 2</strong> </p>

<p>This figure describes more detail.</p>

<p><img src="/assets/images/machine_learning.png" /></p>

	  ]]></description>
	</item>

	<item>
	  <title>Review Matrix</title>
	  <link>//review-matrix</link>
	  <author>Tao He</author>
	  <pubDate>2020-11-23T04:54:12+08:00</pubDate>
	  <guid>//review-matrix</guid>
	  <description><![CDATA[
	     <p>Linear Algebra is prerequisite for Machine Learning while Matrix is the one of most important stuff in Linear Algebra. It is difficult to learn ML well in case of not 
familiar with Matrix. So it is time to review a few aspects of Matrix. Because of complexity of mathematical formula input, I will skip some details in main text, but attach them in three images(output from my Inkredible notes).</p>

<p><strong>Image 1</strong> (Learning notes output by Inkredible)</p>

<p><img src="/assets/images/IMG_20201203_201913.png" /></p>

<p>Image 1 involves:</p>

<ul>
<li><p>Matrix Definition</p></li>
<li><p>Matrix Addition and Multiplication</p></li>
</ul>

<p><strong>Image 2</strong> (Learning notes output by Inkredible)</p>

<p><img src="/assets/images/IMG_20201203_201928.png" /></p>

<p>Image 2 involves:</p>

<ul>
<li><p>Identity Matrix </p></li>
<li><p>Properties of Matrix:</p>

<ul>
<li>Not Commutative</li>
<li>Associativity</li>
<li>Distributivity</li>
</ul></li>
<li><p>Multiplication with the Identity Matrix</p></li>
<li><p>Inverse and Transpose</p></li>
</ul>

<p><strong>Image 3</strong> (Learning notes output by Inkredible)</p>

<p><img src="/assets/images/IMG_20201203_201950.png" /></p>

<p>Image 3 involves:</p>

<ul>
<li><p>Symetric Matrix</p></li>
<li><p>Multiplication by a Scalar</p></li>
<li><p>Compat Representation of System Linear Equation</p></li>
</ul>

	  ]]></description>
	</item>

	<item>
	  <title>Android module SDK化的实践</title>
	  <link>//using-maven-to-mananger-library</link>
	  <author>Tao He</author>
	  <pubDate>2020-11-21T04:54:12+08:00</pubDate>
	  <guid>//using-maven-to-mananger-library</guid>
	  <description><![CDATA[
	     <p>文章标题指的SDK化指的是将一个有多个module的Android工程中的特定module以aar的形式输出后被app模块依赖使用。那么如何在基本不改动代码的情况下实现这个要求，完成app模块对特定module的依赖呢?</p>

<p>最直接的想法就是把要SDK化的module输出为aar文件，然后在app模块添加对此aar文件的依赖。在解决完所有的编译错误以后，运行app后发生了crash，查看输出，是因为输出为aar的这个模块所依赖的一个类在运行时找不到，事实上就是这个远端依赖没有被打进apk包。很明显，直接输出aar然后依赖是不可行的。</p>

<p>远端依赖的类找不到，因为此module在输出为aar的时候并未将他的依赖打入aar包，那有没有办法将此module的所有依赖都打进aar包呢? 在线上搜索了一番后，还真找到了这样的一个gradle插件<a href="https://github.com/kezong/fat-aar-android">fat-aar-android</a>来做这件事，接入到工程中很简单:</p>

<ol>
<li>应用插件</li>
</ol>

<p>在project build gradle文件中加入如下代码:</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath &#39;com.android.tools.build:gradle:xxx&#39;
        classpath &#39;com.kezong:fat-aar:1.2.20&#39;
    }
}
</code></pre></div>
<ol>
<li>使用插件关键字来嵌入依赖</li>
</ol>

<p>将需要嵌入的依赖，修改implementation或api为embed</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">dependencies {
    implementation fileTree(dir: &#39;libs&#39;, include: &#39;*.jar&#39;)
    // java dependency
    embed project(path: &#39;:lib-java&#39;, configuration:&#39;default&#39;)
    // aar dependency
    embed project(path: &#39;:lib-aar&#39;, configuration:&#39;default&#39;)
    // aar dependency
    embed project(path: &#39;:lib-aar2&#39;, configuration:&#39;default&#39;)
    // local full aar dependency, just build in flavor1
    flavor1Embed project(path: &#39;:lib-aar-local&#39;, configuration:&#39;default&#39;)
    // local full aar dependency, just build in debug
    debugEmbed (name:&#39;lib-aar-local2&#39;,ext:&#39;aar&#39;)
    // remote jar dependency
    embed &#39;com.google.guava:guava:20.0&#39;
    // remote aar dependency
    embed &#39;com.facebook.fresco:fresco:1.11.0&#39;
    // don&#39;t want to embed in
    // implementation is not recommended because the dependency may be different with the version in application, resulting in the R class not found.
    compileOnly &#39;com.android.support:appcompat-v7:27.1.1&#39;
}
</code></pre></div>
<p>使用此插件除了会遇到资源冲突外，目前没有发现其他问题。但这个插件在github上的issue有点多，心里有点没底，所以还需要想其他的办法。</p>

<p>这两个方法被排除后，就想到用maven来管理依赖，更灵活，是更一般的做法。 将此module输出后上传到maven服务器，在app上添加对此module的远程依赖后，发现无法编译，找不到此module依赖中的类，这是因为没有在pom中添加依赖。将aar发布到maven和添加依赖配置的代码如下:</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">afterEvaluate {
    publishing {
        publications {
            release(MavenPublication) {
                artifact(&quot;$buildDir/outputs/aar/live-debug.aar&quot;) {
                    builtBy tasks.getByName(&quot;assembleDebug&quot;)
                }

                groupId = &quot;com.overseas.android.live&quot;
                artifactId = &#39;live&#39;
                version = &#39;1.0.8&#39;

                pom.withXml {
                    def dependenciesNode = asNode().appendNode(&quot;dependencies&quot;)
                    configurations.compile.dependencies.forEach { dep -&gt; addDependency(dependenciesNode, dep, &quot;compile&quot;) }
                    configurations.api.dependencies.forEach { dep -&gt; addDependency(dependenciesNode, dep, &quot;compile&quot;) }
                    configurations.implementation.dependencies.forEach { dep -&gt; addDependency(dependenciesNode, dep, &quot;runtime&quot;) }
                }
            }
        }

        repositories {
            maven {
                url = uri(&quot;https://xxx/repository/android-release/&quot;)

                credentials {
                    username = &quot;hetao&quot;
                    password = &quot;hetao&quot;
                }
            }
        }
    }
}
</code></pre></div>
<p>在用maven管理依赖时需要注意一下几点:</p>

<ul>
<li><p>需要关注发布的module是不是有远程依赖，有的话需要添加依赖配置</p></li>
<li><p>需要发布的module输出为debug版本，统一由app模块去做混淆</p></li>
<li><p>需要发布的module的混淆规则不能被遗漏，需要添加此配置:</p></li>
</ul>
<div class="highlight"><pre><code class="language-text" data-lang="text">defaultConfig {
    ...

    consumerProguardFiles &#39;proguard-rules.pro&#39;

    ...

}
</code></pre></div>
<p>不然会有因为混淆而找不到类的问题。</p>

	  ]]></description>
	</item>

	<item>
	  <title>用python脚本优雅的整理Kindle的标注和笔记</title>
	  <link>//using-python-parse-kindle-notes</link>
	  <author>Tao He</author>
	  <pubDate>2020-11-12T04:54:12+08:00</pubDate>
	  <guid>//using-python-parse-kindle-notes</guid>
	  <description><![CDATA[
	     <p>我是重度Kindle使用者，Kindle里面存满了各类书籍，经常会同时读两三本书，时间一长，多本书的标注和笔记都交叉记录在My Clippings.txt文本文件里，现在这个文件已经有几万行，每次手动去整理特定的一本书的标注和笔记时都极为头疼，还容易错漏，终于有一天实在忍不了了，就去网上找有没有整理kindle标注和笔记的服务，还真让我给找到了，clipping.io，在线服务，马上使用，上传My Clippings.txt文件，一切顺利，文件上传后开始分析整理文本，看到几本书的标注已经出来了，等全部整理结束后发现少了好几本书的，再次重新上传文件重试整理，问题依旧，空欢喜一场，依旧不能解决我的痛点，最近在读的两本书的标注和笔记恰好没有被整理出来，一怒之下，决定自己用python脚本来写一个这样的整理工具，还以为得花费一两天的时间，一不小心，两个小时不到的功夫写完了，调试了一番，完全满足我的需求，现在只需一条命令，传入书名就可以整理出指定的一本书的所有标注和笔记，脚本如下：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text"># coding=utf-8

import os
import sys

def main():
   filepath = sys.argv[1]
   bookName = sys.argv[2]

   if not os.path.isfile(filepath):
       print(&quot;File path {} does not exist. Exiting...&quot;.format(filepath))
       sys.exit()

   DELIMITER = &quot;==========&quot;
   TIME_MAKR = &quot;- 您在第&quot;
   lineNum = 0
   books = {}

   bag_of_words = {}
   with open(filepath) as fp:
       encounter = False
       delimiterCount = 0
       curBookName = &quot;&quot;
       for line in fp:
           if lineNum == 0:
               books[line] = []
               curBookName = line
               delimiterCount += 1
           else:
               if line.startswith(DELIMITER):
                   delimiterCount += 1
                   encounter = True
               else:
                   if encounter == True:
                       if line in books:
                           curBookName = line
                       else:
                           books[line] = []
                       encounter = False
                       curBookName = line
                   else:
                       books[curBookName].append(line)
           lineNum += 1
           #print(line)

       fp.close()            

   outFile = open(&quot;MyClippingOutput.txt&quot;, &quot;w&quot;)
   for k in books:
       if k.startswith(bookName) :
           outFile.writelines(k)
           lines = books[k]
           for l in lines:
               if l.startswith(TIME_MAKR):
                   continue
               if l.startswith(bookName):
                   continue
               outFile.writelines(l)
   outFile.close()

if __name__ == &#39;__main__&#39;:
    main()
</code></pre></div>
<p>目前这个脚本我只是自用，满足我个人的需求，我想肯定也有很多kindle的重度使用者有类似的需求，后续我准备把这个工具也做成在在线服务，使用方式类似clipping.io，做到比clipping.io的可定制型更强，能够适应更多的异常情况，因为我发现clipping.io对一些不规范的书名的容错性很差。期待这个服务上线！</p>

	  ]]></description>
	</item>

	<item>
	  <title>在Flutter中实现一个类似Android中的BottomSheetDialog</title>
	  <link>//bottom-sheet-dialog-in-flutter</link>
	  <author>Tao He</author>
	  <pubDate>2020-10-12T02:20:12+08:00</pubDate>
	  <guid>//bottom-sheet-dialog-in-flutter</guid>
	  <description><![CDATA[
	     <p>从屏幕底部滑出的这种弹窗实在是太普遍的需求了，所以Flutter不可能不提供，一查文档，果然有一个API直接就可以调出Dialog: showModalBottomSheet, 这个API有很多入参，但是如果不需要对Dialog的外观和行为有特殊的定制需求的话，值传递前两个参数就可以了。 API看起来非常简单，但是我看到网上有些blog文章对这个API的使用是错误的，所以我贴出我实现了上方圆角dialog的代码:</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">void openBottomSheet(context) {
  showModalBottomSheet(
    backgroundColor: Colors.white,
    context: context,
    shape: RoundedRectangleBorder(
      borderRadius: BorderRadius.only(topLeft: Radius.circular(18), topRight: Radius.circular(18))
  ),

  builder: (builder) {
      return new Container(
        child: Wrap(
          children: &lt;Widget&gt;[
            getListTile(Icons.more, Colors.black45, &quot;More&quot;, context),
            getListTile(Icons.favorite, Colors.pink, &quot;Favourites&quot;, context),
            getListTile(Icons.account_box, Colors.blue, &quot;Profile&quot;, context),
            new Divider(
              thickness: 2.0,
              height: 10.0,
            ),
            getListTile(Icons.exit_to_app, null, &quot;Logout&quot;, context),
          ],
        ),
      );
    },
  );
}
</code></pre></div>
<p>这个圆角的实现，其实可以直接传入<code>backgroundColorback</code>和<code>shape</code>参数，不用额外去添加一层i<code>Container</code>，如果想实现圆角背景，通过<code>Container</code>也可以实现，就是把<code>backgroundColor</code>设置成透明，多了一道工序，没必要。背景阴影的效果通过<code>barrierColor</code>来设置。很简单的一api，如果错误使用，不但不能优雅的实现功能，反而额外做了很多工作，却不能实现预期。看到的几个demo都没有正确使用这个API，所以特意为这个问题做此小记。</p>

	  ]]></description>
	</item>

	<item>
	  <title>Kotlin synthetic binding view is null in Fragment</title>
	  <link>//kotlin-synthetic-view-binding-view-is-null-in-fragment</link>
	  <author>Tao He</author>
	  <pubDate>2020-09-09T02:20:12+08:00</pubDate>
	  <guid>//kotlin-synthetic-view-binding-view-is-null-in-fragment</guid>
	  <description><![CDATA[
	     <p>Kotlin provide a handy and concise way to access views in xml layout from code, it works well, but When I create a subclass of <code>DialogFragment</code>, in its method <code>onCreateView</code>, I access synthetic binding view, it seems all is fine, but when run these code, app crash. In logcat, I got this <code>NullPointerException</code>:</p>

<blockquote>
<p>Caused by: java.lang.NullPointerException: Attempt to invoke virtual method &#39;android.view.View android.view.View.findViewById(int)&#39; on a null object reference</p>
</blockquote>

<p>I&#39;m sure synthetic statement is imported and view id is right, it confused me a bit. So I Google Kotlin synthetic binding view related web pages, finally I found a solution:</p>

<p>Just move accessing syntheic binding view statement from <code>onCreateView</code> to <code>onViewCreated</code>.</p>

<p>The problem is that I am accessing it too soon, When I delay the chance to access view, all works well. Magic! But it’s nothing magical, if you decompile the bytecode (By going toTools -&gt; Kotlin -&gt; Show Kotlin Bytecode and then selecting Decompile in the pane) and take a look at the generated java class, you’ll see that all it does is call findViewById() for us. Although this is a simple problem, but it is useful to record it.</p>

	  ]]></description>
	</item>

	<item>
	  <title>Kotlin中的"静态" 方法和域</title>
	  <link>//static-method-in-kotlin</link>
	  <author>Tao He</author>
	  <pubDate>2020-09-03T04:54:12+08:00</pubDate>
	  <guid>//static-method-in-kotlin</guid>
	  <description><![CDATA[
	     <p>最近开始尝试在现有的工程中使用Kotlin，刚开始使用时感觉语法简洁，代码量也少了很多，语法层面的防空，可以直接访问布局控件这些特性，都让人耳目一新，但是当我要定义静态方法和静态类时，不爽的体验一下子就上来了，所以通过此文来一探Kotlin&quot;静态&quot; 的究竟。
  先来看静态方法， 很遗憾，Kotlin中没有<code>static</code>关键字，需要将静态方法放在<code>companion object</code>中的代码块中，因此：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">class Foo {
  public static int a() { return 1; }
}
</code></pre></div>
<p>就变成了这样:</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">class Foo {
  companion object {
     fun a() : Int = 1
  }
}
</code></pre></div>
<p>可以在Kotlin代码中这样使用该类:</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">Foo.a();
</code></pre></div>
<p>在Java代码中:</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">Foo.Companion.a();
</code></pre></div>
<p>如果你不喜欢使用<code>Companion</code>, 你可以对该静态方法添加<code>@JvmStatic</code>注解:</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">class Foo {
  companion object {
    @JvmStatic
    fun a() : Int = 1;
  }
}
</code></pre></div>
<p>也可以命名你的<code>companion</code>类:</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">class Foo {
  companion object Blah {
    fun a() : Int = 1;
  }
}
</code></pre></div>
<p>然后可以这样调用:</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">Foo.Blah.a() 
</code></pre></div>
<p>然后来看静态域， 比起静态方法，静态域的情况有所不同，虽然也可以这样定义:</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">class Foo {
  companion object {
    val MY_CONSTANT = &quot;MY_CONSTANT&quot;
  }
}
</code></pre></div>
<p>但是会自动为<code>MY_CONSTANT</code>生成getter和setter方法，相当于实例域访问，开销会比静态方法大，不推荐此种定义方法。可以这样定义:</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">object Foo {
    const val MY_CONSTANT = &quot;MY_CONSTANT&quot;
}
</code></pre></div>
<p>上面定义的object Foo可以全局访问:</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">Foo.MY_CONSTANT
</code></pre></div>
<p>而companion object中定义的<code>const var MY_CONSTANT</code>是不可以全局访问的。 当然了，静态域为了避免访问时的Companion，也可以在定义时添加<code>@StaticField</code>.</p>

<p>到此Kotlin中<code>静态</code>相关的部分基本已经覆盖到了，个人觉得这个companion object不是什么好的设计，远没有Java的static关键字来的简洁和表达力。</p>

	  ]]></description>
	</item>

	<item>
	  <title>基于DrawerLayout实现直播抽屉</title>
	  <link>//implement-live-drawer</link>
	  <author>Tao He</author>
	  <pubDate>2020-07-29T04:54:12+08:00</pubDate>
	  <guid>//implement-live-drawer</guid>
	  <description><![CDATA[
	     <p>直播间里右侧的滑出抽屉现在几乎成了主流直播的标配，无论是映客还是Bigo，都很早就上线了抽屉。我所在的这个产品最近也要上同样的功能，因此需要简单实现一个。
  要实现一个简单的侧滑抽屉，最先想到的就是直接使用<code>DrawerLayout</code>，但是无法满足产品的一个手势要求: 在屏幕任何位置都可以调出和收起抽屉。<code>DrawerLayout</code> 的默认行为是只能从屏幕边缘调出。因此需要改变DrawerLayout的默认行为，使期能够从屏幕任何位置调出，这就需要通过反射修改drawerlayout的edgesize属性，因为drawerlayout还可以通过长按调出，我们的产品需求并不需要这个行为，因此也需要屏蔽掉，通过一个静态方法来统一实现：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">public static void setDrawerLeftEdgeSize(DrawerLayout drawerLayout,
                                             float percent) {
    if (drawerLayout == null)
        return;
    try {
        //获取 ViewDragHelper，更改其 edgeSizeField 为 displayWidthPercentage*屏幕大小
        Field rightDraggerField = drawerLayout.getClass().getSuperclass().getDeclaredField(&quot;mRightDragger&quot;);
        rightDraggerField.setAccessible(true);
        ViewDragHelper rightDragger = (ViewDragHelper) rightDraggerField.get(drawerLayout);

        Field edgeSizeField = rightDragger.getClass().getDeclaredField(&quot;mEdgeSize&quot;);
        edgeSizeField.setAccessible(true);
        int edgeSize = edgeSizeField.getInt(rightDragger);

        edgeSizeField.setInt(rightDragger, Math.max(edgeSize, (int)(UIUtils.getScreenWidth() * percent)));

        //获取 Layout 的 ViewDragCallBack 实例“mLeftCallback”
        //更改其属性 mPeekRunnable
        Field rightCallbackField = drawerLayout.getClass().getSuperclass().getDeclaredField(&quot;mRightCallback&quot;);
        rightCallbackField.setAccessible(true);

        //因为无法直接访问私有内部类，所以该私有内部类实现的接口非常重要，通过多态的方式获取实例
        ViewDragHelper.Callback leftCallback = (ViewDragHelper.Callback) rightCallbackField.get(drawerLayout);

        Field peekRunnableField = leftCallback.getClass().getDeclaredField(&quot;mPeekRunnable&quot;);
        peekRunnableField.setAccessible(true);
        Runnable nullRunnable = new Runnable() {
            @Override
            public void run() {

            }
        };
        peekRunnableField.set(leftCallback, nullRunnable);
    } catch (Exception e) {
        e.printStackTrace();
    }
}
</code></pre></div>
<p>解决了edgsize和长按的问题后，马上又面临一个净屏页和抽屉的手势滑动冲突问题，并且还要注意两个UI元素的层级，基本的解决思路是根据滑动的方向和净屏页的状态在<code>DrawerLayout</code>子类的onInterceptTouchEvent里来处理事件拦截，改变<code>DrawerLayout</code>的默认行为，净屏页的逻辑不变，只向<code>DrawerLayout</code>提供状态的get方法，具体实现如下：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">@Override
public boolean onInterceptTouchEvent(MotionEvent ev){
    Log.d(&quot;drawerLayout&quot;, &quot;onInterceptTouchEvent, action: &quot;
            + ev.getAction() + &quot; x= &quot; + ev.getX() + &quot; y=&quot; + ev.getY());

    boolean drawerOpen = this.isDrawerOpen(Gravity.RIGHT);
    boolean pureMode = contentView.isPureMode();

    switch(ev.getAction()) {
        case MotionEvent.ACTION_DOWN:
            mLastX = ev.getX();
            mLastY = ev.getY();

            /*
            final View touchedView = findTopChildUnder((int) mLastX, (int) mLastY);
            boolean isContent = isContentView(touchedView);


            if (!drawerOpen &amp;&amp; isContent) {
                return false;
            }
              */

            break;
        case MotionEvent.ACTION_MOVE:
            float dx = ev.getX() - mLastX;
            float dy = ev.getY() - mLastY;

            boolean horizontal = Math.abs(dx) &gt; Math.abs(dy);

            if (!pureMode &amp;&amp; dx &lt; 0 &amp;&amp; horizontal) {

            } else if(!pureMode &amp;&amp; dx &gt; 0 &amp;&amp; drawerOpen &amp;&amp; horizontal){

            } else {
                return false;
            }

            break;
        default:
            break;
    }
    return super.onInterceptTouchEvent(ev);
}
</code></pre></div>
<p>这样用最小的开发成本完成了产品的需求，实现了主流直播产品的抽屉功能。唯一的小瑕疵是直播间上下滑动时不能自动收起抽屉，这个因为并不是产品很在意的点，再加上产品需求紧急，就没有深究。当然了，这个抽屉功能其实可以抽取出来做成一个通用的抽屉，提供不同的接口来满足定制要求。</p>

<p>tips：<code>DrawerLayout</code>显示区域穿透的问题可以这样解决：
将显示区域的clickable属性设置为true。</p>

	  ]]></description>
	</item>

	<item>
	  <title>为什么学习设计模式</title>
	  <link>//why-learn-design-pattern</link>
	  <author>Tao He</author>
	  <pubDate>2020-05-08T04:54:12+08:00</pubDate>
	  <guid>//why-learn-design-pattern</guid>
	  <description><![CDATA[
	     <p>设计模式，可能是每一个程序员都绕不过去的话题，有人认为特别重要，有人对其嗤之以鼻，也有人并不是很确定它的重要性。为什么要学习设计模式，这么多年以来其实我也没有看到一个很好的回答，前一阵在Youtube看到一个讲Android系统开发的youtuber的主页，发现他的一篇很短的文章探讨了这个问题，看完后感觉醍醐灌顶，因此有冲动翻译并记录下其主要的观点。</p>

<p>编程如下棋，一个新手刚开始接触时，首先要了解能够正常下棋的要素，如棋子，棋盘，要熟悉棋子移动，吃子，将军的规则，等这些都了解了以后，就可以正常下棋了，虽然可能下的不好，但是渐渐的，开始领会一些这个游戏的基本规律，如何占取优势，如何使用策略，通过一次次的棋局，逐步的识别出一些可能是很愚蠢的错误，并在以后的棋局中尽量避免，一个新手也可能下棋下的越来越好。</p>

<p>但是一个人如果想成为下棋的大师，却需要学习大师们所下过的棋局。隐藏在这些棋局中的模式必须通过理解，记忆，反复应用，最后成为一个人的本能。这些模式可能是成千上万的，开放模式更是繁多，以至于有很多关于其变化的书籍。 游戏中模式和结束模式也很普遍，作为大师们必须熟悉它们。</p>

<p>编程也一样，首先学习规则，学习算法，数据结构，熟悉了这些后就可以编程了，尽管所写的代码会比较蹩脚。之后，开始学习软件设计的原则，如结构化编程，模块化编程，面向对象编程，如高内聚低耦合的重要性，如信息隐藏和依赖管理。等这些都学习了以后，一个人要想成为真正的编程大师，还是需要学习大师们的设计，并深入这些设计，举一反三，这些模式必须被理解，记忆，反复应用，最后成为一个人的本能。</p>

<p>这篇文章本来就很短，但是我依旧要提炼出本文要划重点的句子:</p>

<blockquote>
<p>一个人要想成为真正的编程大师，还是需要学习大师们的设计，并深入这些设计，举一反三，这些模式必须被理解，记忆，反复应用，最后成为一个人的本能。</p>
</blockquote>

	  ]]></description>
	</item>


</channel>
</rss>
