<?xml version="1.0" encoding="UTF-8" ?>

<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
   
      <title>longlinht.github.io/</title>
   
   <link>http://longlinht.github.io/</link>
   <description>编程，读书，思考，旅行，与机器对话，与人交谈，对神发问，探索，体验人生美丽的风景</description>
   <language>en-uk</language>
   <managingEditor> Tao He</managingEditor>
   <atom:link href="rss" rel="self" type="application/rss+xml" />
   
	<item>
	  <title>多样式 TextView 小记</title>
	  <link>//different-portion-different-appearance-in-same-textview</link>
	  <author>Tao He</author>
	  <pubDate>2018-02-03T03:25:12+08:00</pubDate>
	  <guid>//different-portion-different-appearance-in-same-textview</guid>
	  <description><![CDATA[
	     <p>所谓多样式 <code>TextView</code>, 就是在同一个 <code>TextView</code>中不同部分的text展示不同的颜色,字体大小,字体,字体Style,这种需求其实在很多App中都存在, 能够直接的给每一部分Text赋予不同的外观, 既可以在布局中少添加几个<code>TextView</code>, 也可以使以后需求变动后能够灵活的做出改动, 我在实际的开发中也经常碰到这种需求,很多次都是临时Google下, 实现了以后也就作罢了, 等后面又遇到的时候,貌似又记得不太清楚了, 又需要去查, 很没有效率, 所以写下这篇小记.</p>

<p>要想给TextView的不同部分设置不同的属性,通常有两种做法:</p>

<h4>使用SpannableString</h4>

<p>这种方法需要用到<code>Spannable</code>借口, 一般做法如下:</p>
<div class="highlight"><pre><code class="language-java" data-lang="java"><span class="n">String</span> <span class="n">text</span> <span class="o">=</span> <span class="s">&quot;Hello World&quot;</span><span class="o">;</span>
<span class="n">TextView</span> <span class="n">tvTitle</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">TextView</span><span class="o">(</span><span class="n">context</span><span class="o">);</span>

<span class="n">Spannable</span> <span class="n">spannable</span> <span class="o">=</span> <span class="n">SpannableString</span><span class="o">(</span><span class="n">text</span><span class="o">);</span>

<span class="c1">// set different text color</span>
<span class="n">spannable</span><span class="o">.</span><span class="na">setSpan</span><span class="o">(</span><span class="k">new</span> <span class="nf">ForegroundColorSpan</span><span class="o">(</span><span class="n">context</span><span class="o">.</span><span class="na">getResouces</span><span class="o">().</span><span class="na">getColor</span><span class="o">(</span><span class="n">android</span><span class="o">.</span><span class="na">R</span><span class="o">.</span><span class="na">color</span><span class="o">.</span><span class="na">black</span><span class="o">)),</span> <span class="mi">0</span><span class="o">,</span> <span class="mi">5</span><span class="o">,</span> <span class="n">Spannable</span><span class="o">.</span><span class="na">SPAN_EXCLUSIVE_EXCLUSIVE</span><span class="o">);</span>
<span class="n">spannable</span><span class="o">.</span><span class="na">setSpan</span><span class="o">(</span><span class="k">new</span> <span class="nf">ForegroundColorSpan</span><span class="o">(</span><span class="n">context</span><span class="o">.</span><span class="na">getResouces</span><span class="o">().</span><span class="na">getColor</span><span class="o">(</span><span class="n">android</span><span class="o">.</span><span class="na">R</span><span class="o">.</span><span class="na">color</span><span class="o">.</span><span class="na">white</span><span class="o">)),</span> <span class="mi">5</span><span class="o">,</span> <span class="n">text</span><span class="o">.</span><span class="na">length</span><span class="o">(),</span> <span class="n">Spannable</span><span class="o">.</span><span class="na">SPAN_EXCLUSIVE_EXCLUSIVE</span><span class="o">);</span>

<span class="c1">// set different background color</span>
<span class="n">spannable</span><span class="o">.</span><span class="na">setSpan</span><span class="o">(</span><span class="k">new</span> <span class="nf">BackgroundColorSpan</span><span class="o">(</span><span class="n">android</span><span class="o">.</span><span class="na">R</span><span class="o">.</span><span class="na">color</span><span class="o">.</span><span class="na">black</span><span class="o">),</span> <span class="mi">0</span><span class="o">,</span> <span class="mi">5</span><span class="o">,</span> <span class="n">Spannable</span><span class="o">.</span><span class="na">SPAN_EXCLUSIVE_EXCLUSIVE</span><span class="o">);</span>

<span class="c1">// set different text size</span>
<span class="kt">int</span> <span class="n">largeSize</span> <span class="o">=</span> <span class="n">getResources</span><span class="o">().</span><span class="na">getDimensionPixelSize</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">dimen</span><span class="o">.</span><span class="na">larage</span><span class="o">);</span>
<span class="kt">int</span> <span class="n">smallSize</span> <span class="o">=</span> <span class="n">getResources</span><span class="o">().</span><span class="na">getDimensionPixelSize</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">dimen</span><span class="o">.</span><span class="na">small</span><span class="o">);</span>
<span class="n">spannable</span><span class="o">.</span><span class="na">setSpan</span><span class="o">(</span><span class="k">new</span> <span class="nf">AbsoluteSizeSpan</span><span class="o">(</span><span class="n">largeSize</span><span class="o">),</span> <span class="mi">0</span><span class="o">,</span> <span class="mi">5</span><span class="o">,</span> <span class="n">Spannable</span><span class="o">.</span><span class="na">SPAN_EXCLUSIVE_EXCLUSIVE</span><span class="o">);</span>
<span class="n">spannable</span><span class="o">.</span><span class="na">setSpan</span><span class="o">(</span><span class="k">new</span> <span class="nf">AbsoluteSizeSpan</span><span class="o">(</span><span class="n">smallSize</span><span class="o">),</span> <span class="mi">5</span><span class="o">,</span> <span class="n">text</span><span class="o">.</span><span class="na">length</span><span class="o">(),</span> <span class="n">Spannable</span><span class="o">.</span><span class="na">SPAN_EXCLUSIVE_EXCLUSIVE</span><span class="o">);</span>

<span class="c1">// set relative size </span>
<span class="n">spannable</span><span class="o">.</span><span class="na">setSpan</span><span class="o">(</span><span class="k">new</span> <span class="nf">RelativeSizeSpan</span><span class="o">(</span><span class="mi">2</span><span class="n">f</span><span class="o">),</span> <span class="mi">0</span><span class="o">,</span> <span class="mi">5</span><span class="o">,</span> <span class="n">Spannable</span><span class="o">.</span><span class="na">SPAN_EXCLUSIVE_EXCLUSIVE</span><span class="o">);</span>

<span class="c1">// set different font style</span>
<span class="n">spannable</span><span class="o">.</span><span class="na">setSpan</span><span class="o">(</span><span class="k">new</span> <span class="nf">StyleSpan</span><span class="o">(</span><span class="n">android</span><span class="o">.</span><span class="na">graphics</span><span class="o">.</span><span class="na">Typeface</span><span class="o">.</span><span class="na">ITALIC</span><span class="o">),</span> <span class="mi">0</span><span class="o">,</span> <span class="mi">5</span><span class="o">,</span> <span class="n">Spannable</span><span class="o">.</span><span class="na">SPAN_EXCLUSIVE_EXCLUSIVE</span><span class="o">);</span>
<span class="n">spannable</span><span class="o">.</span><span class="na">setSpan</span><span class="o">(</span><span class="k">new</span> <span class="nf">StyleSpan</span><span class="o">(</span><span class="n">android</span><span class="o">.</span><span class="na">graphics</span><span class="o">.</span><span class="na">Typeface</span><span class="o">.</span><span class="na">BOLD</span><span class="o">),</span> <span class="mi">5</span><span class="o">,</span> <span class="n">text</span><span class="o">.</span><span class="na">length</span><span class="o">(),</span> <span class="n">Spannable</span><span class="o">.</span><span class="na">SPAN_EXCLUSIVE_EXCLUSIVE</span><span class="o">);</span>
<span class="n">tvTitle</span><span class="o">.</span><span class="na">setText</span><span class="o">(</span><span class="n">spannable</span><span class="o">);</span>
</code></pre></div>
<p>使用<code>Spannable</code>接口还是比较灵活和已于理解的.</p>

<h4>使用Html Tags</h4>

<p><code>TextView</code>支持常见的Html tags来标记text的外观,一般做法如下：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">TextView textview = new TextView(context);
textView.setText(Html.fromHtml(&quot;&lt;b&gt;&quot; + title + &quot;&lt;/b&gt;&quot; +  &quot;&lt;br /&gt;&quot; + 
            &quot;&lt;small&gt;&quot; + description + &quot;&lt;/small&gt;&quot; + &quot;&lt;br /&gt;&quot; + 
            &quot;&lt;small&gt;&quot; + DateAdded + &quot;&lt;/small&gt;&quot;));
</code></pre></div>
<p>例如也可以在strings.xml中这样定义:</p>
<div class="highlight"><pre><code class="language-xml" data-lang="xml"><span class="nt">&lt;string</span> <span class="na">name=</span><span class="s">&quot;my_text&quot;</span><span class="nt">&gt;</span>
  <span class="cp">&lt;![CDATA[</span>
<span class="cp">    &lt;b&gt;Autor:&lt;/b&gt; Tao&lt;br/&gt;</span>
<span class="cp">    &lt;b&gt;Contact:&lt;/b&gt; myemail@gmail.com&lt;br/&gt;</span>
<span class="cp">    &lt;i&gt;Copyright © 2011-2012 &lt;/i&gt;</span>
<span class="cp">  ]]&gt;</span>
<span class="nt">&lt;/string&gt;</span> 
</code></pre></div>
<p>这样定义就比上面那种方式更好一点,可以对string资源统一管理, 当然了Html的这种方式支持很多其他的tag, 同样可以做到Spannable接口可以做到的, 这里就不一一列举了. 不过有一点需要注意, 就是在<code>setText</code>的时候要调用<code>Html.fromHtml</code>才生效. 这个主题琐碎,但对于工程师来说什么事不琐碎呢? 注意细节, 提高效率, 每次记录下一些需要反复使用到的技术点, 也是一种修行.</p>

	  ]]></description>
	</item>

	<item>
	  <title>踩坑小计 - PopupWindow 的 isShowing 不工作</title>
	  <link>//popup-window-is-showing-not-work</link>
	  <author>Tao He</author>
	  <pubDate>2018-01-24T02:20:12+08:00</pubDate>
	  <guid>//popup-window-is-showing-not-work</guid>
	  <description><![CDATA[
	     <p>PopupWindow在Android中是比较常用的一种控件，一个成熟的商业级app几乎不可能不用到它,最近在做的一个音乐播放列表的弹窗就是用PopupWindow实现的，做起来也没什么困难，就是有一个恼人的问题，不知道算不算SDK的一个bug.</p>

<h3>问题描述</h3>

<p>创建了一个PopuWindow将其show出来以后，调用其isShowing()方法后一直返回false，代码如下：</p>
<div class="highlight"><pre><code class="language-java" data-lang="java"><span class="c1">// show</span>
<span class="n">musicPopup</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">RoomMusicPopupWindow</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
<span class="n">musicPopup</span><span class="o">.</span><span class="na">show</span><span class="o">(</span><span class="n">mGameCenter</span><span class="o">);</span>


<span class="c1">// want to decide if popup is showing, isShowing always return false</span>
<span class="k">if</span><span class="o">(</span><span class="kc">null</span> <span class="o">!=</span> <span class="n">musicPopup</span> <span class="o">&amp;&amp;</span> <span class="n">musicPopup</span><span class="o">.</span><span class="na">isShowing</span><span class="o">())</span> <span class="o">{</span>

<span class="o">}</span>
</code></pre></div>
<h3>解决方法</h3>
<div class="highlight"><pre><code class="language-java" data-lang="java"><span class="n">musicPopup</span><span class="o">.</span><span class="na">setFocusable</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
</code></pre></div>
	  ]]></description>
	</item>

	<item>
	  <title>踩坑小计 - SeekBar 宽度显示不全</title>
	  <link>//seekbar-cant-display-full-width</link>
	  <author>Tao He</author>
	  <pubDate>2018-01-21T02:20:12+08:00</pubDate>
	  <guid>//seekbar-cant-display-full-width</guid>
	  <description><![CDATA[
	     <p>最近开始一个全新的Android项目，突然感觉很多之前忽略掉的一些不大不小的问题和细节渐渐的浮出了水面，虽不是什么大问题，通过搜索，查找，自己判断改进也都能顺利解决，但终归要查，要找，凭空浪费很多时间，于是决定不论多么琐碎的问题，但凡违反一般性，需要特殊处理的都详细记录下来，避免下次忘记时再踩坑。今天就就记录下一个SeekBar的问题，真的算上不上是一个问题，只是SeekBar这个默认显示的宽度的确与一般View的显示结果不同。</p>

<h3>问题描述</h3>

<p>在布局文件里添加这样一个Seekbar:</p>
<div class="highlight"><pre><code class="language-xml" data-lang="xml"><span class="nt">&lt;SeekBar</span>
    <span class="na">android:id=</span><span class="s">&quot;@+id/playlist_seekbar&quot;</span>
    <span class="na">android:layout_width=</span><span class="s">&quot;match_parent&quot;</span>
    <span class="na">android:layout_height=</span><span class="s">&quot;wrap_content&quot;</span>
    <span class="na">android:maxHeight=</span><span class="s">&quot;1dp&quot;</span>
    <span class="na">android:minHeight=</span><span class="s">&quot;1dp&quot;</span>
    <span class="na">android:paddingStart=</span><span class="s">&quot;0dp&quot;</span>
    <span class="na">android:paddingEnd=</span><span class="s">&quot;0dp&quot;</span>
    <span class="na">android:thumbOffset=</span><span class="s">&quot;0dp&quot;</span>
    <span class="na">android:progressDrawable=</span><span class="s">&quot;@drawable/playlist_seekbar&quot;</span>
    <span class="na">android:progress=</span><span class="s">&quot;50&quot;</span>
    <span class="na">android:thumb=</span><span class="s">&quot;@drawable/seekbar_thumb&quot;</span> <span class="nt">/&gt;</span>
</code></pre></div>
<p>虽然设置了width是<code>match_parent</code>,但是SeekBar得宽度在左右两侧还是留有一定空间,并不是我们直觉所想的那样。当设置了
<code>android:paddingStart=&quot;0dp&quot;, android:paddingEnd=&quot;0dp&quot;</code> 以后就是我们想要的宽度了。至于这个控件为什么是这样的默认设定，不得而知，查看SeekBar的源码则看到了这样的继承关系：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">SeekBar -&gt; AbsSeekBar -&gt; ProgressBar
</code></pre></div>
<p>并且在ProgressBar的drawTrack方法中有这么一段代码：</p>
<div class="highlight"><pre><code class="language-java" data-lang="java"><span class="k">if</span> <span class="o">(</span><span class="n">isLayoutRtl</span><span class="o">()</span> <span class="o">&amp;&amp;</span> <span class="n">mMirrorForRtl</span><span class="o">)</span> <span class="o">{</span>
    <span class="n">canvas</span><span class="o">.</span><span class="na">translate</span><span class="o">(</span><span class="n">getWidth</span><span class="o">()</span> <span class="o">-</span> <span class="n">mPaddingRight</span><span class="o">,</span> <span class="n">mPaddingTop</span><span class="o">);</span>
    <span class="n">canvas</span><span class="o">.</span><span class="na">scale</span><span class="o">(-</span><span class="mf">1.0f</span><span class="o">,</span> <span class="mf">1.0f</span><span class="o">);</span>
<span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
    <span class="n">canvas</span><span class="o">.</span><span class="na">translate</span><span class="o">(</span><span class="n">mPaddingLeft</span><span class="o">,</span> <span class="n">mPaddingTop</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div>
<p>这个问题网上也有人说在xml中设置并不生效，但是在代码中调用<code>seekBar.setPadding(0,0,0,0)</code>就可以,真是一个琐碎的问题，究其原因就是它违反了一般性，让我们错误的认为它应该和其它的View的特性是一样的，都应该是我们去主动的设置Padding.</p>

	  ]]></description>
	</item>

	<item>
	  <title>政策与民意</title>
	  <link>//policy-and-people-will</link>
	  <author>Tao He</author>
	  <pubDate>2017-11-24T02:20:12+08:00</pubDate>
	  <guid>//policy-and-people-will</guid>
	  <description><![CDATA[
	     <p>政策，这个词在我们这个国家被普遍使用，几乎人人理解其含义，就连目不识丁的老农都会说出这样的话：“中央又出新政策了”，这个词我们是如此的熟悉，以至于我们常常都不会去想政策到底是什么，它是如何制定出来的？我们普通老百姓是否影响到了政策的制定？ 也许一般的理解是老百姓哪能影响到政策的制定，照老农的说法，那是中央出的政策，和我们这些小老百姓有啥关系，这么理解也没错，毕竟在我们这个国家，显然普通民众的权利实在有限，但是此处我并不想讨论政策的制定和出台，只是想探究已出台的，与民生息息相关的这些个政策，到底有没有民意的基础，民意是否影响到了政策的制定？ 要讨论这个问题，拿北京这几年的一些政策法规的例子最好不过了。</p>

<p>先说北京房子的限购，以及相关联的所谓的抑制房价过快上涨的各种政策手段，但凡有点经济学常识的人，都知道这些政策只会让房价更高，增加更多购房成本，但是这些政策还是出来了，政府有什么考虑我们不得而知，但是呼吁出台这些政策的民意绝对是存在的，这种呼声绝对不是少数，甚至有一些经济学家也在为这种政策摇旗呐喊，就无怪乎普通民众有这种诉求了。而这种大多数的诉求就成了普遍的民意基础，使这种违背基本经济学常识的政策不再是空中楼阁。房价的这个例子也许会因房价问题本来就错综复杂而变得更加说不清道不明，那可以再看一例：网约车。</p>

<p>在网约车还没有出现之前，我们的选择只有出租车和所谓的黑车，出行体验如何，只要在烈日和寒风中打过出租车的人都应该知道那是一种什么样的服务，自从有了网约车，如滴滴打车后，我们的出行体验有了巨大的改观。那种打车难的时代一去不复返了，但是好景不长，很快政策对网约车出台了一系列不友好政策，之后的打车体验明显不如之前，这种政策也明显违背市场经济规律，但是它照样堂而皇之的出台了，你以为这是出租车利益集团的反扑，但是别忘了，这背后还有很坚实的民意基础，网约车存在的一些问题总是能让很多普通民众认为监管是必须的，政府必须介入才能让他们有安全感，但其实这些问题难道出租车就不存在吗？不希冀于市场竞争，而总幻想依赖政府强力，这种普遍的认知构成了一种可怕的，无望的民意，渗透进我们生活中的方方面面。</p>

<p>这种可怕的认知，在今年年底北京出现的两件重要的事情中更是体现的淋漓尽致，也许这些政策普通民众并不能左右，但民众的普遍认知构成了民意基础，因为在大部分人的认知中并没有达成这样的共识：有些事只能交给市场，政府干预只会扰乱市场；私有财产神圣不可侵犯；贩夫走卒，不高端的人群也有公民权；这些在文明社会都普遍达成的共识并未深入人心。这些个看似荒谬的政策既是权力意志的体现，也少不了那可怕民意的影子。</p>

	  ]]></description>
	</item>

	<item>
	  <title>记一次Android系统源代码技术分享</title>
	  <link>//lecture-on-android-system-source-code</link>
	  <author>Tao He</author>
	  <pubDate>2017-11-24T02:20:12+08:00</pubDate>
	  <guid>//lecture-on-android-system-source-code</guid>
	  <description><![CDATA[
	     <p>今年年后换了工作，决定继续做Android开发，到了公司一段时间后，受架构组同学之邀，做一次技术分享，当时感觉很头疼，因为我在Android技术组，如果分享这几年C++的技术经验，显然不合时宜，也对组里的同事没有什么帮助，如果分享Android应用的开发，貌似又在班门弄斧，自己在Android方面本来就是半路出家，实在没有什么可分享的干货，正在为难之际，突然想到在之前的公司有段时间一直在阅读Android系统源代码，一直试图能更深入的了解系统的结构和原理，因此也有了一些心得，正好可以与同事分享，也对大家的开发有所帮助，所以有了这篇小记。</p>

<p>这篇小记有点类似一个ppt，其实就是那次分享我用markdown格式写的一个ppt，是一个我要讲述的一个提纲，防止我讲跑题了。</p>

<h3>如何概览？</h3>

<ul>
<li><p>要见代码 - 要了解如何通过源代码构建Android系统, 了解Android系统的一些基础设施</p></li>
<li><p>要读代码 - 通过阅读代码，理解Android系统的基本结构和特点</p></li>
</ul>

<blockquote>
<p>Reading the fucking source code</p>
</blockquote>

<h4>下载，编译和运行Android系统源代码</h4>

<h5>工程环境</h5>

<ul>
<li><p>推荐Ubuntu系统</p></li>
<li><p>Git</p></li>
<li><p>Java SDK</p></li>
<li><p>依赖包</p></li>
</ul>
<div class="highlight"><pre><code class="language-text" data-lang="text">sudo apt-get install flex bison gperf libsdl-dev libesd0-dev libwxgtk2.6-dev build-essential zip curl
</code></pre></div>
<h5>下载Android系统源代码</h5>

<ul>
<li><p>repo工具</p></li>
<li><p>参见Google官方文档</p></li>
</ul>

<h5>编译Android系统源代码</h5>

<p><strong>make it</strong></p>

<p><strong>哪有那么顺利，如果编译错误请Google错误信息，逐个解决之</strong></p>

<p><strong>编译成功后，会在out/target/product/generic/ 目录下生成多个img文件</strong></p>

<h5>运行Android模拟器</h5>

<ul>
<li><p>镜像文件 - zImage system.img userdata.img ramdisk.img</p></li>
<li><p>设置环境变量</p></li>
<li><p>运行模拟器</p></li>
</ul>
<div class="highlight"><pre><code class="language-text" data-lang="text">emulator
</code></pre></div>
<h5>下载，编译和运行Android内核源代码</h5>

<h4>JNI</h4>

<ul>
<li><p>Java call Native</p></li>
<li><p>Native call Java</p></li>
<li><p>静态注册</p>

<ul>
<li>先编写Java代码，然后编译生成.class文件</li>
<li>javah -o output packagename.classname</li>
</ul></li>
<li><p>动态注册</p></li>
</ul>

<blockquote>
<p>MediaScanner.java</p>
</blockquote>
<div class="highlight"><pre><code class="language-text" data-lang="text">private static native final void native_init()
</code></pre></div>
<blockquote>
<p>android<em>media</em>MediaScanner.cpp</p>
</blockquote>
<div class="highlight"><pre><code class="language-text" data-lang="text">static void android_media_MediaScanner_native_init(JNIEnv *env)

static JNINativeMethod gMethods[]
</code></pre></div>
<h4>天字号进程 - init</h4>

<ul>
<li><p>Linux系统中用户空间的第一个进程</p></li>
<li><p>创建zygote</p></li>
<li><p>属性服务</p></li>
</ul>

<blockquote>
<p>init.c</p>
</blockquote>
<div class="highlight"><pre><code class="language-text" data-lang="text">int main(int argc, char **argv)

void service_start(struct service *svc, const char *dynamic_args)
</code></pre></div>
<blockquote>
<p>parser.c</p>
</blockquote>
<div class="highlight"><pre><code class="language-text" data-lang="text">int parse_config_file(const char *fn)
</code></pre></div>
<blockquote>
<p>keywords.h</p>

<p>init.rc</p>

<p>builtins.c</p>
</blockquote>
<div class="highlight"><pre><code class="language-text" data-lang="text">int do_class_start(int nargs, char **args)
</code></pre></div>
<blockquote>
<p>property_service.c</p>
</blockquote>
<div class="highlight"><pre><code class="language-text" data-lang="text">void property_init(void)
</code></pre></div>
<blockquote>
<p>libc<em>init</em>dynamic.c</p>

<p>system_properties.c</p>

<p>properties.c</p>
</blockquote>

<h4>Java世界的盘古 - Zygote</h4>

<ul>
<li><p>zygote - app_process</p></li>
<li><p>apk程序，其父都是zygote</p></li>
<li><p>startVm</p></li>
<li><p>startReg</p></li>
</ul>

<blockquote>
<p>app_main.cpp</p>
</blockquote>
<div class="highlight"><pre><code class="language-text" data-lang="text">int main(int argc, const char* const argv[])
</code></pre></div>
<blockquote>
<p>AndroidRuntime.cpp</p>
</blockquote>
<div class="highlight"><pre><code class="language-text" data-lang="text">void AndroidRuntime::start(const char* className, const bool startSystemSerever)
</code></pre></div>
<blockquote>
<p>ZygoteInit.java</p>
</blockquote>
<div class="highlight"><pre><code class="language-text" data-lang="text">public static void main(String argv[])

private static void registerZygoteSocket()

// preloaded-classes file
private static void preloadClasses()

private static void preloadResources() {
</code></pre></div>
<h4>Zygot的嫡长子 -system_server</h4>

<ul>
<li><p>Java世界半边天</p></li>
<li><p>Java世界的核心Service都在这里启动</p></li>
</ul>

<blockquote>
<p>dalvik<em>system</em>zygote.c</p>
</blockquote>
<div class="highlight"><pre><code class="language-text" data-lang="text">static void Dalvik_dalvik_system_Zygote_forkAndSpecialize(const u4* args, JValue* pResult)

static void Dalvik_dalvik_system_Zygote_forkSystemServer(const u4* args, JValue* pResult) 

static void setSignalHandler() 

static void sigchldHandler(int s)
</code></pre></div>
<blockquote>
<p>RuntimeInit.java</p>
</blockquote>
<div class="highlight"><pre><code class="language-text" data-lang="text">public static final void zygoteInit(String[] argv) throws ZygoteInit.MethodAndArgsCaller {
</code></pre></div>
<blockquote>
<p>System_Server.java</p>
</blockquote>
<div class="highlight"><pre><code class="language-text" data-lang="text">public static void main(String[] args) {

native public static void init1(String[] args);

public static final void init2() {
</code></pre></div>
<blockquote>
<p>com<em>android</em>server_SystemServer.cpp</p>
</blockquote>
<div class="highlight"><pre><code class="language-text" data-lang="text">static void android_server_SystemServer_init1(JNIEnv* env, jobject clazz)
</code></pre></div>
<blockquote>
<p>system_init.c</p>
</blockquote>
<div class="highlight"><pre><code class="language-text" data-lang="text">extern &quot;C&quot; status_t system_init()
</code></pre></div>
<blockquote>
<p>ActivityManagerService.java</p>
</blockquote>
<div class="highlight"><pre><code class="language-text" data-lang="text">private final void startProcessLocked(ProcessRecord app,
</code></pre></div>
<blockquote>
<p>Process.java</p>
</blockquote>
<div class="highlight"><pre><code class="language-text" data-lang="text">public static final int start(final String processClass,
                                  final String niceName,
                                  int uid, int gid, int[] gids,
                                  int debugFlags,
                                  String[] zygoteArgs)

private static int startViaZygote(final String processClass,
                                  final String niceName,
                                  final int uid, final int gid,
                                  final int[] gids,
                                  int debugFlags,
                                  String[] extraArgs)
                                  throws ZygoteStartFailedEx {

private static int zygoteSendArgsAndGetPid(ArrayList&lt;String&gt; args)
            throws ZygoteStartFailedEx {
</code></pre></div>
<blockquote>
<p>ZygoteConnection.java </p>
</blockquote>
<div class="highlight"><pre><code class="language-text" data-lang="text">boolean runOnce() throws ZygoteInit.MethodAndArgsCaller {
</code></pre></div>
<h4>智能指针 - RefBase sp wp</h4>

	  ]]></description>
	</item>

	<item>
	  <title>Android开发中二维码库的选用</title>
	  <link>//select-qrc-code-library-in-andord</link>
	  <author>Tao He</author>
	  <pubDate>2017-08-21T02:30:12+08:00</pubDate>
	  <guid>//select-qrc-code-library-in-andord</guid>
	  <description><![CDATA[
	     <p>在现今的移动App开发中，二维码的使用场景变得越来越普遍，最近我要开发的一个需求就必须生成二维码，自然就面临二维码库选用的问题，因为大名鼎鼎的ZXing的存在，这也本不是什么特别需要考虑的问题。但是因为ZXing的大而全，要在一款只是将二维码作为一个特定使用场景下的一个功能的App，完全引入ZXing就有点过了，所以就面临了ZXing库的裁剪问题。但是裁剪这样一个大而全的多平台支持的库也不是什么简单的事情，所以我也顺便调研了其他的二维码库作为参考:</p>

<ul>
<li><p>OnBarCode http://www.onbarcode.com/products/android_barcode/barcodes/qrcode.html#intro</p></li>
<li><p>Barcode4j http://barcode4j.sourceforge.net/</p></li>
<li><p>QRGenerator </p>

<ul>
<li>https://github.com/androidmads/QRGenerator</li>
<li>https://androidmads.blogspot.com/2016/07/qr-code-generator-library.html</li>
</ul></li>
</ul>

<p>当然了，这些库实现我的需求都是没有问题的，但是最终我还是在我的项目中选用了ZXing,一来是因为它在业界的广泛使用得到了充分的验证，二来是因为我们项目组其他的同事也会在未来的需求中使用到，所以必须选用一个长期的可靠的的解决方案。当然了，我是选用了一版裁剪后的ZXing库。至于这个库的使用其实没有什么好说的，因为使用起来非常简单，简单的几个事例就能明白如何应用。</p>

	  ]]></description>
	</item>

	<item>
	  <title>捕获Android截屏事件</title>
	  <link>//capture-screenshot-event-on-android</link>
	  <author>Tao He</author>
	  <pubDate>2017-08-03T02:30:12+08:00</pubDate>
	  <guid>//capture-screenshot-event-on-android</guid>
	  <description><![CDATA[
	     <p>在Android平台上截屏事件没有对应的一个标准的事件和通知，所以应用App无法通过标准或统一的方式去捕获这个事件来满足自己的要求。
只能通过间接的方式捕获到这个事件，我因为要做一个微信的截屏图片分享的功能，所以对Android截屏事件做了一个调研，并且在开发中 
选用了其中的一种方式。 大体上，要解决这个问题，大概有以下几种方法，每种方法的可靠性和灵活性都不同。</p>

<h4>通过按键监听捕获截屏事件</h4>

<p>这种方式最简单粗暴，但是存在两个巨大的麻烦，不易克服:</p>

<ul>
<li><p>Android机器厂商众多，ROM众多，多截屏按键的组合没有统一的标准，如果适配所有机型，几乎是无法完成的任务</p></li>
<li><p>事件准确捕获后，截屏这个动作完全结束时点需要应用自己去检查和获取</p></li>
</ul>

<p>这两件事做起来都不容易，都很容易出错，所以这种方法基本上是四种办法里最不可靠的，基本不推荐这么做。</p>

<h4>通过监听系统截屏进程的运行和退出捕获截屏事件</h4>

<p>这种方法需要有一个后台线程以一定的频率去检查系统截屏进程是否启动，运行，退出，并作出相应的逻辑，而这个频率其实很难把握，毕竟应用无法预期这个截屏动作，因此这种方法也不推荐，此种方法和上面的那种方法可能只适用于非常特定的场景。</p>

<h4>通过FileObserver间接捕获</h4>

<p>这种方法其实是比较可靠和可控的，就是有一个问题, 一个FileObserver初始化的时候就得决定observe哪个目录，所以适配不同机型的过程就变成了适配所以可能的目录，这个是非常麻烦的事情，不过FileObserver总体来看是可以解决这个问题的，唯一比较难的就是要适配所有可能的机型对应的目录。最开始做这个功能的时候我实现了一版使用FileObserver的实现:</p>
<div class="highlight"><pre><code class="language-java" data-lang="java"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ScreenshotObserver</span> <span class="kd">extends</span> <span class="n">FileObserver</span> <span class="o">{</span>

  <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">TAG</span> <span class="o">=</span> <span class="n">ScreenshotObserver</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">getSimpleName</span><span class="o">();</span>
       <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">PATH</span> <span class="o">=</span> <span class="n">Environment</span><span class="o">.</span><span class="na">getExternalStorageDirectory</span><span class="o">().</span><span class="na">toString</span><span class="o">()</span> <span class="o">+</span> <span class="s">&quot;/Pictures/Screenshots/&quot;</span><span class="o">;</span>

       <span class="kd">private</span> <span class="n">OnScreenshotTakenListener</span> <span class="n">mListener</span><span class="o">;</span>
       <span class="kd">private</span> <span class="n">String</span> <span class="n">mLastTakenPath</span><span class="o">;</span>

       <span class="kd">public</span> <span class="nf">ScreenshotObserver</span><span class="o">(</span><span class="n">OnScreenshotTakenListener</span> <span class="n">listener</span><span class="o">)</span> <span class="o">{</span>
            <span class="kd">super</span><span class="o">(</span><span class="n">PATH</span><span class="o">,</span> <span class="n">FileObserver</span><span class="o">.</span><span class="na">CLOSE_WRITE</span><span class="o">);</span>
            <span class="n">mListener</span> <span class="o">=</span> <span class="n">listener</span><span class="o">;</span>
       <span class="o">}</span>

       <span class="nd">@Override</span>
       <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onEvent</span><span class="o">(</span><span class="kt">int</span> <span class="n">event</span><span class="o">,</span> <span class="n">String</span> <span class="n">path</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">path</span><span class="o">==</span><span class="kc">null</span> <span class="o">||</span> <span class="n">event</span><span class="o">!=</span><span class="n">FileObserver</span><span class="o">.</span><span class="na">CLOSE_WRITE</span><span class="o">)</span>
                    <span class="n">Log</span><span class="o">.</span><span class="na">d</span><span class="o">(</span><span class="n">TAG</span><span class="o">,</span> <span class="s">&quot;Don&#39;t care.&quot;</span><span class="o">);</span>
            <span class="k">else</span> <span class="nf">if</span> <span class="o">(</span><span class="n">mLastTakenPath</span><span class="o">!=</span><span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="n">path</span><span class="o">.</span><span class="na">equalsIgnoreCase</span><span class="o">(</span><span class="n">mLastTakenPath</span><span class="o">))</span>
                    <span class="n">Log</span><span class="o">.</span><span class="na">d</span><span class="o">(</span><span class="n">TAG</span><span class="o">,</span> <span class="s">&quot;This event has been observed before.&quot;</span><span class="o">);</span>
            <span class="k">else</span> <span class="o">{</span>
                    <span class="n">mLastTakenPath</span> <span class="o">=</span> <span class="n">path</span><span class="o">;</span>
                    <span class="n">File</span> <span class="n">file</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">File</span><span class="o">(</span><span class="n">PATH</span><span class="o">+</span><span class="n">path</span><span class="o">);</span>
                    <span class="n">mListener</span><span class="o">.</span><span class="na">onScreenshotTaken</span><span class="o">(</span><span class="n">Uri</span><span class="o">.</span><span class="na">fromFile</span><span class="o">(</span><span class="n">file</span><span class="o">));</span>
                    <span class="n">Log</span><span class="o">.</span><span class="na">d</span><span class="o">(</span><span class="n">TAG</span><span class="o">,</span> <span class="s">&quot;Send event to listener.&quot;</span><span class="o">);</span>
            <span class="o">}</span>
       <span class="o">}</span>
  <span class="o">}</span>
</code></pre></div>
<h4>通过ContentObserver间接捕获</h4>

<p>这种方式算是目前最可靠，灵活性最好的方式了。实现起来先对其他几种方式要做的事也先对多一点，一下是我的实现，这个实现针对国内的一些手机做了适配，覆盖到了一些比较极端的情况:</p>
<div class="highlight"><pre><code class="language-java" data-lang="java"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ScreenshotManager</span> <span class="o">{</span>

    <span class="kd">private</span> <span class="n">OnScreenshotTakenListener</span> <span class="n">mListener</span><span class="o">;</span>
    <span class="kd">private</span> <span class="n">String</span> <span class="n">mLastTakenPath</span><span class="o">;</span>
    <span class="kd">private</span> <span class="n">Context</span> <span class="n">mContext</span><span class="o">;</span>
    <span class="kd">private</span> <span class="n">Timer</span> <span class="n">mCheckImageTimer</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kt">int</span> <span class="n">mCount</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>

    <span class="cm">/**</span>
<span class="cm">     * Internal storage observer</span>
<span class="cm">     */</span>
    <span class="kd">private</span> <span class="n">ScreenshotObserver</span> <span class="n">mInternalObserver</span><span class="o">;</span>

    <span class="cm">/**</span>
<span class="cm">     * External storage observer</span>
<span class="cm">     */</span>

    <span class="kd">private</span> <span class="n">ScreenshotObserver</span> <span class="n">mExternalObserver</span><span class="o">;</span>

    <span class="kd">private</span> <span class="n">HandlerThread</span> <span class="n">mHandlerThread</span><span class="o">;</span>
    <span class="kd">private</span> <span class="n">Handler</span> <span class="n">mContenHandler</span><span class="o">;</span>


    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">String</span><span class="o">[]</span> <span class="n">MEDIA_PROJECTIONS</span> <span class="o">=</span>  <span class="o">{</span>
            <span class="n">MediaStore</span><span class="o">.</span><span class="na">Images</span><span class="o">.</span><span class="na">ImageColumns</span><span class="o">.</span><span class="na">DATA</span><span class="o">,</span>
            <span class="n">MediaStore</span><span class="o">.</span><span class="na">Images</span><span class="o">.</span><span class="na">ImageColumns</span><span class="o">.</span><span class="na">DATE_TAKEN</span><span class="o">,</span>
    <span class="o">};</span>

    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">String</span><span class="o">[]</span> <span class="n">KEYWORDS</span> <span class="o">=</span> <span class="o">{</span>
            <span class="s">&quot;screenshot&quot;</span><span class="o">,</span> <span class="s">&quot;screen_shot&quot;</span><span class="o">,</span> <span class="s">&quot;screen-shot&quot;</span><span class="o">,</span> <span class="s">&quot;screen shot&quot;</span><span class="o">,</span>
            <span class="s">&quot;screencapture&quot;</span><span class="o">,</span> <span class="s">&quot;screen_capture&quot;</span><span class="o">,</span> <span class="s">&quot;screen-capture&quot;</span><span class="o">,</span> <span class="s">&quot;screen capture&quot;</span><span class="o">,</span>
            <span class="s">&quot;screencap&quot;</span><span class="o">,</span> <span class="s">&quot;screen_cap&quot;</span><span class="o">,</span> <span class="s">&quot;screen-cap&quot;</span><span class="o">,</span> <span class="s">&quot;screen cap&quot;</span><span class="o">,</span> <span class="s">&quot;截屏&quot;</span>
    <span class="o">};</span>


    <span class="kd">public</span> <span class="nf">ScreenshotManager</span><span class="o">(</span><span class="n">Context</span> <span class="n">context</span><span class="o">,</span> <span class="n">OnScreenshotTakenListener</span> <span class="n">listener</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">mContext</span> <span class="o">=</span> <span class="n">context</span><span class="o">;</span>
        <span class="n">mListener</span> <span class="o">=</span> <span class="n">listener</span><span class="o">;</span>
        <span class="n">mLastTakenPath</span> <span class="o">=</span> <span class="n">getLastTakenPath</span><span class="o">();</span>

        <span class="n">mHandlerThread</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">HandlerThread</span><span class="o">(</span><span class="s">&quot;Screenshot_Observer&quot;</span><span class="o">);</span>
        <span class="n">mHandlerThread</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>
        <span class="n">mContenHandler</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">Handler</span><span class="o">(</span><span class="n">mHandlerThread</span><span class="o">.</span><span class="na">getLooper</span><span class="o">());</span>

        <span class="n">mInternalObserver</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">ScreenshotObserver</span><span class="o">(</span><span class="n">mContenHandler</span><span class="o">,</span> <span class="n">MediaStore</span><span class="o">.</span><span class="na">Images</span><span class="o">.</span><span class="na">Media</span><span class="o">.</span><span class="na">INTERNAL_CONTENT_URI</span><span class="o">);</span>
        <span class="n">mExternalObserver</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">ScreenshotObserver</span><span class="o">(</span><span class="n">mContenHandler</span><span class="o">,</span> <span class="n">MediaStore</span><span class="o">.</span><span class="na">Images</span><span class="o">.</span><span class="na">Media</span><span class="o">.</span><span class="na">EXTERNAL_CONTENT_URI</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">startScreenshotObserver</span><span class="o">()</span> <span class="o">{</span>
        <span class="n">mContext</span><span class="o">.</span><span class="na">getContentResolver</span><span class="o">().</span><span class="na">registerContentObserver</span><span class="o">(</span>
                <span class="n">MediaStore</span><span class="o">.</span><span class="na">Images</span><span class="o">.</span><span class="na">Media</span><span class="o">.</span><span class="na">INTERNAL_CONTENT_URI</span><span class="o">,</span>
                <span class="kc">false</span><span class="o">,</span>
                <span class="n">mInternalObserver</span>
        <span class="o">);</span>
        <span class="n">mContext</span><span class="o">.</span><span class="na">getContentResolver</span><span class="o">().</span><span class="na">registerContentObserver</span><span class="o">(</span>
                <span class="n">MediaStore</span><span class="o">.</span><span class="na">Images</span><span class="o">.</span><span class="na">Media</span><span class="o">.</span><span class="na">EXTERNAL_CONTENT_URI</span><span class="o">,</span>
                <span class="kc">false</span><span class="o">,</span>
                <span class="n">mExternalObserver</span>
        <span class="o">);</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">stopScreenshotObserver</span><span class="o">()</span> <span class="o">{</span>
        <span class="n">mContext</span><span class="o">.</span><span class="na">getContentResolver</span><span class="o">().</span><span class="na">unregisterContentObserver</span><span class="o">(</span><span class="n">mInternalObserver</span><span class="o">);</span>
        <span class="n">mContext</span><span class="o">.</span><span class="na">getContentResolver</span><span class="o">().</span><span class="na">unregisterContentObserver</span><span class="o">(</span><span class="n">mExternalObserver</span><span class="o">);</span>
        <span class="n">releaseTimer</span><span class="o">();</span>
    <span class="o">}</span>

    <span class="kd">private</span> <span class="kt">void</span> <span class="nf">handleMediaContentChange</span><span class="o">(</span><span class="n">Uri</span> <span class="n">contentUri</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">Cursor</span> <span class="n">cursor</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
        <span class="k">try</span> <span class="o">{</span>
            <span class="c1">// 数据改变时查询数据库中最后加入的一条数据</span>
            <span class="n">cursor</span> <span class="o">=</span> <span class="n">mContext</span><span class="o">.</span><span class="na">getContentResolver</span><span class="o">().</span><span class="na">query</span><span class="o">(</span>
                    <span class="n">contentUri</span><span class="o">,</span>
                    <span class="n">MEDIA_PROJECTIONS</span><span class="o">,</span>
                    <span class="kc">null</span><span class="o">,</span>
                    <span class="kc">null</span><span class="o">,</span>
                    <span class="n">MediaStore</span><span class="o">.</span><span class="na">Images</span><span class="o">.</span><span class="na">ImageColumns</span><span class="o">.</span><span class="na">DATE_ADDED</span> <span class="o">+</span> <span class="s">&quot; desc limit 1&quot;</span>
            <span class="o">);</span>

            <span class="k">if</span> <span class="o">(</span><span class="n">cursor</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
                <span class="k">return</span><span class="o">;</span>
            <span class="o">}</span>
            <span class="k">if</span> <span class="o">(!</span><span class="n">cursor</span><span class="o">.</span><span class="na">moveToFirst</span><span class="o">())</span> <span class="o">{</span>
                <span class="k">return</span><span class="o">;</span>
            <span class="o">}</span>

            <span class="c1">// 获取各列的索引</span>
            <span class="kt">int</span> <span class="n">dataIndex</span> <span class="o">=</span> <span class="n">cursor</span><span class="o">.</span><span class="na">getColumnIndex</span><span class="o">(</span><span class="n">MediaStore</span><span class="o">.</span><span class="na">Images</span><span class="o">.</span><span class="na">ImageColumns</span><span class="o">.</span><span class="na">DATA</span><span class="o">);</span>
            <span class="kt">int</span> <span class="n">dateTakenIndex</span> <span class="o">=</span> <span class="n">cursor</span><span class="o">.</span><span class="na">getColumnIndex</span><span class="o">(</span><span class="n">MediaStore</span><span class="o">.</span><span class="na">Images</span><span class="o">.</span><span class="na">ImageColumns</span><span class="o">.</span><span class="na">DATE_TAKEN</span><span class="o">);</span>

            <span class="c1">// 获取行数据</span>
            <span class="n">String</span> <span class="n">data</span> <span class="o">=</span> <span class="n">cursor</span><span class="o">.</span><span class="na">getString</span><span class="o">(</span><span class="n">dataIndex</span><span class="o">);</span>
            <span class="kt">long</span> <span class="n">dateTaken</span> <span class="o">=</span> <span class="n">cursor</span><span class="o">.</span><span class="na">getLong</span><span class="o">(</span><span class="n">dateTakenIndex</span><span class="o">);</span>

            <span class="c1">// 处理获取到的第一行数据</span>
            <span class="n">handleMediaRowData</span><span class="o">(</span><span class="n">data</span><span class="o">,</span> <span class="n">dateTaken</span><span class="o">);</span>

        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>

        <span class="o">}</span> <span class="k">finally</span> <span class="o">{</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">cursor</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">cursor</span><span class="o">.</span><span class="na">isClosed</span><span class="o">())</span> <span class="o">{</span>
                <span class="n">cursor</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
            <span class="o">}</span>
        <span class="o">}</span>
    <span class="o">}</span>

    <span class="kd">private</span> <span class="kt">void</span> <span class="nf">handleMediaRowData</span><span class="o">(</span><span class="n">String</span> <span class="n">data</span><span class="o">,</span> <span class="kt">long</span> <span class="n">dateTaken</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">TextUtils</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">(</span><span class="n">data</span><span class="o">))</span>
            <span class="k">return</span><span class="o">;</span>

        <span class="k">if</span> <span class="o">(</span><span class="n">checkScreenShot</span><span class="o">(</span><span class="n">data</span><span class="o">,</span> <span class="n">dateTaken</span><span class="o">))</span> <span class="o">{</span>
            <span class="k">if</span> <span class="o">(!</span><span class="n">data</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">mLastTakenPath</span><span class="o">))</span> <span class="o">{</span>
                <span class="n">mLastTakenPath</span> <span class="o">=</span> <span class="n">data</span><span class="o">;</span>
                <span class="kd">final</span> <span class="n">File</span> <span class="n">file</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">File</span><span class="o">(</span><span class="n">data</span><span class="o">);</span>
                <span class="k">if</span><span class="o">(</span><span class="kc">null</span> <span class="o">==</span> <span class="n">BitmapFactory</span><span class="o">.</span><span class="na">decodeFile</span><span class="o">(</span><span class="n">file</span><span class="o">.</span><span class="na">getPath</span><span class="o">()))</span> <span class="o">{</span>
                    <span class="k">if</span> <span class="o">(</span><span class="n">mCheckImageTimer</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
                        <span class="n">mCheckImageTimer</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">Timer</span><span class="o">();</span>
                    <span class="o">}</span>
                    <span class="n">mCheckImageTimer</span><span class="o">.</span><span class="na">schedule</span><span class="o">(</span><span class="k">new</span> <span class="nf">TimerTask</span><span class="o">()</span> <span class="o">{</span>
                        <span class="nd">@Override</span>
                        <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
                            <span class="k">if</span> <span class="o">(</span><span class="n">mCount</span> <span class="o">&gt;</span> <span class="mi">10</span><span class="o">)</span> <span class="o">{</span>
                                <span class="n">mCheckImageTimer</span><span class="o">.</span><span class="na">cancel</span><span class="o">();</span>
                                <span class="n">mCheckImageTimer</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
                                <span class="k">return</span><span class="o">;</span>
                            <span class="o">}</span>
                            <span class="n">Bitmap</span> <span class="n">image</span> <span class="o">=</span> <span class="n">BitmapFactory</span><span class="o">.</span><span class="na">decodeFile</span><span class="o">(</span><span class="n">mLastTakenPath</span><span class="o">);</span>
                            <span class="k">if</span><span class="o">(</span><span class="n">image</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
                                <span class="n">mListener</span><span class="o">.</span><span class="na">onScreenshotTaken</span><span class="o">(</span><span class="n">mLastTakenPath</span><span class="o">);</span>
                                <span class="n">mCheckImageTimer</span><span class="o">.</span><span class="na">cancel</span><span class="o">();</span>
                                <span class="n">mCheckImageTimer</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
                                <span class="n">mCount</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
                            <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
                                <span class="n">mCount</span><span class="o">++;</span>
                            <span class="o">}</span>
                        <span class="o">}</span>
                    <span class="o">},</span> <span class="mi">0</span><span class="o">,</span> <span class="mi">1000</span><span class="o">);</span>
                <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
                    <span class="n">mListener</span><span class="o">.</span><span class="na">onScreenshotTaken</span><span class="o">(</span><span class="n">mLastTakenPath</span><span class="o">);</span>
                <span class="o">}</span>
            <span class="o">}</span>
            <span class="n">mLastTakenPath</span> <span class="o">=</span> <span class="n">data</span><span class="o">;</span>
        <span class="o">}</span>
    <span class="o">}</span>

    <span class="kd">private</span> <span class="kt">boolean</span> <span class="nf">checkScreenShot</span><span class="o">(</span><span class="n">String</span> <span class="n">data</span><span class="o">,</span> <span class="kt">long</span> <span class="n">dateTaken</span><span class="o">)</span> <span class="o">{</span>

        <span class="n">data</span> <span class="o">=</span> <span class="n">data</span><span class="o">.</span><span class="na">toLowerCase</span><span class="o">();</span>
        <span class="c1">// 判断图片路径是否含有指定的关键字之一, 如果有, 则认为当前截屏了</span>
        <span class="k">for</span> <span class="o">(</span><span class="n">String</span> <span class="n">keyWork</span> <span class="o">:</span> <span class="n">KEYWORDS</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">data</span><span class="o">.</span><span class="na">contains</span><span class="o">(</span><span class="n">keyWork</span><span class="o">))</span> <span class="o">{</span>
                <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
            <span class="o">}</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">private</span> <span class="n">String</span> <span class="nf">getLastTakenPath</span><span class="o">()</span> <span class="o">{</span>
        <span class="n">Cursor</span> <span class="n">cursor</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
        <span class="n">String</span> <span class="n">path</span> <span class="o">=</span> <span class="s">&quot;&quot;</span><span class="o">;</span>
        <span class="k">try</span> <span class="o">{</span>
            <span class="c1">// 数据改变时查询数据库中最后加入的一条数据</span>
            <span class="n">cursor</span> <span class="o">=</span> <span class="n">mContext</span><span class="o">.</span><span class="na">getContentResolver</span><span class="o">().</span><span class="na">query</span><span class="o">(</span>
                    <span class="n">MediaStore</span><span class="o">.</span><span class="na">Images</span><span class="o">.</span><span class="na">Media</span><span class="o">.</span><span class="na">INTERNAL_CONTENT_URI</span><span class="o">,</span>
                    <span class="n">MEDIA_PROJECTIONS</span><span class="o">,</span>
                    <span class="kc">null</span><span class="o">,</span>
                    <span class="kc">null</span><span class="o">,</span>
                    <span class="n">MediaStore</span><span class="o">.</span><span class="na">Images</span><span class="o">.</span><span class="na">ImageColumns</span><span class="o">.</span><span class="na">DATE_ADDED</span> <span class="o">+</span> <span class="s">&quot; desc limit 1&quot;</span>
            <span class="o">);</span>

            <span class="k">if</span> <span class="o">(</span><span class="n">cursor</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
                <span class="k">return</span> <span class="s">&quot;&quot;</span><span class="o">;</span>
            <span class="o">}</span>
            <span class="k">if</span> <span class="o">(!</span><span class="n">cursor</span><span class="o">.</span><span class="na">moveToFirst</span><span class="o">())</span> <span class="o">{</span>
                <span class="k">return</span> <span class="s">&quot;&quot;</span><span class="o">;</span>
            <span class="o">}</span>

            <span class="kt">int</span> <span class="n">dataIndex</span> <span class="o">=</span> <span class="n">cursor</span><span class="o">.</span><span class="na">getColumnIndex</span><span class="o">(</span><span class="n">MediaStore</span><span class="o">.</span><span class="na">Images</span><span class="o">.</span><span class="na">ImageColumns</span><span class="o">.</span><span class="na">DATA</span><span class="o">);</span>
            <span class="kt">int</span> <span class="n">dateTakenIndex</span> <span class="o">=</span> <span class="n">cursor</span><span class="o">.</span><span class="na">getColumnIndex</span><span class="o">(</span><span class="n">MediaStore</span><span class="o">.</span><span class="na">Images</span><span class="o">.</span><span class="na">ImageColumns</span><span class="o">.</span><span class="na">DATE_TAKEN</span><span class="o">);</span>

            <span class="n">path</span> <span class="o">=</span> <span class="n">cursor</span><span class="o">.</span><span class="na">getString</span><span class="o">(</span><span class="n">dataIndex</span><span class="o">);</span>

            <span class="n">cursor</span> <span class="o">=</span> <span class="n">mContext</span><span class="o">.</span><span class="na">getContentResolver</span><span class="o">().</span><span class="na">query</span><span class="o">(</span>
                    <span class="n">MediaStore</span><span class="o">.</span><span class="na">Images</span><span class="o">.</span><span class="na">Media</span><span class="o">.</span><span class="na">EXTERNAL_CONTENT_URI</span><span class="o">,</span>
                    <span class="n">MEDIA_PROJECTIONS</span><span class="o">,</span>
                    <span class="kc">null</span><span class="o">,</span>
                    <span class="kc">null</span><span class="o">,</span>
                    <span class="n">MediaStore</span><span class="o">.</span><span class="na">Images</span><span class="o">.</span><span class="na">ImageColumns</span><span class="o">.</span><span class="na">DATE_ADDED</span> <span class="o">+</span> <span class="s">&quot; desc limit 1&quot;</span>
            <span class="o">);</span>

            <span class="k">if</span> <span class="o">(</span><span class="n">cursor</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
                <span class="k">return</span> <span class="s">&quot;&quot;</span><span class="o">;</span>
            <span class="o">}</span>
            <span class="k">if</span> <span class="o">(!</span><span class="n">cursor</span><span class="o">.</span><span class="na">moveToFirst</span><span class="o">())</span> <span class="o">{</span>
                <span class="k">return</span> <span class="s">&quot;&quot;</span><span class="o">;</span>
            <span class="o">}</span>

            <span class="n">dataIndex</span> <span class="o">=</span> <span class="n">cursor</span><span class="o">.</span><span class="na">getColumnIndex</span><span class="o">(</span><span class="n">MediaStore</span><span class="o">.</span><span class="na">Images</span><span class="o">.</span><span class="na">ImageColumns</span><span class="o">.</span><span class="na">DATA</span><span class="o">);</span>
            <span class="kt">int</span> <span class="n">index</span> <span class="o">=</span> <span class="n">cursor</span><span class="o">.</span><span class="na">getColumnIndex</span><span class="o">(</span><span class="n">MediaStore</span><span class="o">.</span><span class="na">Images</span><span class="o">.</span><span class="na">ImageColumns</span><span class="o">.</span><span class="na">DATE_TAKEN</span><span class="o">);</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">index</span> <span class="o">&gt;</span> <span class="n">dateTakenIndex</span><span class="o">)</span> <span class="o">{</span>
                <span class="n">path</span> <span class="o">=</span> <span class="n">cursor</span><span class="o">.</span><span class="na">getString</span><span class="o">(</span><span class="n">dataIndex</span><span class="o">);</span>
            <span class="o">}</span>

        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>

        <span class="o">}</span> <span class="k">finally</span> <span class="o">{</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">cursor</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">cursor</span><span class="o">.</span><span class="na">isClosed</span><span class="o">())</span> <span class="o">{</span>
                <span class="n">cursor</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
            <span class="o">}</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="n">path</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">private</span> <span class="kt">void</span> <span class="nf">releaseTimer</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">mCheckImageTimer</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">mCheckImageTimer</span><span class="o">.</span><span class="na">cancel</span><span class="o">();</span>
            <span class="n">mCheckImageTimer</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
        <span class="o">}</span>
    <span class="o">}</span>


    <span class="kd">public</span> <span class="kd">interface</span> <span class="nc">OnScreenshotTakenListener</span> <span class="o">{</span>
        <span class="kt">void</span> <span class="nf">onScreenshotTaken</span><span class="o">(</span><span class="n">String</span> <span class="n">path</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="kd">private</span> <span class="kd">class</span> <span class="nc">ScreenshotObserver</span> <span class="kd">extends</span> <span class="n">ContentObserver</span> <span class="o">{</span>
        <span class="kd">private</span> <span class="n">Uri</span> <span class="n">mContentUri</span><span class="o">;</span>
        <span class="kd">public</span> <span class="nf">ScreenshotObserver</span><span class="o">(</span><span class="n">Handler</span> <span class="n">handler</span><span class="o">,</span> <span class="n">Uri</span> <span class="n">contentUri</span><span class="o">)</span> <span class="o">{</span>
            <span class="kd">super</span><span class="o">(</span><span class="n">handler</span><span class="o">);</span>
            <span class="n">mContentUri</span> <span class="o">=</span> <span class="n">contentUri</span><span class="o">;</span>
        <span class="o">}</span>

        <span class="nd">@Override</span>
        <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onChange</span><span class="o">(</span><span class="kt">boolean</span> <span class="n">selfChange</span><span class="o">)</span> <span class="o">{</span>
            <span class="kd">super</span><span class="o">.</span><span class="na">onChange</span><span class="o">(</span><span class="n">selfChange</span><span class="o">);</span>
            <span class="n">handleMediaContentChange</span><span class="o">(</span><span class="n">mContentUri</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div>
<p>这种方式比起FileObserver有一个明显的不同，就是FileObserver得在截屏之前就得知道哪些目录需要监听，而ContentObserver则是在文件系统发生变化的时候去查特定的目录和存储位置，适配起来就相对灵活，只要枚举出这些目录即可。综上，ContentObserver应该是最优的一种实现方式。</p>

	  ]]></description>
	</item>

	<item>
	  <title>Intall Emacs on Ubuntu</title>
	  <link>//install-emacs-on-ubuntu</link>
	  <author>Tao He</author>
	  <pubDate>2017-07-16T02:30:12+08:00</pubDate>
	  <guid>//install-emacs-on-ubuntu</guid>
	  <description><![CDATA[
	     <p>Install Emacs 25 on Ubuntu from source is very easy, follow these steps below could achieve it.</p>

<ul>
<li>Open terminal (Ctrl+Alt+T) and run command to install build tools:</li>
</ul>
<div class="highlight"><pre><code class="language-text" data-lang="text">sudo apt install build-essential checkinstall
</code></pre></div>
<ul>
<li>Then install the build dependencies via command:</li>
</ul>
<div class="highlight"><pre><code class="language-text" data-lang="text">sudo apt-get build-dep emacs24
</code></pre></div>
<ul>
<li><p>Now download the source at ftp.gnu.org/gnu/emacs/, then extract:</p></li>
<li><p>Open terminal and navigate to the &quot;emacs-25.1&quot; folder via command (or select &quot;Open in terminal&quot; from its context menu):</p></li>
</ul>
<div class="highlight"><pre><code class="language-text" data-lang="text">cd ~/Downloads/emacs-25.1
</code></pre></div>
<ul>
<li>In the same terminal window, once you’re in the source folder, run the commands below one by one:</li>
</ul>
<div class="highlight"><pre><code class="language-text" data-lang="text">./configure
make
</code></pre></div>
<ul>
<li>Finally use checkinstall command to create .deb and install Emacs 25.1:</li>
</ul>
<div class="highlight"><pre><code class="language-text" data-lang="text">sudo checkinstall
</code></pre></div>
<p>While running the command, answer on screen questions, e.g., install docs, type package description, change package name, version, etc.</p>

<p>Once done, Emacs is installed on your system and you can remove it anytime by running the command in the prompt with sudo privilege:</p>

<p>In my case it’s:</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">sudo dpkg -r emacs-25
</code></pre></div>
<p>And the last command create a .deb package in the source folder, and it can be used in another Ubuntu machine to install Emacs(need to manually install dependencies via step 2).</p>

<p>Finally, run command emacs to launch the text editor, or launch it from Unity Dash (App Launcher) at next login (or next boot).</p>

	  ]]></description>
	</item>

	<item>
	  <title>在Android上实现无限翻页轮播动画效果</title>
	  <link>//implement-page-up-down-animation-on-android</link>
	  <author>Tao He</author>
	  <pubDate>2017-07-13T02:30:12+08:00</pubDate>
	  <guid>//implement-page-up-down-animation-on-android</guid>
	  <description><![CDATA[
	     <p>最近在工作中遇到一个需求，要求在一个Dialog的标题上显示两行字，但是这行字如果同时出现的话会非常难看，设计出了套方案，类似无限翻页轮播这两行字，要有翻书的效果。
刚开始实现的时候，动画的效果也出来了，但是拿去给设计验收的时候设计总感觉怪怪的，始终达不到设计最终想要的结果。后来通过好多次的调试和验证，发现问题出现在两个
View的动画播放时序和旋转轴的问题上，解决了这两个问题后再拿去给设计看的时候，一切都完美了。 现在这个比较好的设计也已上线， 也因为这个调试和验证的过程感觉对
Android动画的一些细节碰触的较多，所以写下此文记录下这个过程。</p>

<h4>基本原理</h4>

<p>通过<code>ObjectAnimation</code>操作<code>View</code>的<code>RotationY</code>属性，再利用动态改变<code>PivotY</code>的值和动画播放时序的不同来模拟出无限翻页轮播的动画效果</p>

<h4>ObjectAnimation</h4>
<div class="highlight"><pre><code class="language-text" data-lang="text">// 上面的View翻下去的动画

private static ObjectAnimator aboveViewPageDownAnim;

// 下面的View翻上去的动画

private static ObjectAnimator belowViewPageUpAnim;

// 上面的View翻上去的动画

private static ObjectAnimator aboveViewPageUpAnim;

// 下面的View翻下去的动画

private static ObjectAnimator belowViewPageDownAnim;
</code></pre></div>
<h4>关键的常量</h4>
<div class="highlight"><pre><code class="language-text" data-lang="text">// 翻页动画的播放时长

private static int pageUpDownDurition = 500;

// 翻下播放结束前100翻上就开始播放

private static int pageUpBeforeDownEnd = 400;

// 翻上播放完后停留时间

private static int belowViewStayInterval = 800;

// 在Y轴底部翻转

private static int pageUpPivotY = 100;

// 在Y近顶部的位置翻转

private static int pageDownPivotY = 70;
</code></pre></div>
<h4>具体实现</h4>
<div class="highlight"><pre><code class="language-text" data-lang="text">public static void startPageUpDownAnimation(final View aboveView, final View belowView) {

    aboveViewPageDownAnim = ObjectAnimator.ofPropertyValuesHolder(aboveView,
            PropertyValuesHolder.ofFloat(View.ROTATION_X, 0, 90));

    aboveViewPageDownAnim.setDuration(pageUpDownDurition);
    aboveViewPageDownAnim.setInterpolator(new LinearInterpolator());
    aboveViewPageDownAnim.addListener(new Animator.AnimatorListener() {
        @Override
        public void onAnimationStart(Animator animator) {
            aboveView.setPivotY(pageDownPivotY);
            belowView.setVisibility(View.GONE);
            belowView.postDelayed(new Runnable() {
                @Override
                public void run() {
                    belowViewPageUpAnim.start();
                }
            }, pageUpBeforeDownEnd);
        }

        @Override
        public void onAnimationEnd(Animator animator) {

        }

        @Override
        public void onAnimationCancel(Animator animator) {

        }

        @Override
        public void onAnimationRepeat(Animator animator) {

        }
    });

    belowViewPageUpAnim = ObjectAnimator.ofPropertyValuesHolder(belowView,
    PropertyValuesHolder.ofFloat(View.ROTATION_X, -90, 0));
    belowViewPageUpAnim.setDuration(pageUpDownDurition);
    belowViewPageUpAnim.setInterpolator(new LinearInterpolator());
    belowViewPageUpAnim.addListener(new Animator.AnimatorListener() {
        @Override
        public void onAnimationStart(Animator animator) {
            belowView.setVisibility(View.VISIBLE);
            belowView.setPivotY(pageUpPivotY);
        }

        @Override
        public void onAnimationEnd(Animator animator) {
            belowView.postDelayed(new Runnable() {
                @Override
                public void run() {
                    belowViewPageDownAnim.start();
                }
            }, belowViewStayInterval);
        }

        @Override
        public void onAnimationCancel(Animator animator) {

        }

        @Override
        public void onAnimationRepeat(Animator animator) {

        }
    });

    belowViewPageDownAnim = ObjectAnimator.ofPropertyValuesHolder(belowView,
            PropertyValuesHolder.ofFloat(View.ROTATION_X, 0, 90));

    belowViewPageDownAnim.setDuration(pageUpDownDurition);
    belowViewPageDownAnim.setInterpolator(new LinearInterpolator());
    belowViewPageDownAnim.addListener(new Animator.AnimatorListener() {

        @Override
        public void onAnimationStart(Animator animator) {
            belowView.setPivotY(pageDownPivotY);
            aboveView.setVisibility(View.GONE);
            aboveView.postDelayed(new Runnable() {
                @Override
                public void run() {
                    aboveViewPageUpAnim.start();
                }
            }, pageUpBeforeDownEnd);
        }

        @Override
        public void onAnimationEnd(Animator animator) {

        }

        @Override
        public void onAnimationCancel(Animator animator) {

        }

        @Override
        public void onAnimationRepeat(Animator animator) {

        }
    });

    aboveViewPageUpAnim = ObjectAnimator.ofPropertyValuesHolder(aboveView,
            PropertyValuesHolder.ofFloat(View.ROTATION_X, -90, 0));
    aboveViewPageUpAnim.setDuration(pageUpDownDurition);
    aboveViewPageUpAnim.setInterpolator(new LinearInterpolator());
    aboveViewPageUpAnim.addListener(new Animator.AnimatorListener() {
        @Override
        public void onAnimationStart(Animator animator) {
            aboveView.setVisibility(View.VISIBLE);
            aboveView.setPivotY(pageUpPivotY);
        }

        @Override
        public void onAnimationEnd(Animator animator) {
            aboveView.postDelayed(new Runnable() {
                @Override
                public void run() {
                    aboveViewPageDownAnim.start();
                }
            }, belowViewStayInterval);
        }

        @Override
        public void onAnimationCancel(Animator animator) {

        }

        @Override
        public void onAnimationRepeat(Animator animator) {

        }
    });

    aboveViewPageDownAnim.start();
}
</code></pre></div>
<p>其实这个实现已经是一个基本比较通用的翻页动画了，不仅可以用于TextView，ImageView应该也没有问题。</p>

	  ]]></description>
	</item>

	<item>
	  <title>Java中的HashMap</title>
	  <link>//hashmap-in-java</link>
	  <author>Tao He</author>
	  <pubDate>2017-07-11T02:30:12+08:00</pubDate>
	  <guid>//hashmap-in-java</guid>
	  <description><![CDATA[
	     <p>如果你是个Java程序员，那么你不可能对HashMap视而不见，因为你会经常遇到使用它的场景，因此对HashMap的充分了解非常有必要，对我们写出高效可靠的代码很有帮助。</p>

<p>在对HashMap进行深入了解之前，得先清楚HashMap到底是个什么样的存在！</p>

<h4>What&#39;s HashMap</h4>

<p>让我来罗列一些点逐步勾勒出HashMap的轮廓:</p>

<ul>
<li><p>HashMap就是将key做hash算法，然后将hash所对应的数据映射到内存地址，直接取得key所对应的数据。</p></li>
<li><p>底层为哈希数组，数组的每个元素都是一个单链表的头结点</p></li>
<li><p>基于<code>Map</code>接口实现，提供了map操作的泛型类</p></li>
<li><p>允许<code>null</code> values and the <code>null</code> key </p></li>
<li><p>实现了Serializable和Cloneable接口，支持序列化，能被克隆</p></li>
</ul>

<p>轮廓已出，但是仍旧对HashMap感到陌生,甚至都不清楚与Hashtable的区别，因此与Hashtable做一个简单的对比，来辨识出一些HashMap的重要特性。</p>

<h4>HashMap vs. Hashtable</h4>

<ul>
<li><p>Hashtable是线程安全的，HashMap不是</p></li>
<li><p>HashMap 允许<code>null</code> values and the <code>null</code> key, Hashtable不允许</p></li>
<li><p>如果想要预测遍历次序，使用HashMap, Hashtable不易实现</p></li>
</ul>

<p>通过这些概念和理论的梳理，大概对HashMap有了一定感觉，也肯定能够在正确的场景下使用HashMap，但是要说起对HashMap的很多细节时，光知道这些是不够的，需要刨根问底了。
要深入了解HashMap，没有比看其原代码更直接的方式了，但是HashMap的源代码是在太长，如果全部贴进来进行分析和解释，实在没有必要，因此只节选部分关键代码来帮助理解
HashMap的实现和原理。</p>

<h4>HashMap的原理与实现</h4>

<h5>HashMap存储结构</h5>

<p>HashMap的底层存储结构是哈希数组，数组的每个元素都是一个单链表的头节点，链表是用来解决冲突的，如果不同的key映射到了数组的同一位置处，就将其放入单链表中。
链表中节点的数据结构:</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">static class Entry&lt;K,V&gt; implements Map.Entry&lt;K,V&gt; {    
    final K key;    
    V value;    
    // 指向下一个节点    
    Entry&lt;K,V&gt; next;    
    final int hash;    

    // 构造函数。    
    // 输入参数包括&quot;哈希值(h)&quot;, &quot;键(k)&quot;, &quot;值(v)&quot;, &quot;下一节点(n)&quot;    
    Entry(int h, K k, V v, Entry&lt;K,V&gt; n) {    
        value = v;    
        next = n;    
        key = k;    
        hash = h;    
    }    

    public final K getKey() {    
        return key;    
    }    

    public final V getValue() {    
        return value;    
    }    

    public final V setValue(V newValue) {    
        V oldValue = value;    
        value = newValue;    
        return oldValue;    
    }    

    // 判断两个Entry是否相等    
    // 若两个Entry的“key”和“value”都相等，则返回true。    
    // 否则，返回false    
    public final boolean equals(Object o) {    
        if (!(o instanceof Map.Entry))    
            return false;    
        Map.Entry e = (Map.Entry)o;    
        Object k1 = getKey();    
        Object k2 = e.getKey();    
        if (k1 == k2 || (k1 != null &amp;&amp; k1.equals(k2))) {    
            Object v1 = getValue();    
            Object v2 = e.getValue();    
            if (v1 == v2 || (v1 != null &amp;&amp; v1.equals(v2)))    
                return true;    
        }    
        return false;    
    }    

    // 实现hashCode()    
    public final int hashCode() {    
        return (key==null   ? 0 : key.hashCode()) ^    
               (value==null ? 0 : value.hashCode());    
    }    

    public final String toString() {    
        return getKey() + &quot;=&quot; + getValue();    
    }    

    // 当向HashMap中添加元素时，绘调用recordAccess()。    
    // 这里不做任何处理    
    void recordAccess(HashMap&lt;K,V&gt; m) {    
    }  

    // 当从HashMap中删除元素时，绘调用recordRemoval()。    
    // 这里不做任何处理    
    void recordRemoval(HashMap&lt;K,V&gt; m) {    
    }
} 
</code></pre></div>
<ul>
<li><p><code>Entry</code>是单向链表</p></li>
<li><p>它是 <code>HashMap</code>链式存储法对应的链表</p></li>
</ul>

<h5>HashMap几个重要的属性</h5>
<div class="highlight"><pre><code class="language-text" data-lang="text">public class HashMap&lt;K,V&gt;    
    extends AbstractMap&lt;K,V&gt;    
    implements Map&lt;K,V&gt;, Cloneable, Serializable    
{    

    static final int DEFAULT_INITIAL_CAPACITY = 16;    

    static final int MAXIMUM_CAPACITY = 1 &lt;&lt; 30;    

    static final float DEFAULT_LOAD_FACTOR = 0.75f;    

    // 存储数据的Entry数组，长度是2的幂。    
    // HashMap采用链表法解决冲突，每一个Entry本质上是一个单向链表    
    transient Entry[] table;    

    // HashMap的底层数组中已用槽的数量    
    transient int size;    

    int threshold;

    final float loadFactor;    

    // HashMap被改变的次数    
    transient volatile int modCount; 

    ...
}
</code></pre></div>
<ul>
<li><p><code>DEFAULT_INITIAL_CAPACITY</code> - 默认的初始容量（容量为HashMap中槽的数目）是16，且实际容量必须是2的整数次幂</p></li>
<li><p><code>MAXIMUM_CAPACITY</code> - 最大容量（必须是2的幂且小于2的30次方，传入容量过大将被这个值替换）</p></li>
<li><p><code>loadFactor</code> - 加载因子, 默认为0.75</p></li>
<li><p><code>threshold</code> - HashMap的阈值，用于判断是否需要调整HashMap的容量（threshold = 容量*加载因子）</p></li>
</ul>

<p>其中初始容量和加载因子是影响HashMap性能的重要参数。如果这两个测试设置得当，则HashMap可以表现出很好的性能。到此，关于HashMap
的一些关键部分都已和盘托出,更加细节的部分再次就不进一步讨论了。</p>

	  ]]></description>
	</item>


</channel>
</rss>
