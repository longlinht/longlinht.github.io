<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0"
  xmlns:content="http://purl.org/rss/1.0/modules/content/"
  xmlns:dc="http://purl.org/dc/elements/1.1/"
  xmlns:itunes="http://www.itunes.com/dtds/podcast-1.0.dtd"
  xmlns:trackback="http://madskills.com/public/xml/rss/module/trackback/">
  <channel>
    <title>与机器，人，神共舞</title>
    <link>http://longlinht.github.io/</link>
    <description>编程，读书，思考，旅行，与机器对话，与人交谈，对神发问，探索，体验人生美丽的风景</description>
    <pubDate>Wed, 24 Jan 2018 02:20:12 +0800</pubDate>
    <item>
      <title>踩坑小计-PopupWindow的isShowing不工作</title>
      <link>http://longlinht.github.io//popup-window-is-showing-not-work</link>
      <description>PopupWindow在Android中是比较常用的一种控件，一个成熟的商业级app几乎不可能不用到它,最近在做的一个音乐播放列表的弹窗就是用PopupWindow实现的，做起来也没什么困难，就是有一个恼人的问题，不知道算不算SDK的一个bug.

</description>
      <pubDate>Wed, 24 Jan 2018 02:20:12 +0800</pubDate>
      <dc:date>2018-01-24T02:20:12+08:00</dc:date>
    </item>
    <item>
      <title>踩坑小计-SeekBar宽度显示不全</title>
      <link>http://longlinht.github.io//seekbar-cant-display-full-width</link>
      <description>最近开始一个全新的Android项目，突然感觉很多之前忽略掉的一些不大不小的问题和细节渐渐的浮出了水面，虽不是什么大问题，通过搜索，查找，自己判断改进也都能顺利解决，但终归要查，要找，凭空浪费很多时间，于是决定不论多么琐碎的问题，但凡违反一般性，需要特殊处理的都详细记录下来，避免下次忘记时再踩坑。今天就就记录下一个SeekBar的问题，真的算上不上是一个问题，只是SeekBar这个默认显示的宽度的确与一般View的显示结果不同。

</description>
      <pubDate>Sun, 21 Jan 2018 02:20:12 +0800</pubDate>
      <dc:date>2018-01-21T02:20:12+08:00</dc:date>
    </item>
    <item>
      <title>政策与民意</title>
      <link>http://longlinht.github.io//policy-and-people-will</link>
      <description>政策，这个词在我们这个国家被普遍使用，几乎人人理解其含义，就连目不识丁的老农都会说出这样的话：“中央又出新政策了”，这个词我们是如此的熟悉，以至于我们常常都不会去想政策到底是什么，它是如何制定出来的？我们普通老百姓是否影响到了政策的制定？ 也许一般的理解是老百姓哪能影响到政策的制定，照老农的说法，那是中央出的政策，和我们这些小老百姓有啥关系，这么理解也没错，毕竟在我们这个国家，显然普通民众的权利实在有限，但是此处我并不想讨论政策的制定和出台，只是想探究已出台的，与民生息息相关的这些个政策，到底有没有民意的基础，民意是否影响到了政策的制定？ 要讨论这个问题，拿北京这几年的一些政策法规的例子最好不过了。

</description>
      <pubDate>Fri, 24 Nov 2017 02:20:12 +0800</pubDate>
      <dc:date>2017-11-24T02:20:12+08:00</dc:date>
    </item>
    <item>
      <title>记一次Android系统源代码技术分享</title>
      <link>http://longlinht.github.io//lecture-on-android-system-source-code</link>
      <description>今年年后换了工作，决定继续做Android开发，到了公司一段时间后，受架构组同学之邀，做一次技术分享，当时感觉很头疼，因为我在Android技术组，如果分享这几年C++的技术经验，显然不合时宜，也对组里的同事没有什么帮助，如果分享Android应用的开发，貌似又在班门弄斧，自己在Android方面本来就是半路出家，实在没有什么可分享的干货，正在为难之际，突然想到在之前的公司有段时间一直在阅读Android系统源代码，一直试图能更深入的了解系统的结构和原理，因此也有了一些心得，正好可以与同事分享，也对大家的开发有所帮助，所以有了这篇小记。
   
这篇小记有点类似一个ppt，其实就是那次分享我用markdown格式写的一个ppt，是一个我要讲述的一个提纲，防止我讲跑题了。

</description>
      <pubDate>Fri, 24 Nov 2017 02:20:12 +0800</pubDate>
      <dc:date>2017-11-24T02:20:12+08:00</dc:date>
    </item>
    <item>
      <title>Android开发中二维码库的选用</title>
      <link>http://longlinht.github.io//select-qrc-code-library-in-andord</link>
      <description>在现今的移动App开发中，二维码的使用场景变得越来越普遍，最近我要开发的一个需求就必须生成二维码，自然就面临二维码库选用的问题，因为大名鼎鼎的ZXing的存在，这也本不是什么特别需要考虑的问题。但是因为ZXing的大而全，要在一款只是将二维码作为一个特定使用场景下的一个功能的App，完全引入ZXing就有点过了，所以就面临了ZXing库的裁剪问题。但是裁剪这样一个大而全的多平台支持的库也不是什么简单的事情，所以我也顺便调研了其他的二维码库作为参考:

</description>
      <pubDate>Mon, 21 Aug 2017 02:30:12 +0800</pubDate>
      <dc:date>2017-08-21T02:30:12+08:00</dc:date>
    </item>
    <item>
      <title>捕获Android截屏事件</title>
      <link>http://longlinht.github.io//capture-screenshot-event-on-android</link>
      <description>在Android平台上截屏事件没有对应的一个标准的事件和通知，所以应用App无法通过标准或统一的方式去捕获这个事件来满足自己的要求。
只能通过间接的方式捕获到这个事件，我因为要做一个微信的截屏图片分享的功能，所以对Android截屏事件做了一个调研，并且在开发中 
选用了其中的一种方式。 大体上，要解决这个问题，大概有以下几种方法，每种方法的可靠性和灵活性都不同。

</description>
      <pubDate>Thu, 03 Aug 2017 02:30:12 +0800</pubDate>
      <dc:date>2017-08-03T02:30:12+08:00</dc:date>
    </item>
    <item>
      <title>Intall Emacs on Ubuntu</title>
      <link>http://longlinht.github.io//install-emacs-on-ubuntu</link>
      <description>Install Emacs 25 on Ubuntu from source is very easy, follow these steps below could achieve it.

</description>
      <pubDate>Sun, 16 Jul 2017 02:30:12 +0800</pubDate>
      <dc:date>2017-07-16T02:30:12+08:00</dc:date>
    </item>
    <item>
      <title>在Android上实现无限翻页轮播动画效果</title>
      <link>http://longlinht.github.io//implement-page-up-down-animation-on-android</link>
      <description>最近在工作中遇到一个需求，要求在一个Dialog的标题上显示两行字，但是这行字如果同时出现的话会非常难看，设计出了套方案，类似无限翻页轮播这两行字，要有翻书的效果。
刚开始实现的时候，动画的效果也出来了，但是拿去给设计验收的时候设计总感觉怪怪的，始终达不到设计最终想要的结果。后来通过好多次的调试和验证，发现问题出现在两个
View的动画播放时序和旋转轴的问题上，解决了这两个问题后再拿去给设计看的时候，一切都完美了。 现在这个比较好的设计也已上线， 也因为这个调试和验证的过程感觉对
Android动画的一些细节碰触的较多，所以写下此文记录下这个过程。

</description>
      <pubDate>Thu, 13 Jul 2017 02:30:12 +0800</pubDate>
      <dc:date>2017-07-13T02:30:12+08:00</dc:date>
    </item>
    <item>
      <title>Java中的HashMap</title>
      <link>http://longlinht.github.io//hashmap-in-java</link>
      <description>如果你是个Java程序员，那么你不可能对HashMap视而不见，因为你会经常遇到使用它的场景，因此对HashMap的充分了解非常有必要，对我们写出高效可靠的代码很有帮助。

</description>
      <pubDate>Tue, 11 Jul 2017 02:30:12 +0800</pubDate>
      <dc:date>2017-07-11T02:30:12+08:00</dc:date>
    </item>
    <item>
      <title>对AI的一些臆想</title>
      <link>http://longlinht.github.io//think-about-AI</link>
      <description>   作为一个码农，长期从事应用研发的工作，于当下热门的人工智能其实一点都没有交集，既不了解机器学习，也没有接触过计算机神经网络，甚至没有使用过Hadoop这种技术，可谓对AI相关的领域所知甚少，但这并不阻碍我对AI产生一些思考和想法，而这些思考和想法的缘起竟然都是这一两年上映的几部AI相关的电影和相关的几本畅销书，其中所涉及的技术和思想也都相对易懂，和机器学习类的书籍形成鲜明对比。
   

</description>
      <pubDate>Mon, 10 Jul 2017 02:30:12 +0800</pubDate>
      <dc:date>2017-07-10T02:30:12+08:00</dc:date>
    </item>
    <item>
      <title>Dimension Units in Android</title>
      <link>http://longlinht.github.io//dimension-units-in-android</link>
      <description>When I start develop application for Android, I am confused about the dimension units many times. So I decide to figure out it clearly through this article.

</description>
      <pubDate>Fri, 07 Apr 2017 20:30:12 +0800</pubDate>
      <dc:date>2017-04-07T20:30:12+08:00</dc:date>
    </item>
    <item>
      <title>Building My Own Mac Working Environment</title>
      <link>http://longlinht.github.io//building-my-own-mac-working-environment</link>
      <description>In recent 2 years, I have switched my own working environment from Windows to Ubuntu and Mac. For the reason that I switched C/C++ development for Windows to Java development for Android. But I still prefer C++, so I won't give up C/C++ programming. In this article I will write down detail steps that how I build working environment. This working environment on Mac is a general working environment, not just for Android development but also C/C++ development. Let's start!

</description>
      <pubDate>Sun, 02 Apr 2017 06:30:12 +0800</pubDate>
      <dc:date>2017-04-02T06:30:12+08:00</dc:date>
    </item>
    <item>
      <title>Java References</title>
      <link>http://longlinht.github.io//java-references</link>
      <description>Before JDK 1.2, if a object isn't referenced by any variable, it can't be used any more.Since JDK 1.2, Java has four reference types.In order from strongest to weakest these references are: Strong, Soft, Weak, Phantom. 

</description>
      <pubDate>Wed, 10 Aug 2016 00:00:00 +0800</pubDate>
      <dc:date>2016-08-10T00:00:00+08:00</dc:date>
    </item>
    <item>
      <title>Android Thread Related Stuff</title>
      <link>http://longlinht.github.io//thread-looper-handler-in-android</link>
      <description>It's widely known that it's illegal to update UI components directly from threads other than main thread in android. This a rule in Android world, we can't violate it. But, so many situations we need 
update UI when we finish something in separated thread. This is a basic problem, it will refer more important concepts related thread.

</description>
      <pubDate>Sat, 06 Aug 2016 03:00:00 +0800</pubDate>
      <dc:date>2016-08-06T03:00:00+08:00</dc:date>
    </item>
    <item>
      <title>Understanding Java Garbage Collection</title>
      <link>http://longlinht.github.io//java-garbage-collection</link>
      <description>**stop-the-world** Stop-the-world means that the JVM is stopping the application from running to execute a GC. When stop-the-world occurs, every thread except for the threads needed for the GC will stop their tasks. The interrupted tasks will resume only after the GC task has completed. GC tuning often means reducing this stop-the-world time.

</description>
      <pubDate>Fri, 05 Aug 2016 00:00:00 +0800</pubDate>
      <dc:date>2016-08-05T00:00:00+08:00</dc:date>
    </item>
    <item>
      <title>Android Binder Mechanism</title>
      <link>http://longlinht.github.io//android-binder-mechanism</link>
      <description>#### What is Binder

</description>
      <pubDate>Wed, 03 Aug 2016 03:00:00 +0800</pubDate>
      <dc:date>2016-08-03T03:00:00+08:00</dc:date>
    </item>
    <item>
      <title>Memory Leak in Android Development</title>
      <link>http://longlinht.github.io//memory-leak-in-android-development</link>
      <description>When programming Android, although java has GC mechanism, some our wrong code way and personal habits still cause memory leak, GC also can't fix it.

</description>
      <pubDate>Mon, 01 Aug 2016 22:00:00 +0800</pubDate>
      <dc:date>2016-08-01T22:00:00+08:00</dc:date>
    </item>
    <item>
      <title>Userful command line in Android development</title>
      <link>http://longlinht.github.io//userful-command-line-in-android-development</link>
      <description>## 

</description>
      <pubDate>Sun, 10 Jul 2016 02:30:12 +0800</pubDate>
      <dc:date>2016-07-10T02:30:12+08:00</dc:date>
    </item>
    <item>
      <title>Define Userful Android Drawables</title>
      <link>http://longlinht.github.io//define-userful-android-drawables</link>
      <description>We can define many useful drawables in Android, in this article, I collected some of definations I ever used.

</description>
      <pubDate>Wed, 06 Jul 2016 02:20:12 +0800</pubDate>
      <dc:date>2016-07-06T02:20:12+08:00</dc:date>
    </item>
    <item>
      <title>I Do Not Know What I May Appear To The World</title>
      <link>http://longlinht.github.io//I-do-not-know-what-I-may-appear-to-the-world</link>
      <description>作为“God”板块的第一篇，引用牛顿爵士的一段话来开启。

</description>
      <pubDate>Thu, 09 Jun 2016 01:20:00 +0800</pubDate>
      <dc:date>2016-06-09T01:20:00+08:00</dc:date>
    </item>
    <item>
      <title>Easy doesn't enter into grown-up life</title>
      <link>http://longlinht.github.io//easy-doesnt-enter-into-grown-up-life</link>
      <description>这是我“Human”目录的第一篇文章，我以一句电影里的台词作为题目，“成年人的生活里没有容易二字”。这个板块其实我更不知道写什么，不过倒是可以借此文来解释一下那个奇怪的目录名称，其实这个奇怪的名称源于我几年前写
的一句话“ 茕茕孑力，与机器，人，神共舞”。此文止,期待后续的文章。


</description>
      <pubDate>Thu, 09 Jun 2016 00:10:00 +0800</pubDate>
      <dc:date>2016-06-09T00:10:00+08:00</dc:date>
    </item>
    <item>
      <title>Hello World</title>
      <link>http://longlinht.github.io//hello-world</link>
      <description>This is my first post for Machine category, I named it 'Hello World' to start my blog. Because many developers start their first program with a single line code to print 'Hello World'. Certainly my first line code also is 'Hello World' in C programming language. I hope this will be a good start!

</description>
      <pubDate>Thu, 09 Jun 2016 00:00:00 +0800</pubDate>
      <dc:date>2016-06-09T00:00:00+08:00</dc:date>
    </item>
    <item>
      <title>Using Duilib to build GUI</title>
      <link>http://longlinht.github.io//using-duilib-to-build-gui</link>
      <description>Duilib is a free open source DirectUI library on Windows , because its simple and expandable design and stable and efficient implementation, accepted generally by the major Internet companies  widely used in IM, video client, stock market software, navigation software, mobile phone support Software, security software and many PC client software in other industries. When We developed a IM in a company I worked, we even use this library to replace Qt GUI part we used in our code.

</description>
      <pubDate>Sun, 04 Jan 2015 03:20:00 +0800</pubDate>
      <dc:date>2015-01-04T03:20:00+08:00</dc:date>
    </item>
    <item>
      <title>C#创建不规则窗体(控件)</title>
      <link>http://longlinht.github.io//c-sharp-create-unregular-window</link>
      <description>创建不规则窗体和控件这个过程包含了大量的图形编程工作，不同的计算机因内存和显卡的不同可能会导致最终的效果有所不同 。创建不规则窗体具体步骤：

</description>
      <pubDate>Thu, 06 Sep 2012 02:30:12 +0800</pubDate>
      <dc:date>2012-09-06T02:30:12+08:00</dc:date>
    </item>
    <item>
      <title>Similarities and Differences between Java and C++</title>
      <link>http://longlinht.github.io//similarities-and-differences-between-java-and-cpp</link>
      <description>* Java does not support typedefs, defines, or a preprocessor. 

</description>
      <pubDate>Sun, 15 Jan 2012 22:00:00 +0800</pubDate>
      <dc:date>2012-01-15T22:00:00+08:00</dc:date>
    </item>
    <item>
      <title>Smart Pointer in C++</title>
      <link>http://longlinht.github.io//smart-pointer-in-cpp</link>
      <description>In C++, there is a uncommnon conception named smart pointer, it is rarely seen in other programming lauguages. So, what's it? We could simply define it. **A smart pointer is a class that wraps a 'raw' (or 'bare') C++ pointer, to manage the lifetime of the object being pointed to**.

</description>
      <pubDate>Mon, 07 Mar 2011 02:30:12 +0800</pubDate>
      <dc:date>2011-03-07T02:30:12+08:00</dc:date>
    </item>
    <item>
      <title>高质量C++编程注意事项</title>
      <link>http://longlinht.github.io//high-quality-cpp</link>
      <description>* 不提倡使用全局变量，尽量不要在头文件中出现象extern int value 这类声明

</description>
      <pubDate>Sat, 05 Feb 2011 22:00:00 +0800</pubDate>
      <dc:date>2011-02-05T22:00:00+08:00</dc:date>
    </item>
    <item>
      <title>Copy and swap idiom in C++</title>
      <link>http://longlinht.github.io//copy-and-swap-idiom-in-cpp</link>
      <description>#### Purpose - assists the assignment operator in achieving two things: 

</description>
      <pubDate>Fri, 04 Feb 2011 02:20:12 +0800</pubDate>
      <dc:date>2011-02-04T02:20:12+08:00</dc:date>
    </item>
    <item>
      <title>Type conversion in C++</title>
      <link>http://longlinht.github.io//type-conversion-in-cpp</link>
      <description>* `static_cast`

</description>
      <pubDate>Thu, 27 Jan 2011 02:20:12 +0800</pubDate>
      <dc:date>2011-01-27T02:20:12+08:00</dc:date>
    </item>
    <item>
      <title>References vs. Pointers in C++</title>
      <link>http://longlinht.github.io//pointers-vs-references-in-cpp</link>
      <description>In C++, references provide many of the same capabilities as pointers. In real development, we prefer to use references to avoid the complex and error prone of pointers. But in some situations, our choices're not clear. As a good C++ developer, we shouldn't ignore this confusion, this hesitation, so we need make it clear, more clear.

</description>
      <pubDate>Wed, 19 Jan 2011 03:40:32 +0800</pubDate>
      <dc:date>2011-01-19T03:40:32+08:00</dc:date>
    </item>
    <item>
      <title>Split a String in C++</title>
      <link>http://longlinht.github.io//split-string-in-cpp</link>
      <description>There are many ways to split a string in C++, but what's the most elegant way to split a string in C++? May be we can find it step by step. The most simple and direct way is use `istringstream` to split.

</description>
      <pubDate>Wed, 29 Dec 2010 02:20:12 +0800</pubDate>
      <dc:date>2010-12-29T02:20:12+08:00</dc:date>
    </item>
    <item>
      <title>Forward declaration in C++</title>
      <link>http://longlinht.github.io//forward-declaration-in-cpp</link>
      <description>Why need use forward declaration? when we can use it? I will figure out these problem separately.

</description>
      <pubDate>Wed, 03 Nov 2010 02:30:12 +0800</pubDate>
      <dc:date>2010-11-03T02:30:12+08:00</dc:date>
    </item>
    <dc:date>2018-01-24T02:20:12+08:00</dc:date>
  </channel>
</rss>